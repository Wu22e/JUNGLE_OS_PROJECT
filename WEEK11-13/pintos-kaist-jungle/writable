vm/inspect.c:	const void *va = (const void *) f->R.rax;
vm/inspect.c:	f->R.rax = PTE_ADDR (pml4_get_page (thread_current ()->pml4, va));
vm/inspect.c: *   @RAX - Virtual address to inspect
vm/inspect.c: *   @RAX - Physical address that mmaped to input. */
vm/file.c://! - - - --  -- - - -- - -- -- - - -- -- - -- - -- - -- -- - - - -
vm/file.c:	page->operations = &file_ops;
vm/file.c:	struct file_page *file_page = &page->file;
vm/file.c:	struct file_page *file_page UNUSED = &page->file;
vm/file.c:	struct file_page *file_page UNUSED = &page->file;
vm/file.c:	struct file_page *file_page UNUSED = &page->file;
vm/uninit.c: * the handler chain calls uninit_initialize (page->operations.swap_in).
vm/uninit.c:	struct uninit_page *uninit = &page->uninit;
vm/uninit.c:	vm_initializer *init = uninit->init;
vm/uninit.c:	void *aux = uninit->aux;
vm/uninit.c:	return uninit->page_initializer (page, uninit->type, kva) &&
vm/uninit.c:	struct uninit_page *uninit UNUSED = &page->uninit;
vm/vm.c:	int ty = VM_TYPE (page->operations->type);
vm/vm.c:			return VM_TYPE (page->uninit.type);
vm/vm.c:	struct supplemental_page_table *spt = &thread_current ()->spt;
vm/vm.c:		page->writable = writable; //todo 이거 확인해야함
vm/vm.c:    page->va = pg_round_down(va); //? 이게 가능했던 이유가 뭐였을까?
vm/vm.c:    elem = hash_find(&spt->vm, &page->elem);
vm/vm.c:    if(!hash_insert(&spt->vm, &page->elem)) succ = true;
vm/vm.c:    if(hash_delete(&spt->vm, &page->elem)) succ = true;
vm/vm.c:    //! - - - - - - - - - - - - - - - - - - - - - - - - - -
vm/vm.c://^ ------------->vm_get_frame 함수<-------------------------------
vm/vm.c://^ 그래서 frame->kva 에 palloc을 해줌
vm/vm.c:	frame->page = NULL; //todo 그냥 이렇게 초기화하는게 맞는가?
vm/vm.c:    frame->kva = palloc_get_page(PAL_USER); 
vm/vm.c:	ASSERT (frame->page == NULL); //! 여기서 frame->page == NULL일때 통과하는데 왜지?
vm/vm.c:	struct supplemental_page_table *spt UNUSED = &thread_current ()->spt;
vm/vm.c:		exit(-1);
vm/vm.c://^ ------------->vm_claim_page 함수<-------------------------------
vm/vm.c:    if(page = spt_find_page (&thread_current()->spt, va)){
vm/vm.c://^ ------------->vm_do_claim_page 함수<-------------------------------
vm/vm.c:	frame->page = page;
vm/vm.c:	page->frame = frame;
vm/vm.c:    // spt_insert_page(&thread_current()->spt, page) //! 얘 반환형이 bool인데, 밑에 return (swap_in)이 bool이어서 걍 
vm/vm.c:	if(!pml4_set_page(&thread_current()->pml4, page->va,frame->kva, page->writable));
vm/vm.c:	//! 여기서 page->va는 user virtual address임
vm/vm.c:	return swap_in (page, frame->kva); //todo 나중에 이해
vm/vm.c://! 구현 시작 - - - --  -- - - -- - -- -- - - -- - -- - -
vm/vm.c:    hash_init(&spt->vm, vm_hash_func, vm_less_func, NULL);
vm/vm.c:    // struct hash *h = &(&(thread_current()->spt)->vm);
vm/vm.c:    // struct hash *h = &thread_current()->spt.vm;
vm/vm.c:    hash_destroy(&spt->vm, spt_destructor);
vm/vm.c:    return hash_int(p->va);
vm/vm.c:    return ap->va < bp->va;
vm/anon.c:/* anon.c: Implementation of page for non-disk image (a.k.a. anonymous page). */
vm/anon.c:	page->operations = &anon_ops;
vm/anon.c:	struct anon_page *anon_page = &page->anon;
vm/anon.c:	struct anon_page *anon_page = &page->anon;
vm/anon.c:	struct anon_page *anon_page = &page->anon;
vm/anon.c:	struct anon_page *anon_page = &page->anon;
vm/Make.vars:# -*- makefile -*-
vm/Make.vars:os.dsk: DEFINES = -DUSERPROG -DFILESYS -DVM
.git/info/exclude:# git ls-files --others --exclude-from=.git/info/exclude
.git/packed-refs:# pack-refs with: peeled fully-peeled sorted 
Binary file .git/index matches
.git/hooks/post-update.sample:# To enable this hook, rename this file to "post-update".
.git/hooks/post-update.sample:exec git update-server-info
.git/hooks/pre-push.sample:# pushed.  If this script exits with a non-zero status nothing will be pushed.
.git/hooks/pre-push.sample:# $1 -- Name of the remote to which the push is being done
.git/hooks/pre-push.sample:# $2 -- URL to which the push is being done
.git/hooks/pre-push.sample:		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
.git/hooks/pre-push.sample:		if [ -n "$commit" ]
.git/hooks/pre-applypatch.sample:# by applypatch from an e-mail message.
.git/hooks/pre-applypatch.sample:# The hook should exit with non-zero status after issuing an
.git/hooks/pre-applypatch.sample:# To enable this hook, rename this file to "pre-applypatch".
.git/hooks/pre-applypatch.sample:. git-sh-setup
.git/hooks/pre-applypatch.sample:precommit="$(git rev-parse --git-path hooks/pre-commit)"
.git/hooks/pre-applypatch.sample:test -x "$precommit" && exec "$precommit" ${1+"$@"}
.git/hooks/update.sample:# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
.git/hooks/update.sample:# ------
.git/hooks/update.sample:# --- Command line
.git/hooks/update.sample:# --- Safety check
.git/hooks/update.sample:if [ -z "$GIT_DIR" ]; then
.git/hooks/update.sample:if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
.git/hooks/update.sample:# --- Config
.git/hooks/update.sample:allowunannotated=$(git config --bool hooks.allowunannotated)
.git/hooks/update.sample:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
.git/hooks/update.sample:denycreatebranch=$(git config --bool hooks.denycreatebranch)
.git/hooks/update.sample:allowdeletetag=$(git config --bool hooks.allowdeletetag)
.git/hooks/update.sample:allowmodifytag=$(git config --bool hooks.allowmodifytag)
.git/hooks/update.sample:projectdesc=$(sed -e '1q' "$GIT_DIR/description")
.git/hooks/update.sample:# --- Check types
.git/hooks/update.sample:	newrev_type=$(git cat-file -t $newrev)
.git/hooks/update.sample:		# un-annotated tag
.git/hooks/update.sample:			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
.git/hooks/update.sample:			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
.git/hooks/update.sample:		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
.git/hooks/update.sample:		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
.git/hooks/update.sample:# --- Finished
.git/hooks/commit-msg.sample:# that has the commit message.  The hook should exit with non-zero
.git/hooks/commit-msg.sample:# To enable this hook, rename this file to "commit-msg".
.git/hooks/commit-msg.sample:# Uncomment the below to add a Signed-off-by line to the message.
.git/hooks/commit-msg.sample:# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
.git/hooks/commit-msg.sample:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
.git/hooks/commit-msg.sample:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
.git/hooks/commit-msg.sample:# This example catches duplicate Signed-off-by lines.
.git/hooks/commit-msg.sample:test "" = "$(grep '^Signed-off-by: ' "$1" |
.git/hooks/commit-msg.sample:	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
.git/hooks/commit-msg.sample:	echo >&2 Duplicate Signed-off-by lines.
.git/hooks/pre-receive.sample:# To enable this hook, rename this file to "pre-receive".
.git/hooks/pre-receive.sample:if test -n "$GIT_PUSH_OPTION_COUNT"
.git/hooks/pre-receive.sample:	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
.git/hooks/pre-receive.sample:			echo "echo from the pre-receive-hook: ${value#*=}" >&2
.git/hooks/prepare-commit-msg.sample:# message file.  If the hook fails with a non-zero status,
.git/hooks/prepare-commit-msg.sample:# To enable this hook, rename this file to "prepare-commit-msg".
.git/hooks/prepare-commit-msg.sample:# The second includes the output of "git diff --name-status -r"
.git/hooks/prepare-commit-msg.sample:# commented because it doesn't cope with --amend or with squashed
.git/hooks/prepare-commit-msg.sample:# The third example adds a Signed-off-by line to the message, that can
.git/hooks/prepare-commit-msg.sample:/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
.git/hooks/prepare-commit-msg.sample:#    /usr/bin/perl -i.bak -pe '
.git/hooks/prepare-commit-msg.sample:#       print "\n" . `git diff --cached --name-status -r`
.git/hooks/prepare-commit-msg.sample:# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
.git/hooks/prepare-commit-msg.sample:# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
.git/hooks/prepare-commit-msg.sample:# if test -z "$COMMIT_SOURCE"
.git/hooks/prepare-commit-msg.sample:#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
.git/hooks/applypatch-msg.sample:# applypatch from an e-mail message.
.git/hooks/applypatch-msg.sample:# The hook should exit with non-zero status after issuing an
.git/hooks/applypatch-msg.sample:# To enable this hook, rename this file to "applypatch-msg".
.git/hooks/applypatch-msg.sample:. git-sh-setup
.git/hooks/applypatch-msg.sample:commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
.git/hooks/applypatch-msg.sample:test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
.git/hooks/fsmonitor-watchman.sample:# To enable this hook, rename this file to "query-watchman" and set
.git/hooks/fsmonitor-watchman.sample:# 'git config core.fsmonitor .git/hooks/query-watchman'
.git/hooks/fsmonitor-watchman.sample:	die "Unsupported query-fsmonitor hook version '$version'.\n" .
.git/hooks/fsmonitor-watchman.sample:	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
.git/hooks/fsmonitor-watchman.sample:	my $o = $json_pkg->new->utf8->decode($response);
.git/hooks/fsmonitor-watchman.sample:	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
.git/hooks/fsmonitor-watchman.sample:		$retry--;
.git/hooks/fsmonitor-watchman.sample:	die "Watchman: $o->{error}.\n" .
.git/hooks/fsmonitor-watchman.sample:	    "Falling back to scanning...\n" if $o->{error};
.git/hooks/fsmonitor-watchman.sample:	print @{$o->{files}};
.git/hooks/pre-commit.sample:# exit with non-zero status after issuing an appropriate message if
.git/hooks/pre-commit.sample:# To enable this hook, rename this file to "pre-commit".
.git/hooks/pre-commit.sample:if git rev-parse --verify HEAD >/dev/null 2>&1
.git/hooks/pre-commit.sample:# If you want to allow non-ASCII filenames set this variable to true.
.git/hooks/pre-commit.sample:allownonascii=$(git config --bool hooks.allownonascii)
.git/hooks/pre-commit.sample:# Cross platform projects tend to avoid non-ASCII filenames; prevent
.git/hooks/pre-commit.sample:	test $(git diff --cached --name-only --diff-filter=A -z $against |
.git/hooks/pre-commit.sample:	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
.git/hooks/pre-commit.sample:Error: Attempt to add a non-ASCII file name.
.git/hooks/pre-commit.sample:exec git diff-index --check --cached $against --
.git/hooks/pre-rebase.sample:# The "pre-rebase" hook is run just before "git rebase" starts doing
.git/hooks/pre-rebase.sample:# non-zero status.
.git/hooks/pre-rebase.sample:# $1 -- the upstream the series was forked from.
.git/hooks/pre-rebase.sample:# $2 -- the branch being rebased (or empty when rebasing the current branch).
.git/hooks/pre-rebase.sample:	topic=`git symbolic-ref HEAD` ||
.git/hooks/pre-rebase.sample:git show-ref -q "$topic" || {
.git/hooks/pre-rebase.sample:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
.git/hooks/pre-rebase.sample:if test -z "$not_in_master"
.git/hooks/pre-rebase.sample:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
.git/hooks/pre-rebase.sample:only_next_2=`git rev-list ^master           ${publish} | sort`
.git/hooks/pre-rebase.sample:	not_in_topic=`git rev-list "^$topic" master`
.git/hooks/pre-rebase.sample:	if test -z "$not_in_topic"
.git/hooks/pre-rebase.sample:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
.git/hooks/pre-rebase.sample:	/usr/bin/perl -e '
.git/hooks/pre-rebase.sample:			/^([0-9a-f]+) /;
.git/hooks/pre-rebase.sample:				/^([0-9a-f]+) (.*)$/;
.git/hooks/pre-rebase.sample:			if (!exists $not_in_next{$elem->[0]}) {
.git/hooks/pre-rebase.sample:				print STDERR " $elem->[1]\n";
.git/hooks/pre-rebase.sample:    build on top of it -- other people may already want to
.git/hooks/pre-rebase.sample:		   o---o---o---o---o---o---o---o---o---o "next"
.git/hooks/pre-rebase.sample:		 /   a---a---b A     /           /
.git/hooks/pre-rebase.sample:	       /   /   c---c---c---c B         /
.git/hooks/pre-rebase.sample:	     /   /   /   b---b C     \       /
.git/hooks/pre-rebase.sample:    ---o---o---o---o---o---o---o---o---o---o---o "master"
.git/hooks/pre-rebase.sample:	git rev-list ^master ^topic next
.git/hooks/pre-rebase.sample:	git rev-list ^master        next
.git/hooks/pre-rebase.sample:	git rev-list master..topic
.git/config:	url = https://github.com/Wu22e/pintos-kaist-jungle-week10.git
.git/config:	url = https://github.com/sunio00000/pintos-kaist-jungle-week10.git
Binary file .git/objects/b0/c22cb83fa764db660a1704ca907cce8fe45276 matches
Binary file .git/objects/36/ddc21fcf443cd94ae5fad68b47759e33779434 matches
Binary file .git/objects/4f/2af0ae65c9589c9ce39c4a1da23a47291be993 matches
Binary file .git/objects/03/483ed1f3fd6560079eb8323102bdaff0fe55de matches
Binary file .git/objects/c3/43fbbe971ff15732840737754e467dae8f65d8 matches
Binary file .git/objects/47/5af10e5651e94f97832ad4aceb05a06fcee528 matches
Binary file .git/objects/81/f80a36e899904f9421ce89e0611782f9c851b7 matches
Binary file .git/objects/cb/8ecd5b78b26148de103adf6a5c9106ba9a3cd3 matches
Binary file .git/objects/dc/459b66f9466cad5d191e7971fcbcddfcc9a099 matches
Binary file .git/objects/ad/889f09bdae48e3404ff4bd6b7bd97f60c45690 matches
Binary file .git/objects/ad/38cdff2d04c0b0b80344af56977f2d60888ca6 matches
Binary file .git/objects/b7/2e966b08831311573a75f562fa1243a3deaf41 matches
Binary file .git/objects/7a/a9bad576201bd94ebf4e866bb09c7fcc25b12c matches
Binary file .git/objects/f2/cd5cd5344c690205fd13b7ea59d81897ded616 matches
Binary file .git/objects/61/6ea1445565b974f9cdd3067e32ff900169ecee matches
Binary file .git/objects/pack/pack-1f67d82ba80b9a109a4a7f47f33ccb0b4b8a4ae9.pack matches
Binary file .git/objects/pack/pack-1f67d82ba80b9a109a4a7f47f33ccb0b4b8a4ae9.idx matches
Binary file .git/objects/59/cb2b7753c70b48ba2a26aa6d9b6899cd16c292 matches
Binary file .git/objects/ec/02191260ea00406ee1c0634b38802dc8d11901 matches
Binary file .git/objects/70/89f1f4620dc4d522d96b35b3a893ed8d23a2e3 matches
.git/logs/HEAD:0000000000000000000000000000000000000000 4bd351ae10a240494e7ffec577a27bee4ff7d587 Wu22e <gulb1602@gmail.com> 1613910993 +0000	clone: from https://github.com/Wu22e/pintos-kaist-jungle-week10.git
.git/logs/refs/heads/master:0000000000000000000000000000000000000000 4bd351ae10a240494e7ffec577a27bee4ff7d587 Wu22e <gulb1602@gmail.com> 1613910993 +0000	clone: from https://github.com/Wu22e/pintos-kaist-jungle-week10.git
.git/logs/refs/remotes/origin/HEAD:0000000000000000000000000000000000000000 4bd351ae10a240494e7ffec577a27bee4ff7d587 Wu22e <gulb1602@gmail.com> 1613910993 +0000	clone: from https://github.com/Wu22e/pintos-kaist-jungle-week10.git
.git/FETCH_HEAD:7089f1f4620dc4d522d96b35b3a893ed8d23a2e3	not-for-merge	branch 'master' of https://github.com/sunio00000/pintos-kaist-jungle-week10
userprog/gdt.c: * The GDT, an x86-64 specific structure, defines segments that can
userprog/gdt.c: * their permissions.  There is also a per-process Local
userprog/gdt.c: * Task-State Segment descriptors.  The former two types are
userprog/gdt.c:	.size = sizeof(gdt) - 1,
userprog/gdt.c:   include user-mode selectors or a TSS, but we need both now. */
userprog/exception.c:   In a real Unix-like OS, most of these interrupts would be
userprog/exception.c:   described in [SV-386] 3-24 and 3-25, but we don't implement
userprog/exception.c:   Refer to [IA32-v3a] section 5.15 "Exception and Interrupt
userprog/exception.c:	intr_register_int (16, 0, INTR_ON, kill, "#MF x87 FPU Floating-Point Error");
userprog/exception.c:			"#XF SIMD Floating-Point Exception");
userprog/exception.c:	intr_register_int (14, 0, INTR_OFF, page_fault, "#PF Page-Fault Exception");
userprog/exception.c:	   the kernel.  Real Unix-like operating systems pass most
userprog/exception.c:	switch (f->cs) {
userprog/exception.c:					thread_name (), f->vec_no, intr_name (f->vec_no));
userprog/exception.c:			   may cause kernel exceptions--but they shouldn't arrive
userprog/exception.c:			PANIC ("Kernel bug - unexpected interrupt in kernel");
userprog/exception.c:					f->vec_no, intr_name (f->vec_no), f->cs);
userprog/exception.c:   description of "Interrupt 14--Page Fault Exception (#PF)" in
userprog/exception.c:   [IA32-v3a] section 5.15 "Exception and Interrupt Reference". */
userprog/exception.c:	bool not_present;  /* True: not-present page, false: writing r/o page. */
userprog/exception.c:	   that caused the fault (that's f->rip). */
userprog/exception.c:	exit(-1);
userprog/exception.c:	not_present = (f->error_code & PF_P) == 0;
userprog/exception.c:	write = (f->error_code & PF_W) != 0;
userprog/exception.c:	user = (f->error_code & PF_U) != 0;
userprog/syscall-entry.S:	push $(SEL_UDSEG)      /* if->ss */
userprog/syscall-entry.S:	push %rbx              /* if->rsp */
userprog/syscall-entry.S:	push %r11              /* if->eflags */
userprog/syscall-entry.S:	push $(SEL_UCSEG)      /* if->cs */
userprog/syscall-entry.S:	push %rcx              /* if->rip */
userprog/syscall-entry.S:	push $(SEL_UDSEG)      /* if->ds */
userprog/syscall-entry.S:	push $(SEL_UDSEG)      /* if->es */
userprog/syscall-entry.S:	popq %rcx              /* if->rip */
userprog/syscall-entry.S:	popq %r11              /* if->eflags */
userprog/syscall-entry.S:	popq %rsp              /* if->rsp */
userprog/build/userprog/syscall.d: ../../include/lib/kernel/stdio.h ../../include/lib/syscall-nr.h \
Binary file userprog/build/userprog/gdt.o matches
Binary file userprog/build/userprog/tss.o matches
Binary file userprog/build/userprog/syscall-entry.o matches
Binary file userprog/build/userprog/syscall.o matches
userprog/build/userprog/syscall-entry.d:userprog/syscall-entry.o: ../../userprog/syscall-entry.S \
Binary file userprog/build/userprog/exception.o matches
Binary file userprog/build/userprog/process.o matches
Binary file userprog/build/kernel.bin matches
userprog/build/Makefile:# -*- makefile -*-
userprog/build/Makefile:	CPPFLAGS += -DDO_TEST_CONDVAR
userprog/build/Makefile:	CPPFLAGS += -DDO_TEST_MLFQS
userprog/build/Makefile:os.dsk: CPPFLAGS += -I$(SRCDIR)/lib/kernel
userprog/build/Makefile:# Kernel-specific library code.
userprog/build/Makefile:threads/kernel.lds.s: CPPFLAGS += -P
userprog/build/Makefile:	$(LD) $(LDFLAGS) -T $< -o $@ $(OBJECTS)
userprog/build/Makefile:	$(OBJCOPY) -O binary -R .note -R .comment -S $< $@.tmp
userprog/build/Makefile:	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) -DKERNEL_LOAD_PAGES=`perl -e 'print +(-s "kernel.bin") / 4096;'`
userprog/build/Makefile:	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7c00 --oformat binary -o $@ $<
userprog/build/Makefile:	rm -f $(OBJECTS) $(DEPENDS)
userprog/build/Makefile:	rm -f threads/loader.o threads/kernel.lds.s threads/loader.d
userprog/build/Makefile:	rm -f kernel.o kernel.lds.s
userprog/build/Makefile:	rm -f kernel.bin loader.bin os.dsk
userprog/build/Makefile:	rm -f bochsout.txt bochsrc.txt
userprog/build/Makefile:	rm -f results grade
userprog/build/Makefile:-include $(DEPENDS)
Binary file userprog/build/tests/userprog/exec-missing matches
Binary file userprog/build/tests/userprog/multi-recurse matches
userprog/build/tests/userprog/read-bad-fd.d:tests/userprog/read-bad-fd.o: ../../tests/userprog/read-bad-fd.c \
Binary file userprog/build/tests/userprog/open-boundary.o matches
userprog/build/tests/userprog/wait-killed.d:tests/userprog/wait-killed.o: ../../tests/userprog/wait-killed.c \
Binary file userprog/build/tests/userprog/close-twice.o matches
userprog/build/tests/userprog/fork-close.d:tests/userprog/fork-close.o: ../../tests/userprog/fork-close.c \
userprog/build/tests/userprog/read-zero.d:tests/userprog/read-zero.o: ../../tests/userprog/read-zero.c \
Binary file userprog/build/tests/userprog/exec-boundary matches
Binary file userprog/build/tests/userprog/bad-read2 matches
Binary file userprog/build/tests/userprog/fork-multiple.o matches
Binary file userprog/build/tests/userprog/child-args matches
userprog/build/tests/userprog/create-long.d:tests/userprog/create-long.o: ../../tests/userprog/create-long.c \
userprog/build/tests/userprog/bad-read2.d:tests/userprog/bad-read2.o: ../../tests/userprog/bad-read2.c \
Binary file userprog/build/tests/userprog/write-bad-fd matches
Binary file userprog/build/tests/userprog/fork-multiple matches
Binary file userprog/build/tests/userprog/bad-read matches
Binary file userprog/build/tests/userprog/bad-write matches
Binary file userprog/build/tests/userprog/child-close.o matches
userprog/build/tests/userprog/create-exists.d:tests/userprog/create-exists.o: ../../tests/userprog/create-exists.c \
Binary file userprog/build/tests/userprog/create-long matches
Binary file userprog/build/tests/userprog/open-null matches
userprog/build/tests/userprog/write-stdin.d:tests/userprog/write-stdin.o: ../../tests/userprog/write-stdin.c \
userprog/build/tests/userprog/child-bad.d:tests/userprog/child-bad.o: ../../tests/userprog/child-bad.c \
userprog/build/tests/userprog/rox-multichild.d:tests/userprog/rox-multichild.o: ../../tests/userprog/rox-multichild.c \
userprog/build/tests/userprog/rox-multichild.d: ../../tests/userprog/rox-child.inc ../../include/lib/user/syscall.h \
Binary file userprog/build/tests/userprog/create-exists.o matches
userprog/build/tests/userprog/open-missing.d:tests/userprog/open-missing.o: ../../tests/userprog/open-missing.c \
Binary file userprog/build/tests/userprog/create-bad-ptr.o matches
userprog/build/tests/userprog/bad-write.d:tests/userprog/bad-write.o: ../../tests/userprog/bad-write.c \
Binary file userprog/build/tests/userprog/open-bad-ptr matches
userprog/build/tests/userprog/read-bad-ptr.d:tests/userprog/read-bad-ptr.o: ../../tests/userprog/read-bad-ptr.c \
Binary file userprog/build/tests/userprog/create-bound.o matches
userprog/build/tests/userprog/child-rox.d:tests/userprog/child-rox.o: ../../tests/userprog/child-rox.c \
Binary file userprog/build/tests/userprog/halt.o matches
userprog/build/tests/userprog/fork-once.d:tests/userprog/fork-once.o: ../../tests/userprog/fork-once.c \
Binary file userprog/build/tests/userprog/child-bad.o matches
userprog/build/tests/userprog/fork-multiple.d:tests/userprog/fork-multiple.o: ../../tests/userprog/fork-multiple.c \
Binary file userprog/build/tests/userprog/exec-once matches
Binary file userprog/build/tests/userprog/exec-read.o matches
userprog/build/tests/userprog/write-boundary.d:tests/userprog/write-boundary.o: ../../tests/userprog/write-boundary.c \
Binary file userprog/build/tests/userprog/fork-once.o matches
Binary file userprog/build/tests/userprog/bad-jump2 matches
userprog/build/tests/userprog/create-bound.d:tests/userprog/create-bound.o: ../../tests/userprog/create-bound.c \
userprog/build/tests/userprog/exec-missing.d:tests/userprog/exec-missing.o: ../../tests/userprog/exec-missing.c \
userprog/build/tests/userprog/fork-boundary.d:tests/userprog/fork-boundary.o: ../../tests/userprog/fork-boundary.c \
Binary file userprog/build/tests/userprog/open-normal matches
Binary file userprog/build/tests/userprog/open-bad-ptr.o matches
Binary file userprog/build/tests/userprog/read-boundary.o matches
Binary file userprog/build/tests/userprog/bad-jump.o matches
Binary file userprog/build/tests/userprog/no-vm/multi-oom matches
userprog/build/tests/userprog/no-vm/multi-oom.d:tests/userprog/no-vm/multi-oom.o: ../../tests/userprog/no-vm/multi-oom.c \
Binary file userprog/build/tests/userprog/no-vm/multi-oom.o matches
userprog/build/tests/userprog/wait-bad-pid.d:tests/userprog/wait-bad-pid.o: ../../tests/userprog/wait-bad-pid.c \
userprog/build/tests/userprog/fork-read.d:tests/userprog/fork-read.o: ../../tests/userprog/fork-read.c \
userprog/build/tests/userprog/open-boundary.d:tests/userprog/open-boundary.o: ../../tests/userprog/open-boundary.c \
userprog/build/tests/userprog/write-bad-ptr.d:tests/userprog/write-bad-ptr.o: ../../tests/userprog/write-bad-ptr.c \
Binary file userprog/build/tests/userprog/child-read matches
Binary file userprog/build/tests/userprog/bad-jump2.o matches
Binary file userprog/build/tests/userprog/write-normal matches
Binary file userprog/build/tests/userprog/read-bad-fd matches
Binary file userprog/build/tests/userprog/exit.o matches
Binary file userprog/build/tests/userprog/args-none matches
Binary file userprog/build/tests/userprog/create-normal.o matches
Binary file userprog/build/tests/userprog/exec-read matches
Binary file userprog/build/tests/userprog/open-boundary matches
Binary file userprog/build/tests/userprog/create-null.o matches
Binary file userprog/build/tests/userprog/write-bad-ptr.o matches
Binary file userprog/build/tests/userprog/exec-boundary.o matches
Binary file userprog/build/tests/userprog/exec-arg matches
userprog/build/tests/userprog/child-close.d:tests/userprog/child-close.o: ../../tests/userprog/child-close.c \
Binary file userprog/build/tests/userprog/fork-once matches
Binary file userprog/build/tests/userprog/child-simple.o matches
Binary file userprog/build/tests/userprog/multi-child-fd matches
Binary file userprog/build/tests/userprog/child-bad matches
Binary file userprog/build/tests/userprog/fork-read matches
Binary file userprog/build/tests/userprog/wait-simple matches
Binary file userprog/build/tests/userprog/wait-killed.o matches
userprog/build/tests/userprog/create-bad-ptr.d:tests/userprog/create-bad-ptr.o: ../../tests/userprog/create-bad-ptr.c \
Binary file userprog/build/tests/userprog/write-boundary matches
Binary file userprog/build/tests/userprog/multi-recurse.o matches
Binary file userprog/build/tests/userprog/fork-recursive.o matches
Binary file userprog/build/tests/userprog/create-bad-ptr matches
Binary file userprog/build/tests/userprog/halt matches
Binary file userprog/build/tests/userprog/child-read.o matches
Binary file userprog/build/tests/userprog/bad-read2.o matches
Binary file userprog/build/tests/userprog/read-zero.o matches
Binary file userprog/build/tests/userprog/close-bad-fd matches
userprog/build/tests/userprog/multi-child-fd.d:tests/userprog/multi-child-fd.o: ../../tests/userprog/multi-child-fd.c \
Binary file userprog/build/tests/userprog/read-bad-fd.o matches
Binary file userprog/build/tests/userprog/open-empty matches
Binary file userprog/build/tests/userprog/write-stdin.o matches
Binary file userprog/build/tests/userprog/exec-arg.o matches
Binary file userprog/build/tests/userprog/exec-bad-ptr matches
userprog/build/tests/userprog/bad-read.d:tests/userprog/bad-read.o: ../../tests/userprog/bad-read.c \
Binary file userprog/build/tests/userprog/open-null.o matches
Binary file userprog/build/tests/userprog/rox-simple.o matches
Binary file userprog/build/tests/userprog/wait-killed matches
userprog/build/tests/userprog/write-normal.d:tests/userprog/write-normal.o: ../../tests/userprog/write-normal.c \
Binary file userprog/build/tests/userprog/open-empty.o matches
Binary file userprog/build/tests/userprog/child-rox matches
Binary file userprog/build/tests/userprog/open-missing.o matches
Binary file userprog/build/tests/userprog/boundary.o matches
userprog/build/tests/userprog/read-stdout.d:tests/userprog/read-stdout.o: ../../tests/userprog/read-stdout.c \
userprog/build/tests/userprog/rox-simple.d:tests/userprog/rox-simple.o: ../../tests/userprog/rox-simple.c \
Binary file userprog/build/tests/userprog/open-missing matches
Binary file userprog/build/tests/userprog/rox-multichild matches
userprog/build/tests/userprog/write-zero.d:tests/userprog/write-zero.o: ../../tests/userprog/write-zero.c \
Binary file userprog/build/tests/userprog/read-stdout matches
Binary file userprog/build/tests/userprog/bad-read.o matches
Binary file userprog/build/tests/userprog/open-twice.o matches
Binary file userprog/build/tests/userprog/child-simple matches
userprog/build/tests/userprog/create-null.d:tests/userprog/create-null.o: ../../tests/userprog/create-null.c \
Binary file userprog/build/tests/userprog/child-rox.o matches
Binary file userprog/build/tests/userprog/wait-twice.o matches
userprog/build/tests/userprog/open-null.d:tests/userprog/open-null.o: ../../tests/userprog/open-null.c \
userprog/build/tests/userprog/bad-jump.d:tests/userprog/bad-jump.o: ../../tests/userprog/bad-jump.c \
userprog/build/tests/userprog/child-simple.d:tests/userprog/child-simple.o: ../../tests/userprog/child-simple.c \
userprog/build/tests/userprog/write-bad-fd.d:tests/userprog/write-bad-fd.o: ../../tests/userprog/write-bad-fd.c \
Binary file userprog/build/tests/userprog/write-normal.o matches
Binary file userprog/build/tests/userprog/args-many matches
Binary file userprog/build/tests/userprog/read-normal.o matches
Binary file userprog/build/tests/userprog/exec-once.o matches
Binary file userprog/build/tests/userprog/exit matches
userprog/build/tests/userprog/close-twice.d:tests/userprog/close-twice.o: ../../tests/userprog/close-twice.c \
Binary file userprog/build/tests/userprog/child-close matches
userprog/build/tests/userprog/multi-recurse.d:tests/userprog/multi-recurse.o: ../../tests/userprog/multi-recurse.c \
userprog/build/tests/userprog/rox-child.d:tests/userprog/rox-child.o: ../../tests/userprog/rox-child.c \
userprog/build/tests/userprog/rox-child.d: ../../tests/userprog/rox-child.inc ../../include/lib/user/syscall.h \
Binary file userprog/build/tests/userprog/fork-close matches
Binary file userprog/build/tests/userprog/read-normal matches
userprog/build/tests/userprog/wait-simple.d:tests/userprog/wait-simple.o: ../../tests/userprog/wait-simple.c \
Binary file userprog/build/tests/userprog/bad-write.o matches
Binary file userprog/build/tests/userprog/create-empty.o matches
Binary file userprog/build/tests/userprog/create-null matches
Binary file userprog/build/tests/userprog/bad-write2.o matches
userprog/build/tests/userprog/exec-once.d:tests/userprog/exec-once.o: ../../tests/userprog/exec-once.c \
userprog/build/tests/userprog/bad-write2.d:tests/userprog/bad-write2.o: ../../tests/userprog/bad-write2.c \
Binary file userprog/build/tests/userprog/create-long.o matches
userprog/build/tests/userprog/create-empty.d:tests/userprog/create-empty.o: ../../tests/userprog/create-empty.c \
userprog/build/tests/userprog/exec-read.d:tests/userprog/exec-read.o: ../../tests/userprog/exec-read.c \
userprog/build/tests/userprog/read-normal.d:tests/userprog/read-normal.o: ../../tests/userprog/read-normal.c \
Binary file userprog/build/tests/userprog/exec-missing.o matches
Binary file userprog/build/tests/userprog/write-stdin matches
Binary file userprog/build/tests/userprog/rox-simple matches
Binary file userprog/build/tests/userprog/read-zero matches
Binary file userprog/build/tests/userprog/rox-child matches
Binary file userprog/build/tests/userprog/args.o matches
Binary file userprog/build/tests/userprog/bad-jump matches
userprog/build/tests/userprog/exec-boundary.d:tests/userprog/exec-boundary.o: ../../tests/userprog/exec-boundary.c \
userprog/build/tests/userprog/wait-twice.d:tests/userprog/wait-twice.o: ../../tests/userprog/wait-twice.c \
Binary file userprog/build/tests/userprog/read-stdout.o matches
Binary file userprog/build/tests/userprog/rox-child.o matches
Binary file userprog/build/tests/userprog/wait-bad-pid.o matches
Binary file userprog/build/tests/userprog/close-normal.o matches
Binary file userprog/build/tests/userprog/close-bad-fd.o matches
Binary file userprog/build/tests/userprog/create-empty matches
Binary file userprog/build/tests/userprog/create-bound matches
Binary file userprog/build/tests/userprog/write-bad-fd.o matches
userprog/build/tests/userprog/exec-arg.d:tests/userprog/exec-arg.o: ../../tests/userprog/exec-arg.c \
userprog/build/tests/userprog/open-normal.d:tests/userprog/open-normal.o: ../../tests/userprog/open-normal.c \
userprog/build/tests/userprog/open-empty.d:tests/userprog/open-empty.o: ../../tests/userprog/open-empty.c \
userprog/build/tests/userprog/exec-bad-ptr.d:tests/userprog/exec-bad-ptr.o: ../../tests/userprog/exec-bad-ptr.c \
userprog/build/tests/userprog/fork-recursive.d:tests/userprog/fork-recursive.o: ../../tests/userprog/fork-recursive.c \
Binary file userprog/build/tests/userprog/fork-close.o matches
Binary file userprog/build/tests/userprog/args-single matches
userprog/build/tests/userprog/create-normal.d:tests/userprog/create-normal.o: ../../tests/userprog/create-normal.c \
Binary file userprog/build/tests/userprog/fork-boundary.o matches
Binary file userprog/build/tests/userprog/write-bad-ptr matches
Binary file userprog/build/tests/userprog/write-zero.o matches
Binary file userprog/build/tests/userprog/wait-bad-pid matches
Binary file userprog/build/tests/userprog/open-twice matches
userprog/build/tests/userprog/read-boundary.d:tests/userprog/read-boundary.o: ../../tests/userprog/read-boundary.c \
Binary file userprog/build/tests/userprog/multi-child-fd.o matches
Binary file userprog/build/tests/userprog/wait-simple.o matches
userprog/build/tests/userprog/close-bad-fd.d:tests/userprog/close-bad-fd.o: ../../tests/userprog/close-bad-fd.c \
Binary file userprog/build/tests/userprog/read-boundary matches
Binary file userprog/build/tests/userprog/close-twice matches
Binary file userprog/build/tests/userprog/args-dbl-space matches
Binary file userprog/build/tests/userprog/bad-write2 matches
Binary file userprog/build/tests/userprog/fork-recursive matches
Binary file userprog/build/tests/userprog/read-bad-ptr matches
userprog/build/tests/userprog/close-normal.d:tests/userprog/close-normal.o: ../../tests/userprog/close-normal.c \
Binary file userprog/build/tests/userprog/create-normal matches
Binary file userprog/build/tests/userprog/args-multiple matches
userprog/build/tests/userprog/bad-jump2.d:tests/userprog/bad-jump2.o: ../../tests/userprog/bad-jump2.c \
Binary file userprog/build/tests/userprog/exec-bad-ptr.o matches
Binary file userprog/build/tests/userprog/write-zero matches
Binary file userprog/build/tests/userprog/open-normal.o matches
Binary file userprog/build/tests/userprog/rox-multichild.o matches
Binary file userprog/build/tests/userprog/fork-read.o matches
Binary file userprog/build/tests/userprog/read-bad-ptr.o matches
userprog/build/tests/userprog/open-bad-ptr.d:tests/userprog/open-bad-ptr.o: ../../tests/userprog/open-bad-ptr.c \
Binary file userprog/build/tests/userprog/write-boundary.o matches
userprog/build/tests/userprog/open-twice.d:tests/userprog/open-twice.o: ../../tests/userprog/open-twice.c \
Binary file userprog/build/tests/userprog/create-exists matches
Binary file userprog/build/tests/userprog/fork-boundary matches
Binary file userprog/build/tests/userprog/close-normal matches
userprog/build/tests/userprog/child-read.d:tests/userprog/child-read.o: ../../tests/userprog/child-read.c \
Binary file userprog/build/tests/userprog/wait-twice matches
Binary file userprog/build/tests/main.o matches
userprog/build/tests/threads/priority-change.d:tests/threads/priority-change.o: ../../tests/threads/priority-change.c \
Binary file userprog/build/tests/threads/priority-donate-one.o matches
userprog/build/tests/threads/alarm-simultaneous.d:tests/threads/alarm-simultaneous.o: \
userprog/build/tests/threads/alarm-simultaneous.d: ../../tests/threads/alarm-simultaneous.c ../../include/lib/stdio.h \
Binary file userprog/build/tests/threads/priority-donate-lower.o matches
Binary file userprog/build/tests/threads/alarm-zero.o matches
userprog/build/tests/threads/priority-donate-multiple2.d:tests/threads/priority-donate-multiple2.o: \
userprog/build/tests/threads/priority-donate-multiple2.d: ../../tests/threads/priority-donate-multiple2.c \
userprog/build/tests/threads/priority-donate-one.d:tests/threads/priority-donate-one.o: \
userprog/build/tests/threads/priority-donate-one.d: ../../tests/threads/priority-donate-one.c ../../include/lib/stdio.h \
userprog/build/tests/threads/alarm-zero.d:tests/threads/alarm-zero.o: ../../tests/threads/alarm-zero.c \
userprog/build/tests/threads/priority-fifo.d:tests/threads/priority-fifo.o: ../../tests/threads/priority-fifo.c \
Binary file userprog/build/tests/threads/priority-donate-nest.o matches
userprog/build/tests/threads/priority-donate-nest.d:tests/threads/priority-donate-nest.o: \
userprog/build/tests/threads/priority-donate-nest.d: ../../tests/threads/priority-donate-nest.c ../../include/lib/stdio.h \
Binary file userprog/build/tests/threads/priority-donate-chain.o matches
userprog/build/tests/threads/priority-donate-lower.d:tests/threads/priority-donate-lower.o: \
userprog/build/tests/threads/priority-donate-lower.d: ../../tests/threads/priority-donate-lower.c ../../include/lib/stdio.h \
userprog/build/tests/threads/priority-donate-multiple.d:tests/threads/priority-donate-multiple.o: \
userprog/build/tests/threads/priority-donate-multiple.d: ../../tests/threads/priority-donate-multiple.c ../../include/lib/stdio.h \
Binary file userprog/build/tests/threads/priority-donate-multiple2.o matches
Binary file userprog/build/tests/threads/priority-fifo.o matches
Binary file userprog/build/tests/threads/priority-sema.o matches
Binary file userprog/build/tests/threads/priority-preempt.o matches
userprog/build/tests/threads/priority-donate-sema.d:tests/threads/priority-donate-sema.o: \
userprog/build/tests/threads/priority-donate-sema.d: ../../tests/threads/priority-donate-sema.c ../../include/lib/stdio.h \
userprog/build/tests/threads/priority-preempt.d:tests/threads/priority-preempt.o: ../../tests/threads/priority-preempt.c \
Binary file userprog/build/tests/threads/priority-change.o matches
userprog/build/tests/threads/alarm-priority.d:tests/threads/alarm-priority.o: ../../tests/threads/alarm-priority.c \
Binary file userprog/build/tests/threads/tests.o matches
userprog/build/tests/threads/alarm-wait.d:tests/threads/alarm-wait.o: ../../tests/threads/alarm-wait.c \
Binary file userprog/build/tests/threads/alarm-simultaneous.o matches
Binary file userprog/build/tests/threads/priority-donate-multiple.o matches
userprog/build/tests/threads/alarm-negative.d:tests/threads/alarm-negative.o: ../../tests/threads/alarm-negative.c \
userprog/build/tests/threads/priority-donate-chain.d:tests/threads/priority-donate-chain.o: \
userprog/build/tests/threads/priority-donate-chain.d: ../../tests/threads/priority-donate-chain.c ../../include/lib/stdio.h \
userprog/build/tests/threads/priority-sema.d:tests/threads/priority-sema.o: ../../tests/threads/priority-sema.c \
Binary file userprog/build/tests/threads/alarm-priority.o matches
Binary file userprog/build/tests/threads/alarm-wait.o matches
Binary file userprog/build/tests/threads/priority-donate-sema.o matches
Binary file userprog/build/tests/threads/alarm-negative.o matches
Binary file userprog/build/tests/filesys/base/lg-seq-random.o matches
userprog/build/tests/filesys/base/lg-seq-block.d:tests/filesys/base/lg-seq-block.o: \
userprog/build/tests/filesys/base/lg-seq-block.d: ../../tests/filesys/base/lg-seq-block.c \
userprog/build/tests/filesys/base/lg-seq-block.d: ../../tests/filesys/base/seq-block.inc ../../tests/filesys/seq-test.h \
Binary file userprog/build/tests/filesys/base/sm-seq-block.o matches
Binary file userprog/build/tests/filesys/base/sm-create.o matches
Binary file userprog/build/tests/filesys/base/lg-random.o matches
Binary file userprog/build/tests/filesys/base/syn-remove.o matches
Binary file userprog/build/tests/filesys/base/lg-create.o matches
Binary file userprog/build/tests/filesys/base/syn-remove matches
userprog/build/tests/filesys/base/child-syn-wrt.d:tests/filesys/base/child-syn-wrt.o: \
userprog/build/tests/filesys/base/child-syn-wrt.d: ../../tests/filesys/base/child-syn-wrt.c ../../include/lib/random.h \
userprog/build/tests/filesys/base/child-syn-wrt.d: ../../tests/filesys/base/syn-write.h
Binary file userprog/build/tests/filesys/base/lg-create matches
Binary file userprog/build/tests/filesys/base/sm-full matches
Binary file userprog/build/tests/filesys/base/syn-write.o matches
Binary file userprog/build/tests/filesys/base/lg-full matches
userprog/build/tests/filesys/base/child-syn-read.d:tests/filesys/base/child-syn-read.o: \
userprog/build/tests/filesys/base/child-syn-read.d: ../../tests/filesys/base/child-syn-read.c ../../include/lib/random.h \
userprog/build/tests/filesys/base/child-syn-read.d: ../../tests/filesys/base/syn-read.h
Binary file userprog/build/tests/filesys/base/child-syn-read matches
Binary file userprog/build/tests/filesys/base/sm-random.o matches
userprog/build/tests/filesys/base/sm-full.d:tests/filesys/base/sm-full.o: ../../tests/filesys/base/sm-full.c \
userprog/build/tests/filesys/base/sm-full.d: ../../tests/filesys/base/full.inc ../../tests/filesys/seq-test.h \
Binary file userprog/build/tests/filesys/base/sm-create matches
userprog/build/tests/filesys/base/lg-full.d:tests/filesys/base/lg-full.o: ../../tests/filesys/base/lg-full.c \
userprog/build/tests/filesys/base/lg-full.d: ../../tests/filesys/base/full.inc ../../tests/filesys/seq-test.h \
Binary file userprog/build/tests/filesys/base/sm-random matches
Binary file userprog/build/tests/filesys/base/sm-full.o matches
userprog/build/tests/filesys/base/syn-write.d:tests/filesys/base/syn-write.o: ../../tests/filesys/base/syn-write.c \
userprog/build/tests/filesys/base/syn-write.d: ../../tests/filesys/base/syn-write.h ../../tests/lib.h \
userprog/build/tests/filesys/base/sm-random.d:tests/filesys/base/sm-random.o: ../../tests/filesys/base/sm-random.c \
Binary file userprog/build/tests/filesys/base/syn-read matches
Binary file userprog/build/tests/filesys/base/syn-write matches
userprog/build/tests/filesys/base/syn-read.d:tests/filesys/base/syn-read.o: ../../tests/filesys/base/syn-read.c \
userprog/build/tests/filesys/base/syn-read.d: ../../tests/filesys/base/syn-read.h
userprog/build/tests/filesys/base/sm-seq-block.d:tests/filesys/base/sm-seq-block.o: \
userprog/build/tests/filesys/base/sm-seq-block.d: ../../tests/filesys/base/sm-seq-block.c \
userprog/build/tests/filesys/base/sm-seq-block.d: ../../tests/filesys/base/seq-block.inc ../../tests/filesys/seq-test.h \
userprog/build/tests/filesys/base/sm-create.d:tests/filesys/base/sm-create.o: ../../tests/filesys/base/sm-create.c \
Binary file userprog/build/tests/filesys/base/child-syn-wrt.o matches
Binary file userprog/build/tests/filesys/base/lg-full.o matches
Binary file userprog/build/tests/filesys/base/lg-seq-block.o matches
Binary file userprog/build/tests/filesys/base/lg-seq-random matches
Binary file userprog/build/tests/filesys/base/child-syn-wrt matches
Binary file userprog/build/tests/filesys/base/syn-read.o matches
userprog/build/tests/filesys/base/lg-create.d:tests/filesys/base/lg-create.o: ../../tests/filesys/base/lg-create.c \
userprog/build/tests/filesys/base/lg-seq-random.d:tests/filesys/base/lg-seq-random.o: \
userprog/build/tests/filesys/base/lg-seq-random.d: ../../tests/filesys/base/lg-seq-random.c \
userprog/build/tests/filesys/base/lg-seq-random.d: ../../tests/filesys/base/seq-random.inc ../../include/lib/random.h \
userprog/build/tests/filesys/base/lg-seq-random.d: ../../include/lib/stddef.h ../../tests/filesys/seq-test.h \
Binary file userprog/build/tests/filesys/base/sm-seq-block matches
Binary file userprog/build/tests/filesys/base/lg-random matches
Binary file userprog/build/tests/filesys/base/sm-seq-random.o matches
Binary file userprog/build/tests/filesys/base/sm-seq-random matches
userprog/build/tests/filesys/base/syn-remove.d:tests/filesys/base/syn-remove.o: ../../tests/filesys/base/syn-remove.c \
Binary file userprog/build/tests/filesys/base/child-syn-read.o matches
Binary file userprog/build/tests/filesys/base/lg-seq-block matches
userprog/build/tests/filesys/base/sm-seq-random.d:tests/filesys/base/sm-seq-random.o: \
userprog/build/tests/filesys/base/sm-seq-random.d: ../../tests/filesys/base/sm-seq-random.c \
userprog/build/tests/filesys/base/sm-seq-random.d: ../../tests/filesys/base/seq-random.inc ../../include/lib/random.h \
userprog/build/tests/filesys/base/sm-seq-random.d: ../../include/lib/stddef.h ../../tests/filesys/seq-test.h \
userprog/build/tests/filesys/base/lg-random.d:tests/filesys/base/lg-random.o: ../../tests/filesys/base/lg-random.c \
userprog/build/tests/filesys/seq-test.d:tests/filesys/seq-test.o: ../../tests/filesys/seq-test.c \
userprog/build/tests/filesys/seq-test.d: ../../tests/filesys/seq-test.h ../../include/lib/stddef.h \
Binary file userprog/build/tests/filesys/seq-test.o matches
Binary file userprog/build/tests/lib.o matches
Binary file userprog/build/lib/stdlib.o matches
Binary file userprog/build/lib/random.o matches
Binary file userprog/build/lib/user/entry.o matches
Binary file userprog/build/lib/user/console.o matches
userprog/build/lib/user/syscall.d: ../../include/lib/kernel/../syscall-nr.h
Binary file userprog/build/lib/user/syscall.o matches
Binary file userprog/build/lib/user/debug.o matches
userprog/build/lib/user/console.d: ../../include/lib/syscall-nr.h
Binary file userprog/build/lib/string.o matches
Binary file userprog/build/lib/stdio.o matches
Binary file userprog/build/lib/debug.o matches
Binary file userprog/build/lib/kernel/hash.o matches
Binary file userprog/build/lib/kernel/console.o matches
Binary file userprog/build/lib/kernel/list.o matches
Binary file userprog/build/lib/kernel/debug.o matches
Binary file userprog/build/lib/kernel/bitmap.o matches
Binary file userprog/build/lib/arithmetic.o matches
Binary file userprog/build/kernel.o matches
Binary file userprog/build/libc.a matches
userprog/build/threads/kernel.lds.s:OUTPUT_FORMAT("elf64-x86-64")
userprog/build/threads/kernel.lds.s:OUTPUT_ARCH(i386:x86-64)
userprog/build/threads/kernel.lds.s:  *(.eh_frame .note.GNU-stack .stab)
userprog/build/threads/intr-stubs.d:threads/intr-stubs.o: ../../threads/intr-stubs.S \
Binary file userprog/build/threads/start.o matches
Binary file userprog/build/threads/synch.o matches
Binary file userprog/build/threads/interrupt.o matches
Binary file userprog/build/threads/malloc.o matches
Binary file userprog/build/threads/init.o matches
Binary file userprog/build/threads/thread.o matches
userprog/build/threads/interrupt.d: ../../include/threads/intr-stubs.h ../../include/threads/io.h \
Binary file userprog/build/threads/intr-stubs.o matches
Binary file userprog/build/threads/palloc.o matches
userprog/build/threads/thread.d: ../../include/threads/flags.h ../../include/threads/intr-stubs.h \
Binary file userprog/build/threads/loader.o matches
Binary file userprog/build/threads/mmu.o matches
Binary file userprog/build/devices/disk.o matches
Binary file userprog/build/devices/vga.o matches
Binary file userprog/build/devices/timer.o matches
Binary file userprog/build/devices/kbd.o matches
Binary file userprog/build/devices/input.o matches
Binary file userprog/build/devices/intq.o matches
Binary file userprog/build/devices/serial.o matches
Binary file userprog/build/filesys/free-map.o matches
userprog/build/filesys/inode.d: ../../include/filesys/filesys.h ../../include/filesys/free-map.h \
Binary file userprog/build/filesys/fat.o matches
Binary file userprog/build/filesys/filesys.o matches
Binary file userprog/build/filesys/directory.o matches
userprog/build/filesys/free-map.d:filesys/free-map.o: ../../filesys/free-map.c \
userprog/build/filesys/free-map.d: ../../include/filesys/free-map.h ../../include/lib/stdbool.h \
Binary file userprog/build/filesys/fsutil.o matches
Binary file userprog/build/filesys/file.o matches
userprog/build/filesys/filesys.d: ../../include/filesys/free-map.h ../../include/filesys/inode.h
Binary file userprog/build/filesys/page_cache.o matches
Binary file userprog/build/filesys/inode.o matches
Binary file userprog/build/os.dsk matches
userprog/syscall.c:#include <syscall-nr.h>
userprog/syscall.c: * (e.g. int 0x80 in linux). However, in x86-64, the manufacturer supplies
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:syscall_init       ------------------");
userprog/syscall.c:    write_msr(MSR_STAR, ((uint64_t)SEL_UCSEG - 0x10) << 48 |
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:syscall_handler    ------------------");
userprog/syscall.c:    int syscall_num = (f->R.rax);
userprog/syscall.c:    // printf("------syscall_num: %d ------\n", syscall_num);
userprog/syscall.c:    uint64_t argument[3] = {f->R.rdi, f->R.rsi, f->R.rdx};
userprog/syscall.c:    struct intr_frame *cur_if = &thread_current()->tf;
userprog/syscall.c:            // puts("------------------ userprog/syscall.c:hand-exit               ------------------");
userprog/syscall.c:            f->R.rax = fork((char *)argument[0], f);
userprog/syscall.c:            f->R.rax = exec((char *)argument[0]);
userprog/syscall.c:            // puts("------------------ userprog/syscall.c:hand-wait               ------------------");
userprog/syscall.c:            f->R.rax = wait((int)argument[0]);
userprog/syscall.c:            f->R.rax = create((char *)argument[0], (unsigned)argument[1]);
userprog/syscall.c:            f->R.rax = remove((char *)argument[0]);
userprog/syscall.c:            f->R.rax = open((char *)argument[0]);
userprog/syscall.c:            f->R.rax = filesize((int)argument[0]);
userprog/syscall.c:            // puts("------------------ userprog/syscall.c:handler:read    ------------------");
userprog/syscall.c:            f->R.rax = read((int)argument[0], (void *)argument[1], (unsigned)argument[2]);
userprog/syscall.c:            f->R.rax = write((int)argument[0], (const void *)argument[1], (unsigned int)argument[2]);
userprog/syscall.c:            f->R.rax = tell((int)argument[0]);
userprog/syscall.c:            // puts("------------------ userprog/syscall.c:hand-close             ------------------");
userprog/syscall.c:        exit(-1);
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:exit               ------------------");
userprog/syscall.c:    t->child_exit_status = status;
userprog/syscall.c:    printf("%s: exit(%d)\n", t->name, status);
userprog/syscall.c:        exit(-1);
userprog/syscall.c:        sema_down(&thread_current()->fork_semaphore);
userprog/syscall.c:        if (child_t->child_fork_status == -1) {
userprog/syscall.c:            return -1;
userprog/syscall.c:        return -1;
userprog/syscall.c:    // sema_down(&thread_current()->fork_semaphore);
userprog/syscall.c:    // if (thread_current()->tid == child_tid) {
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:exec               ------------------");
userprog/syscall.c:    if (thread_current()->parent != NULL) {
userprog/syscall.c:    // printf("wait current pid:%d\n", thread_current()->tid);
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:wait               ------------------");
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:open               ------------------");
userprog/syscall.c:        return -1;
userprog/syscall.c:    if (thread_current()->max_fd >= 512) {
userprog/syscall.c:        return -1;
userprog/syscall.c:    if (strcmp(thread_current()->name, file) == 0) {
userprog/syscall.c:        return -1;
userprog/syscall.c:    struct file *target_file = curr->fd_table[fd];
userprog/syscall.c:        return -1;
userprog/syscall.c:    // puts("------------------ userprog/syscall.c:read            ------------------");
userprog/syscall.c:            left_n -= input_getc();
userprog/syscall.c:        struct file *target_file = curr->fd_table[fd];
userprog/syscall.c:            result = -1;
userprog/syscall.c:        if (target_file->deny_write) {
userprog/syscall.c:        if (target_file->deny_write) {
userprog/tss.c:/* The Task-State Segment (TSS).
userprog/tss.c: *  Instances of the TSS, an x86-64 specific structure, are used to
userprog/tss.c: *  portability, speed, and flexibility, most x86-64 OSes almost
userprog/tss.c: *  (which applies to all interrupts we handle), an x86-64 processor
userprog/tss.c: *    - If the code interrupted by the interrupt is in the same
userprog/tss.c: *    - If the interrupted code is in a different ring from the
userprog/tss.c:	tss->rsp0 = (uint64_t) next + PGSIZE;
userprog/process.c:    supplemental_page_table_init(&thread_current()->spt);
userprog/process.c:    // printf("%s\n", child_thread->tid);
userprog/process.c:    // sema_down(&thread_current()->fork_semaphore);
userprog/process.c:    parent_page = pml4_get_page(parent->pml4, va);
userprog/process.c:    if (!pml4_set_page(current->pml4, va, newpage, writable)) {
userprog/process.c: * Hint) parent->tf does not hold the userland context of the process.
userprog/process.c:    struct thread *parent = thread_current()->parent;
userprog/process.c:    current->pml4 = pml4_create();
userprog/process.c:    if (current->pml4 == NULL)
userprog/process.c:    supplemental_page_table_init(&current->spt);
userprog/process.c:    if (!supplemental_page_table_copy(&current->spt, &parent->spt))
userprog/process.c:    if (!pml4_for_each(parent->pml4, duplicate_pte, parent))
userprog/process.c:    for (int i = 2; i < parent->max_fd; i++) {
userprog/process.c:        if (parent->fd_table[i] != NULL) {
userprog/process.c:            thread_current()->fd_table[i] = file_duplicate(parent->fd_table[i]);
userprog/process.c:    thread_current()->max_fd = parent->max_fd;
userprog/process.c:    // thread_current()->current_file = parent ->current_file;
userprog/process.c:    sema_up(&parent->fork_semaphore);
userprog/process.c:    thread_current()->child_fork_status = -1;
userprog/process.c:    sema_up(&parent->fork_semaphore);
userprog/process.c: * Returns -1 on fail. */
userprog/process.c:        exit(-1);
userprog/process.c:    supplemental_page_table_init (&thread_current()->spt);
userprog/process.c:    // printf("----- f_name:   %p      -----\n", &f_name);
userprog/process.c:    // printf("----- f_name:   %s -----\n", f_name);
userprog/process.c:    // printf("----- count:    %p      -----\n", &count);
userprog/process.c:    // printf("----- count:    %d                    -----\n", count);
userprog/process.c:    // printf("----- _if:      %p      -----\n", &_if);
userprog/process.c:    // printf("------random: %d --------\n", 0x47480001);
userprog/process.c:    ----- f_name:   0x8004240c78 -----
userprog/process.c:    ----- count:    0x8004240d4c -----
userprog/process.c:    ----- _if:      0x8004240c8c -----
userprog/process.c:    // printf("----- f_name:   %p      -----\n", &f_name);
userprog/process.c:    // printf("----- f_name:   %s -----\n", f_name);
userprog/process.c:    // printf("----- count:    %p      -----\n", &count);
userprog/process.c:    // printf("----- count:    %d                    -----\n", count);
userprog/process.c:    // printf("----- _if:      %p      -----\n", &_if);
userprog/process.c:    // printf("------random: %d --------\n", 0x47480001);
userprog/process.c:    // printf("------before load      :     %p -------\n", &_if.rsp);
userprog/process.c:    // printf("------before load      :     %p -------\n", _if.rsp);
userprog/process.c:    // printf("----- f_name:   %p      -----\n", &f_name);
userprog/process.c:    // printf("----- f_name:   %s -----\n", f_name);
userprog/process.c:    // printf("----- count:    %p      -----\n", &count);
userprog/process.c:    // printf("----- count:    %d                    -----\n", count);
userprog/process.c:    // printf("----- _if:      %p      -----\n", &_if);
userprog/process.c:    // printf("------random: %d --------\n", 0x47480000);
userprog/process.c:    // printf("------before arg-stack:     %p -------\n", &_if.rsp);
userprog/process.c:    // printf("------before arg-stack:     %p -------\n", _if.rsp);
userprog/process.c:    // printf("------after  arg-stack:     %p -------\n", &_if.rsp);
userprog/process.c:    // printf("------after  arg-stack:     %p -------\n", _if.rsp);
userprog/process.c:        return -1;
userprog/process.c: * exception), returns -1.  If TID is invalid or if it was not a
userprog/process.c: * been successfully called for the given TID, returns -1
userprog/process.c: * This function will be implemented in problem 2-2.  For now, it
userprog/process.c:        return -1;
userprog/process.c:    sema_down(&child_thread->exit_semaphore);
userprog/process.c:    int exit_status = child_thread->child_exit_status;
userprog/process.c:    // printf("------- parent name    : '%s'       --\n", curr->parent->name);
userprog/process.c:    // printf("------- parent maxfd   : '%d'       --\n", curr->parent->max_fd);
userprog/process.c:    for (int i = 2; i < curr->max_fd; i++) {
userprog/process.c:    palloc_free_page(curr->fd_table);
userprog/process.c:    if (curr->current_file != NULL) {
userprog/process.c:        file_close(curr->current_file);
userprog/process.c:    supplemental_page_table_kill(&curr->spt);
userprog/process.c:	 * to the kernel-only page directory. */
userprog/process.c:    pml4 = curr->pml4;
userprog/process.c:    // printf("---------1: cur pl4: %p\n", &curr->pml4);
userprog/process.c:    // printf("---------1: pl4:     %p\n", &pml4);
userprog/process.c:    // printf("---------1 int : cur pl4: %d\n", curr->pml4);
userprog/process.c:    // printf("---------1 int : pl4:     %d\n", pml4);
userprog/process.c:		 * cur->pagedir to NULL before switching page directories,
userprog/process.c:        curr->pml4 = NULL;
userprog/process.c:        // printf("--------2: cur pl4: %p\n", &curr->pml4);
userprog/process.c:        // printf("--------2: pl4:     %p\n", &pml4);
userprog/process.c:        // printf("--------2 int : cur pl4: %d\n", curr->pml4);
userprog/process.c:        // printf("--------2 int : pl4:     %d\n", pml4);
userprog/process.c:        // printf("--------after destory      pl4:     %p\n", &pml4);
userprog/process.c:        // printf("--------after destory int  pl4:     %d\n", pml4);
userprog/process.c:    pml4_activate(next->pml4);
userprog/process.c: * from the ELF specification, [ELF1], more-or-less verbatim.  */
userprog/process.c:/* ELF types.  See [ELF1] 1-2. */
userprog/process.c:/* Executable header.  See [ELF1] 1-4 to 1-8.
userprog/process.c:    t->pml4 = pml4_create();
userprog/process.c:    if (t->pml4 == NULL)
userprog/process.c:    thread_current()->current_file = file;
userprog/process.c:                        zero_bytes = (ROUND_UP(page_offset + phdr.p_memsz, PGSIZE) - read_bytes);
userprog/process.c:    if_->rip = ehdr.e_entry;
userprog/process.c:    // thread_current()->current_file = NULL;
userprog/process.c:    if ((phdr->p_offset & PGMASK) != (phdr->p_vaddr & PGMASK))
userprog/process.c:    if (phdr->p_offset > (uint64_t)file_length(file))
userprog/process.c:    if (phdr->p_memsz < phdr->p_filesz)
userprog/process.c:    if (phdr->p_memsz == 0)
userprog/process.c:    if (!is_user_vaddr((void *)phdr->p_vaddr))
userprog/process.c:    if (!is_user_vaddr((void *)(phdr->p_vaddr + phdr->p_memsz)))
userprog/process.c:    if (phdr->p_vaddr + phdr->p_memsz < phdr->p_vaddr)
userprog/process.c:    if (phdr->p_vaddr < PGSIZE)
userprog/process.c: * otherwise, it is read-only.
userprog/process.c:    return (pml4_get_page(t->pml4, upage) == NULL && pml4_set_page(t->pml4, upage, kpage, writable));
userprog/process.c: * - READ_BYTES bytes at UPAGE must be read from FILE
userprog/process.c: * - ZERO_BYTES bytes at UPAGE + READ_BYTES must be zeroed.
userprog/process.c: * user process if WRITABLE is true, read-only otherwise.
userprog/process.c:        size_t page_zero_bytes = PGSIZE - page_read_bytes;
userprog/process.c:        read_bytes -= page_read_bytes;
userprog/process.c:        zero_bytes -= page_zero_bytes;
userprog/process.c:        success = install_page(((uint8_t *)USER_STACK) - PGSIZE, kpage, true);
userprog/process.c:            if_->rsp = USER_STACK;
userprog/process.c:    struct file *file = file_info->file;
userprog/process.c:    size_t page_read_bytes = file_info->page_read_bytes;
userprog/process.c:    size_t page_zero_bytes = file_info->page_zero_bytes;
userprog/process.c:    bool writable = file_info->writable;
userprog/process.c:    off_t ofs = file_info->ofs;
userprog/process.c:    if (file_read(file, frame->kva, page_read_bytes) != (int)page_read_bytes) {
userprog/process.c:        // palloc_free_page(page->va);
userprog/process.c:    memset(frame->kva + page_read_bytes, 0, page_zero_bytes);
userprog/process.c: * - READ_BYTES bytes at UPAGE must be read from FILE
userprog/process.c: * - ZERO_BYTES bytes at UPAGE + READ_BYTES must be zeroed.
userprog/process.c: * user process if WRITABLE is true, read-only otherwise.
userprog/process.c:        size_t page_zero_bytes = PGSIZE - page_read_bytes;
userprog/process.c:        file_info->file = file;
userprog/process.c:        file_info->ofs = ofs;
userprog/process.c:        file_info->page_read_bytes = page_read_bytes;
userprog/process.c:        file_info->zero_bytes = page_zero_bytes;
userprog/process.c:        file_info->writable = writable;
userprog/process.c:        read_bytes -= page_read_bytes;
userprog/process.c:        zero_bytes -= page_zero_bytes;
userprog/process.c:    void *stack_bottom = (void *)(((uint8_t *)USER_STACK) - PGSIZE);
userprog/process.c:    page->va = stack_bottom;
userprog/process.c:    page->writable = true;
userprog/process.c:	frame->page = NULL; 
userprog/process.c:    frame->kva = palloc_get_page(PAL_USER); 
userprog/process.c:	ASSERT (frame->page == NULL);
userprog/process.c:    //! - -- - -- -- - -- - -- - - -- - -- -- - -- - -- - - -- - -- -- - -- - -- - - -- - -
userprog/process.c:    page->frame = frame;
userprog/process.c:    frame->page = page;
userprog/process.c:    install_page(page->va, frame->kva, page->writable);
userprog/process.c:    spt_insert_page(&thread_current()->spt, page);
userprog/process.c:    if_->rsp = USER_STACK;
userprog/process.c:        success = install_page(((uint8_t *)USER_STACK) - PGSIZE, kpage, true);
userprog/process.c:            if_->rsp = USER_STACK;
userprog/process.c:    for (i = count - 1; i > -1; i--) {
userprog/process.c:        for (j = strlen(parse[i]); j > -1; j--) {
userprog/process.c:            *rsp = *rsp - 1;
userprog/process.c:    int pad = 8 - len % 8;
userprog/process.c:        *rsp -= pad;
userprog/process.c:    *rsp = *rsp - 8;
userprog/process.c:    for (i = count - 1; i > -1; i--) {
userprog/process.c:        *rsp = *rsp - 8;
userprog/process.c:    *rsp = *rsp - 8;
userprog/process.c:    R->rdi = count;
userprog/process.c:    R->rsi = argv_start;
userprog/process.c:    *rsp = *rsp - 8;
userprog/process.c:    struct list_elem *e = list_begin(&curr->child_list);
userprog/process.c:    while (e != list_end(&curr->child_list)) {
userprog/process.c:        if (t->tid == pid) {
userprog/process.c:    list_remove(&cp->allelem);
userprog/process.c:    // list_remove(&cp->elem); // destruction?? ????????
userprog/process.c:    list_remove(&cp->childelem);
userprog/process.c:    curr->fd_table[curr->max_fd] = f;
userprog/process.c:    curr->max_fd += 1;
userprog/process.c:    return curr->max_fd - 1;
userprog/process.c:    struct file *target_file = curr->fd_table[fd];
userprog/process.c:    file_close(curr->fd_table[fd]);
userprog/process.c:    curr->fd_table[fd] = NULL;
Binary file userprog/process.c matches
userprog/targets.mk:userprog_SRC += userprog/syscall-entry.S # System call entry.
userprog/Make.vars:# -*- makefile -*-
userprog/Make.vars:os.dsk: DEFINES = -DUSERPROG -DFILESYS
userprog/Make.vars:TEST_SUBDIRS = tests/userprog tests/filesys/base tests/userprog/no-vm tests/threads
userprog/Make.vars:GRADING_FILE = $(SRCDIR)/tests/userprog/Grading.no-extra
userprog/Make.vars:# TDEFINE := -DEXTRA2
Makefile:	@echo "This top-level make has only 'clean' targets."
Makefile:	for d in $(CLEAN_SUBDIRS); do $(MAKE) -C $$d $@; done
Makefile:	rm -f TAGS tags
Makefile:	rm -f *.tar.gz
Makefile:	find . -name '*~' -exec rm '{}' \;
Makefile:TAGS_SOURCES = find $(TAGS_SUBDIRS) -name \*.[chS] -print
Makefile:	cscope -b -q -k
Makefile:ifeq ($(shell echo ${TEAM} | egrep "^[1-9]{1}[0-9]{0,2}$$"),)
Makefile:	@tar -zcf /tmp/${TAR_PATH} . && \
tests/tests.pm:if ($test =~ /^(.*)-persistence$/) {
tests/tests.pm:	my ($addrs) = $stack_line[0] =~ /Call stack:((?: 0x[0-9a-f]+)+)/;
tests/tests.pm:    if ($panic =~ /sec_no \< d-\>capacity/) {
tests/tests.pm:    # Most output lines are prefixed by (test-name).  Eliminate this
tests/tests.pm:    my ($reboots) = grep (/Pintos booting/, @output) - 1;
tests/tests.pm:	$end = $i - 1, last if $output[$i] =~ /^Execution of '.*' complete.$/;
tests/tests.pm:	@output = grep (!/^[a-zA-Z0-9-_]+: exit\(\-?\d+\)$/, @output);
tests/tests.pm:	my (@expected) = split ("\n", $expected->{$key});
tests/tests.pm:	my ($d) = Algorithm::Diff->new (\@expected, \@output);
tests/tests.pm:	while ($d->Next ()) {
tests/tests.pm:	    my ($ef, $el, $af, $al) = $d->Get (qw (min1 max1 min2 max2));
tests/tests.pm:	    if ($d->Same ()) {
tests/tests.pm:		push (@diff, map ("  $_\n", $d->Items (1)));
tests/tests.pm:		push (@diff, map ("- $_\n", $d->Items (1))) if $d->Items (1);
tests/tests.pm:		push (@diff, map ("+ $_\n", $d->Items (2))) if $d->Items (2);
tests/tests.pm:	$msg .= "Differences in `diff -u' format:\n";
tests/tests.pm:#	- $FILE: Name of a host file containing the expected contents.
tests/tests.pm:#	- [$FILE, $OFFSET, $LENGTH]: An excerpt of host file $FILE
tests/tests.pm:#	- [$CONTENTS]: The literal expected file contents, as a string.
tests/tests.pm:#       - {SUBDIR}: A subdirectory, in the same form described here,
tests/tests.pm:    @output = grep (!/^[a-zA-Z0-9-_]+: exit\(\d+\)$/, @output);
tests/tests.pm:    $test_base_name =~ s%-persistence$%%;
tests/tests.pm:    $expected_hier->{$test_base_name} = $prereq_tests[0];
tests/tests.pm:    $expected_hier->{'tar'} = 'tests/filesys/extended/tar';
tests/tests.pm:	$length = length ($value->[0]);
tests/tests.pm:	syswrite ($file, $value->[0]) == $length
tests/tests.pm:	$length = $value->[2];
tests/tests.pm:	open ($file, '<', $value->[0]) or die "$value->[0]: open: $!\n";
tests/tests.pm:	die "$value->[0]: file is smaller than expected\n"
tests/tests.pm:	  if -s $file < $value->[1] + $length;
tests/tests.pm:	sysseek ($file, $value->[1], SEEK_SET);
tests/tests.pm:	$a_size -= $a_len;
tests/tests.pm:	$b_size -= $b_len;
tests/tests.pm:	$end = $start + $size if $end - $start > $size;
tests/tests.pm:	my ($n) = $end - $start;
tests/tests.pm:	for my $i ($start...$end - 1) {
tests/tests.pm:	    printf "%02x", ord (substr ($data, $i - $start, 1));
tests/tests.pm:	    print $i == $per_line / 2 - 1 ? '-' : ' ';
tests/tests.pm:	print "   " x ($per_line - $end);
tests/tests.pm:	print "|", " " x $start, $esc_data, " " x ($per_line - $end), "|";
tests/tests.pm:	    print +file_size ($fs{$name}), "-byte file";
tests/tests.pm:	$fs{$name} = [$value, 0, -s _];
tests/tests.pm:    return @$value > 1 ? $value->[2] : length ($value->[0]);
tests/tests.pm:# Reads the ustar-format tar file in $ARCHIVE
tests/arc4.c:  s = arc4->s;
tests/arc4.c:  arc4->i = arc4->j = 0;
tests/arc4.c:  s = arc4->s;
tests/arc4.c:  i = arc4->i;
tests/arc4.c:  j = arc4->j;
tests/arc4.c:  while (size-- > 0)
tests/arc4.c:  arc4->i = i;
tests/arc4.c:  arc4->j = j;
tests/lib.h:   may include printf-style arguments.  Logs the message, then
tests/lib.h:     - SUCCESS must not have side effects that affect the
tests/lib.h:     - The message must not have side effects of its own, because
tests/vm/mmap-misalign.ck:# -*- perl -*-
tests/vm/mmap-misalign.ck:(mmap-misalign) begin
tests/vm/mmap-misalign.ck:(mmap-misalign) open "sample.txt"
tests/vm/mmap-misalign.ck:(mmap-misalign) try to mmap at misaligned address
tests/vm/mmap-misalign.ck:(mmap-misalign) end
tests/vm/mmap-bad-fd3.c:   exit code -1. */
tests/vm/mmap-remove.ck:# -*- perl -*-
tests/vm/mmap-remove.ck:(mmap-remove) begin
tests/vm/mmap-remove.ck:(mmap-remove) open "sample.txt"
tests/vm/mmap-remove.ck:(mmap-remove) mmap "sample.txt"
tests/vm/mmap-remove.ck:(mmap-remove) remove "sample.txt"
tests/vm/mmap-remove.ck:(mmap-remove) try to open "sample.txt"
tests/vm/mmap-remove.ck:(mmap-remove) create "another"
tests/vm/mmap-remove.ck:(mmap-remove) end
tests/vm/page-merge-seq.ck:# -*- perl -*-
tests/vm/page-merge-seq.ck:(page-merge-seq) begin
tests/vm/page-merge-seq.ck:(page-merge-seq) init
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 0
tests/vm/page-merge-seq.ck:(page-merge-seq) child[0] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[0] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 1
tests/vm/page-merge-seq.ck:(page-merge-seq) child[1] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[1] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 2
tests/vm/page-merge-seq.ck:(page-merge-seq) child[2] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[2] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 3
tests/vm/page-merge-seq.ck:(page-merge-seq) child[3] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[3] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 4
tests/vm/page-merge-seq.ck:(page-merge-seq) child[4] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[4] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 5
tests/vm/page-merge-seq.ck:(page-merge-seq) child[5] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[5] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 6
tests/vm/page-merge-seq.ck:(page-merge-seq) child[6] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[6] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 7
tests/vm/page-merge-seq.ck:(page-merge-seq) child[7] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[7] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 8
tests/vm/page-merge-seq.ck:(page-merge-seq) child[8] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[8] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 9
tests/vm/page-merge-seq.ck:(page-merge-seq) child[9] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[9] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 10
tests/vm/page-merge-seq.ck:(page-merge-seq) child[10] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[10] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 11
tests/vm/page-merge-seq.ck:(page-merge-seq) child[11] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[11] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 12
tests/vm/page-merge-seq.ck:(page-merge-seq) child[12] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[12] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 13
tests/vm/page-merge-seq.ck:(page-merge-seq) child[13] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[13] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 14
tests/vm/page-merge-seq.ck:(page-merge-seq) child[14] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[14] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 15
tests/vm/page-merge-seq.ck:(page-merge-seq) child[15] exec
tests/vm/page-merge-seq.ck:(page-merge-seq) child[15] wait success
tests/vm/page-merge-seq.ck:(page-merge-seq) merge
tests/vm/page-merge-seq.ck:(page-merge-seq) verify
tests/vm/page-merge-seq.ck:(page-merge-seq) success, buf_idx=1,032,192
tests/vm/page-merge-seq.ck:(page-merge-seq) end
tests/vm/mmap-shuffle.ck:# -*- perl -*-
tests/vm/mmap-shuffle.ck:    for my $i (0...128 * 1024 - 1) {
tests/vm/mmap-shuffle.ck:(mmap-shuffle) begin
tests/vm/mmap-shuffle.ck:(mmap-shuffle) create "buffer"
tests/vm/mmap-shuffle.ck:(mmap-shuffle) open "buffer"
tests/vm/mmap-shuffle.ck:(mmap-shuffle) mmap "buffer"
tests/vm/mmap-shuffle.ck:(mmap-shuffle) init: cksum=$init
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 0: cksum=$shuffle[0]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 1: cksum=$shuffle[1]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 2: cksum=$shuffle[2]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 3: cksum=$shuffle[3]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 4: cksum=$shuffle[4]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 5: cksum=$shuffle[5]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 6: cksum=$shuffle[6]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 7: cksum=$shuffle[7]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 8: cksum=$shuffle[8]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) shuffle 9: cksum=$shuffle[9]
tests/vm/mmap-shuffle.ck:(mmap-shuffle) end
tests/vm/swap-file.c:/* Checks if file-mapped pages 
tests/vm/mmap-zero.ck:# -*- perl -*-
tests/vm/mmap-zero.ck:(mmap-zero) begin
tests/vm/mmap-zero.ck:(mmap-zero) create empty file "empty"
tests/vm/mmap-zero.ck:(mmap-zero) open "empty"
tests/vm/mmap-zero.ck:(mmap-zero) mmap "empty"
tests/vm/mmap-zero.ck:mmap-zero: exit(-1)
tests/vm/pt-bad-read.c:   The process must be terminated with -1 exit code. */
tests/vm/pt-bad-read.c:  read (handle, (char *) &handle - 4096, 1);
tests/vm/mmap-bad-fd3.ck:# -*- perl -*-
tests/vm/mmap-bad-fd3.ck:(mmap-bad-fd3) begin
tests/vm/mmap-bad-fd3.ck:(mmap-bad-fd3) try to mmap stdout
tests/vm/mmap-bad-fd3.ck:(mmap-bad-fd3) end
tests/vm/mmap-bad-fd3.ck:mmap-bad-fd3: exit(0)
tests/vm/mmap-bad-fd3.ck:(mmap-bad-fd3) begin
tests/vm/mmap-bad-fd3.ck:(mmap-bad-fd3) try to mmap stdout
tests/vm/mmap-bad-fd3.ck:mmap-bad-fd3: exit(-1)
tests/vm/Make.tests:# -*- makefile -*-
tests/vm/Make.tests:tests/vm_TESTS = $(addprefix tests/vm/,pt-grow-stack	\
tests/vm/Make.tests:pt-grow-bad pt-big-stk-obj pt-bad-addr pt-bad-read pt-write-code	\
tests/vm/Make.tests:pt-write-code2 pt-grow-stk-sc page-linear page-parallel page-merge-seq	\
tests/vm/Make.tests:page-merge-par page-merge-stk page-merge-mm page-shuffle mmap-read	\
tests/vm/Make.tests:mmap-close mmap-unmap mmap-overlap mmap-twice mmap-write mmap-ro mmap-exit	\
tests/vm/Make.tests:mmap-shuffle mmap-bad-fd mmap-clean mmap-inherit mmap-misalign		\
tests/vm/Make.tests:mmap-null mmap-over-code mmap-over-data mmap-over-stk mmap-remove	\
tests/vm/Make.tests:mmap-zero mmap-bad-fd2 mmap-bad-fd3 mmap-zero-len mmap-off mmap-bad-off \
tests/vm/Make.tests:mmap-kernel lazy-file lazy-anon swap-file swap-anon swap-iter swap-fork)
tests/vm/Make.tests:tests/vm_PROGS = $(tests/vm_TESTS) $(addprefix tests/vm/,child-linear	\
tests/vm/Make.tests:child-sort child-qsort child-qsort-mm child-mm-wrt child-inherit child-swap)
tests/vm/Make.tests:tests/vm/pt-grow-stack_SRC = tests/vm/pt-grow-stack.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/pt-grow-bad_SRC = tests/vm/pt-grow-bad.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-big-stk-obj_SRC = tests/vm/pt-big-stk-obj.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/pt-bad-addr_SRC = tests/vm/pt-bad-addr.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-bad-read_SRC = tests/vm/pt-bad-read.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-write-code_SRC = tests/vm/pt-write-code.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-write-code2_SRC = tests/vm/pt-write-code2.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-grow-stk-sc_SRC = tests/vm/pt-grow-stk-sc.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/page-linear_SRC = tests/vm/page-linear.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/page-parallel_SRC = tests/vm/page-parallel.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/page-merge-seq_SRC = tests/vm/page-merge-seq.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/page-merge-par_SRC = tests/vm/page-merge-par.c \
tests/vm/Make.tests:tests/vm/parallel-merge.c tests/arc4.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/page-merge-stk_SRC = tests/vm/page-merge-stk.c \
tests/vm/Make.tests:tests/vm/parallel-merge.c tests/arc4.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/page-merge-mm_SRC = tests/vm/page-merge-mm.c \
tests/vm/Make.tests:tests/vm/parallel-merge.c tests/arc4.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/page-shuffle_SRC = tests/vm/page-shuffle.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/mmap-read_SRC = tests/vm/mmap-read.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-close_SRC = tests/vm/mmap-close.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-unmap_SRC = tests/vm/mmap-unmap.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-overlap_SRC = tests/vm/mmap-overlap.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-twice_SRC = tests/vm/mmap-twice.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-write_SRC = tests/vm/mmap-write.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-ro_SRC = tests/vm/mmap-ro.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-exit_SRC = tests/vm/mmap-exit.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-shuffle_SRC = tests/vm/mmap-shuffle.c tests/arc4.c	\
tests/vm/Make.tests:tests/vm/mmap-bad-fd_SRC = tests/vm/mmap-bad-fd.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-bad-fd2_SRC = tests/vm/mmap-bad-fd2.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-bad-fd3_SRC = tests/vm/mmap-bad-fd3.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-clean_SRC = tests/vm/mmap-clean.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-inherit_SRC = tests/vm/mmap-inherit.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-misalign_SRC = tests/vm/mmap-misalign.c tests/lib.c	\
tests/vm/Make.tests:tests/vm/mmap-null_SRC = tests/vm/mmap-null.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-over-code_SRC = tests/vm/mmap-over-code.c tests/lib.c	\
tests/vm/Make.tests:tests/vm/mmap-over-data_SRC = tests/vm/mmap-over-data.c tests/lib.c	\
tests/vm/Make.tests:tests/vm/mmap-over-stk_SRC = tests/vm/mmap-over-stk.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-remove_SRC = tests/vm/mmap-remove.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-zero_SRC = tests/vm/mmap-zero.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-zero-len_SRC = tests/vm/mmap-zero-len.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-off_SRC = tests/vm/mmap-off.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-bad-off_SRC = tests/vm/mmap-bad-off.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/mmap-kernel_SRC = tests/vm/mmap-kernel.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/child-linear_SRC = tests/vm/child-linear.c tests/arc4.c tests/lib.c
tests/vm/Make.tests:tests/vm/child-qsort_SRC = tests/vm/child-qsort.c tests/vm/qsort.c tests/lib.c
tests/vm/Make.tests:tests/vm/child-qsort-mm_SRC = tests/vm/child-qsort-mm.c tests/vm/qsort.c \
tests/vm/Make.tests:tests/vm/child-sort_SRC = tests/vm/child-sort.c tests/lib.c
tests/vm/Make.tests:tests/vm/child-mm-wrt_SRC = tests/vm/child-mm-wrt.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/child-inherit_SRC = tests/vm/child-inherit.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/swap-file_SRC = tests/vm/swap-file.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/swap-iter_SRC = tests/vm/swap-iter.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/swap-anon_SRC = tests/vm/swap-anon.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/swap-fork_SRC = tests/vm/swap-fork.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/lazy-file_SRC = tests/vm/lazy-file.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/lazy-anon_SRC = tests/vm/lazy-anon.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/child-swap_SRC = tests/vm/child-swap.c tests/lib.c tests/main.c
tests/vm/Make.tests:tests/vm/pt-bad-read_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/pt-write-code2_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-close_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-read_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-unmap_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-twice_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-ro_PUTFILES = tests/vm/large.txt
tests/vm/Make.tests:tests/vm/mmap-overlap_PUTFILES = tests/vm/zeros
tests/vm/Make.tests:tests/vm/mmap-exit_PUTFILES = tests/vm/child-mm-wrt
tests/vm/Make.tests:tests/vm/page-parallel_PUTFILES = tests/vm/child-linear
tests/vm/Make.tests:tests/vm/page-merge-seq_PUTFILES = tests/vm/child-sort
tests/vm/Make.tests:tests/vm/page-merge-par_PUTFILES = tests/vm/child-sort
tests/vm/Make.tests:tests/vm/page-merge-stk_PUTFILES = tests/vm/child-qsort
tests/vm/Make.tests:tests/vm/page-merge-mm_PUTFILES = tests/vm/child-qsort-mm
tests/vm/Make.tests:tests/vm/mmap-clean_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-inherit_PUTFILES = tests/vm/sample.txt tests/vm/child-inherit
tests/vm/Make.tests:tests/vm/mmap-misalign_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-null_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-over-code_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-over-data_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-over-stk_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/mmap-remove_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/swap-file_PUTFILES = tests/vm/large.txt
tests/vm/Make.tests:tests/vm/swap-iter_PUTFILES = tests/vm/large.txt
tests/vm/Make.tests:tests/vm/swap-fork_PUTFILES = tests/vm/child-swap
tests/vm/Make.tests:tests/vm/lazy-file_PUTFILES = tests/vm/sample.txt tests/vm/small.txt
tests/vm/Make.tests:tests/vm/mmap-off_PUTFILES = tests/vm/large.txt
tests/vm/Make.tests:tests/vm/mmap-bad-off_PUTFILES = tests/vm/large.txt
tests/vm/Make.tests:tests/vm/mmap-kernel_PUTFILES = tests/vm/sample.txt
tests/vm/Make.tests:tests/vm/page-linear.output: TIMEOUT = 300
tests/vm/Make.tests:tests/vm/page-shuffle.output: TIMEOUT = 600
tests/vm/Make.tests:tests/vm/page-shuffle.output: MEMORY = 20
tests/vm/Make.tests:tests/vm/mmap-shuffle.output: TIMEOUT = 600
tests/vm/Make.tests:tests/vm/mmap-shuffle.output: MEMORY = 20
tests/vm/Make.tests:tests/vm/page-merge-seq.output: TIMEOUT = 600
tests/vm/Make.tests:tests/vm/page-merge-par.output: TIMEOUT = 600
tests/vm/Make.tests:tests/vm/lazy-file.output: TIMEOUT = 600
tests/vm/Make.tests:tests/vm/swap-anon.output: SWAP_DISK = 30
tests/vm/Make.tests:tests/vm/swap-anon.output: MEMORY = 10
tests/vm/Make.tests:tests/vm/swap-file.output: SWAP_DISK = 10
tests/vm/Make.tests:tests/vm/swap-file.output: MEMORY = 10
tests/vm/Make.tests:tests/vm/swap-iter.output: SWAP_DISK = 50
tests/vm/Make.tests:tests/vm/swap-iter.output: MEMORY = 10
tests/vm/Make.tests:tests/vm/swap-fork.output: SWAP_DISK = 200
tests/vm/Make.tests:tests/vm/swap-fork.output: MEMORY = 40
tests/vm/Make.tests:tests/vm/swap-fork.output: TIMEOUT = 600
tests/vm/Make.tests:	rm -f tests/vm/zeros
tests/vm/mmap-zero.c:/* Tries to map a zero-length file, which may or may not work but
tests/vm/mmap-zero.c:   and the process must be terminated with -1 exit code. */
tests/vm/mmap-unmap.ck:# -*- perl -*-
tests/vm/mmap-unmap.ck:(mmap-unmap) begin
tests/vm/mmap-unmap.ck:(mmap-unmap) open "sample.txt"
tests/vm/mmap-unmap.ck:(mmap-unmap) mmap "sample.txt"
tests/vm/mmap-unmap.ck:(mmap-unmap) memory is readable 540884285
tests/vm/mmap-unmap.ck:(mmap-unmap) memory is readable 540888381
tests/vm/mmap-unmap.ck:mmap-unmap: exit(-1)
tests/vm/page-merge-stk.ck:# -*- perl -*-
tests/vm/page-merge-stk.ck:(page-merge-stk) begin
tests/vm/page-merge-stk.ck:(page-merge-stk) init
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 0
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 1
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 2
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 3
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 4
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 5
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 6
tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 7
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 0
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 1
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 2
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 3
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 4
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 5
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 6
tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 7
tests/vm/page-merge-stk.ck:(page-merge-stk) merge
tests/vm/page-merge-stk.ck:(page-merge-stk) verify
tests/vm/page-merge-stk.ck:(page-merge-stk) success, buf_idx=1,048,576
tests/vm/page-merge-stk.ck:(page-merge-stk) end
tests/vm/mmap-close.ck:# -*- perl -*-
tests/vm/mmap-close.ck:(mmap-close) begin
tests/vm/mmap-close.ck:(mmap-close) open "sample.txt"
tests/vm/mmap-close.ck:(mmap-close) mmap "sample.txt"
tests/vm/mmap-close.ck:(mmap-close) end
tests/vm/pt-bad-addr.ck:# -*- perl -*-
tests/vm/pt-bad-addr.ck:check_process_death ('pt-bad-addr');
tests/vm/mmap-over-data.ck:# -*- perl -*-
tests/vm/mmap-over-data.ck:(mmap-over-data) begin
tests/vm/mmap-over-data.ck:(mmap-over-data) open "sample.txt"
tests/vm/mmap-over-data.ck:(mmap-over-data) try to mmap over data segment
tests/vm/mmap-over-data.ck:(mmap-over-data) end
tests/vm/mmap-off.ck:# -*- perl -*-
tests/vm/mmap-off.ck:(mmap-off) begin
tests/vm/mmap-off.ck:(mmap-off) open "large.txt"
tests/vm/mmap-off.ck:(mmap-off) try to mmap with offset 0x1000
tests/vm/mmap-off.ck:(mmap-off) validate mmap.
tests/vm/mmap-off.ck:(mmap-off) validated.
tests/vm/mmap-off.ck:(mmap-off) write to mmap
tests/vm/mmap-off.ck:(mmap-off) validate contents.
tests/vm/mmap-off.ck:(mmap-off) open "large.txt"
tests/vm/mmap-off.ck:(mmap-off) read "large.txt" Page 0
tests/vm/mmap-off.ck:(mmap-off) validate page 0.
tests/vm/mmap-off.ck:(mmap-off) validated.
tests/vm/mmap-off.ck:(mmap-off) read "large.txt" Page 1
tests/vm/mmap-off.ck:(mmap-off) validate page 1.
tests/vm/mmap-off.ck:(mmap-off) validated.
tests/vm/mmap-off.ck:(mmap-off) success
tests/vm/mmap-off.ck:(mmap-off) end
tests/vm/mmap-off.ck:mmap-off: exit(0)
tests/vm/swap-anon.ck:# -*- perl -*-
tests/vm/swap-anon.ck:(swap-anon) begin
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 0
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 512
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 1024
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 1536
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 2048
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 2560
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 3072
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 3584
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 4096
tests/vm/swap-anon.ck:(swap-anon) write sparsely over page 4608
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 0
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 512
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 1024
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 1536
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 2048
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 2560
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 3072
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 3584
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 4096
tests/vm/swap-anon.ck:(swap-anon) check consistency in page 4608
tests/vm/swap-anon.ck:(swap-anon) end
tests/vm/page-merge-stk.c:#include "tests/vm/parallel-merge.h"
tests/vm/page-merge-stk.c:  parallel_merge ("child-qsort", 72);
tests/vm/swap-iter.ck:# -*- perl -*-
tests/vm/swap-iter.ck:(swap-iter) begin
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 0
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 512
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 1024
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 1536
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 2048
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 2560
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 3072
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 3584
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 4096
tests/vm/swap-iter.ck:(swap-iter) write sparsely over page 4608
tests/vm/swap-iter.ck:(swap-iter) open "large.txt"
tests/vm/swap-iter.ck:(swap-iter) mmap "large.txt"
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 0
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 512
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 1024
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 1536
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 2048
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 2560
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 3072
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 3584
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 4096
tests/vm/swap-iter.ck:(swap-iter) check consistency in page 4608
tests/vm/swap-iter.ck:(swap-iter) end
tests/vm/page-merge-par.ck:# -*- perl -*-
tests/vm/page-merge-par.ck:(page-merge-par) begin
tests/vm/page-merge-par.ck:(page-merge-par) init
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 0
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 1
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 2
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 3
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 4
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 5
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 6
tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 7
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 0
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 1
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 2
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 3
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 4
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 5
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 6
tests/vm/page-merge-par.ck:(page-merge-par) wait for child 7
tests/vm/page-merge-par.ck:(page-merge-par) merge
tests/vm/page-merge-par.ck:(page-merge-par) verify
tests/vm/page-merge-par.ck:(page-merge-par) success, buf_idx=1,048,576
tests/vm/page-merge-par.ck:(page-merge-par) end
tests/vm/mmap-clean.c:  static char buffer[sizeof sample - 1];
tests/vm/mmap-clean.c:                 strlen (sample) - strlen (overwrite))) 
tests/vm/mmap-zero-len.ck:# -*- perl -*-
tests/vm/mmap-zero-len.ck:(mmap-zero-len) begin
tests/vm/mmap-zero-len.ck:(mmap-zero-len) create "sample.txt"
tests/vm/mmap-zero-len.ck:(mmap-zero-len) open "sample.txt"
tests/vm/mmap-zero-len.ck:(mmap-zero-len) try to mmap zero length
tests/vm/mmap-zero-len.ck:(mmap-zero-len) end
tests/vm/mmap-zero-len.ck:mmap-zero-len: exit(0)
tests/vm/mmap-zero-len.ck:(mmap-zero-len) begin
tests/vm/mmap-zero-len.ck:(mmap-zero-len) create "sample.txt"
tests/vm/mmap-zero-len.ck:(mmap-zero-len) open "sample.txt"
tests/vm/mmap-zero-len.ck:(mmap-zero-len) try to mmap zero length
tests/vm/mmap-zero-len.ck:mmap-zero-len: exit(-1)
tests/vm/child-inherit.c:/* Child process for mmap-inherit test.
tests/vm/child-inherit.c:   The process must be terminated with -1 exit code. */
tests/vm/pt-bad-read.ck:# -*- perl -*-
tests/vm/pt-bad-read.ck:(pt-bad-read) begin
tests/vm/pt-bad-read.ck:(pt-bad-read) open "sample.txt"
tests/vm/pt-bad-read.ck:pt-bad-read: exit(-1)
tests/vm/page-parallel.ck:# -*- perl -*-
tests/vm/page-parallel.ck:(page-parallel) begin
tests/vm/page-parallel.ck:(page-parallel) wait for child 0
tests/vm/page-parallel.ck:(page-parallel) wait for child 1
tests/vm/page-parallel.ck:(page-parallel) wait for child 2
tests/vm/page-parallel.ck:(page-parallel) wait for child 3
tests/vm/page-parallel.ck:(page-parallel) end
tests/vm/mmap-ro.c:  msg ("about to write into read-only mmap'd memory");
tests/vm/pt-bad-addr.c:   The process must be terminated with -1 exit code. */
tests/vm/cow/Make.tests:# -*- makefile -*-
tests/vm/cow/Make.tests:tests/vm/cow_TESTS = $(addprefix tests/vm/cow/cow-, simple)
tests/vm/cow/Make.tests:tests/vm/cow/cow-simple_SRC = tests/vm/cow/cow-simple.c tests/lib.c tests/main.c
tests/vm/cow/cow-simple.c:/* Checks if fork is implemented properly with copy-on-write */
tests/vm/cow/Rubric:Functionality of copy-on-write:
tests/vm/cow/Rubric:- Basic functionality for copy-on-write.
tests/vm/cow/Rubric:1	cow-simple
tests/vm/cow/cow-simple.ck:# -*- perl -*-
tests/vm/cow/cow-simple.ck:(cow-simple) begin
tests/vm/cow/cow-simple.ck:(cow-simple) check data consistency
tests/vm/cow/cow-simple.ck:(cow-simple) check data consistency
tests/vm/cow/cow-simple.ck:(cow-simple) two phys addrs should be the same.
tests/vm/cow/cow-simple.ck:(cow-simple) check data change
tests/vm/cow/cow-simple.ck:(cow-simple) two phys addrs should not be the same.
tests/vm/cow/cow-simple.ck:(cow-simple) end
tests/vm/cow/cow-simple.ck:(cow-simple) two phys addrs should be the same.
tests/vm/cow/cow-simple.ck:(cow-simple) check data consistency
tests/vm/cow/cow-simple.ck:(cow-simple) end
tests/vm/page-parallel.c:/* Runs 4 child-linear processes at once. */
tests/vm/page-parallel.c:    children[i] = fork ("child-linear");
tests/vm/page-parallel.c:      if (exec ("child-linear") == -1)
tests/vm/page-parallel.c:        fail ("failed to exec child-linear");
tests/vm/qsort.c:   SIZE - LEFT_SIZE elements all greater than or equal to
tests/vm/qsort.c:/* Partitions ARRAY in-place in an initial run of bytes all less
tests/vm/qsort.c:      left_size--;
tests/vm/qsort.c:          last--;
tests/vm/qsort.c:            left_size--;
tests/vm/qsort.c:    if (buf[i - 1] > buf[i])
tests/vm/qsort.c:   the quick-sort algorithm. */
tests/vm/qsort.c:      size_t right_size = size - left_size;
tests/vm/pt-write-code.c:   The process must be terminated with -1 exit code. */
tests/vm/mmap-over-stk.ck:# -*- perl -*-
tests/vm/mmap-over-stk.ck:(mmap-over-stk) begin
tests/vm/mmap-over-stk.ck:(mmap-over-stk) open "sample.txt"
tests/vm/mmap-over-stk.ck:(mmap-over-stk) try to mmap over stack segment
tests/vm/mmap-over-stk.ck:(mmap-over-stk) end
tests/vm/pt-grow-bad.ck:# -*- perl -*-
tests/vm/pt-grow-bad.ck:(pt-grow-bad) begin
tests/vm/pt-grow-bad.ck:pt-grow-bad: exit(-1)
tests/vm/page-merge-par.c:#include "tests/vm/parallel-merge.h"
tests/vm/page-merge-par.c:  parallel_merge ("child-sort", 123);
tests/vm/mmap-exit.c:/* Executes child-mm-wrt and verifies that the writes that should
tests/vm/mmap-exit.c:	child = fork("child-mm-wrt");
tests/vm/mmap-exit.c:		CHECK ((child = exec ("child-mm-wrt")) != -1, "exec \"child-mm-wrt\"");
tests/vm/mmap-overlap.ck:# -*- perl -*-
tests/vm/mmap-overlap.ck:(mmap-overlap) begin
tests/vm/mmap-overlap.ck:(mmap-overlap) open "zeros" once
tests/vm/mmap-overlap.ck:(mmap-overlap) mmap "zeros"
tests/vm/mmap-overlap.ck:(mmap-overlap) open "zeros" again
tests/vm/mmap-overlap.ck:(mmap-overlap) try to mmap "zeros" again
tests/vm/mmap-overlap.ck:(mmap-overlap) end
tests/vm/child-mm-wrt.c:/* Child process of mmap-exit.
tests/vm/mmap-null.ck:# -*- perl -*-
tests/vm/mmap-null.ck:(mmap-null) begin
tests/vm/mmap-null.ck:(mmap-null) open "sample.txt"
tests/vm/mmap-null.ck:(mmap-null) try to mmap at address 0
tests/vm/mmap-null.ck:(mmap-null) end
tests/vm/mmap-inherit.ck:# -*- perl -*-
tests/vm/mmap-inherit.ck:(mmap-inherit) begin
tests/vm/mmap-inherit.ck:(mmap-inherit) open "sample.txt"
tests/vm/mmap-inherit.ck:(mmap-inherit) mmap "sample.txt"
tests/vm/mmap-inherit.ck:(mmap-inherit) exec "child-inherit"
tests/vm/mmap-inherit.ck:(child-inherit) begin
tests/vm/mmap-inherit.ck:child-inherit: exit(-1)
tests/vm/mmap-inherit.ck:(mmap-inherit) checking that mmap'd file still has same data
tests/vm/mmap-inherit.ck:(mmap-inherit) end
tests/vm/mmap-inherit.ck:mmap-inherit: exit(0)
tests/vm/mmap-bad-fd.c:   exit code -1. */
tests/vm/process_death.pm:# -*- perl -*-
tests/vm/process_death.pm:    fail "Output missing '$proc_name: exit(-1)' message.\n"
tests/vm/process_death.pm:      if !grep ("$proc_name: exit(-1)" eq $_, @output);
tests/vm/page-linear.ck:# -*- perl -*-
tests/vm/page-linear.ck:(page-linear) begin
tests/vm/page-linear.ck:(page-linear) initialize
tests/vm/page-linear.ck:(page-linear) read pass
tests/vm/page-linear.ck:(page-linear) read/modify/write pass one
tests/vm/page-linear.ck:(page-linear) read/modify/write pass two
tests/vm/page-linear.ck:(page-linear) read pass
tests/vm/page-linear.ck:(page-linear) end
tests/vm/mmap-clean.ck:# -*- perl -*-
tests/vm/mmap-clean.ck:(mmap-clean) begin
tests/vm/mmap-clean.ck:(mmap-clean) open "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) mmap "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) write "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) munmap "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) seek "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) read "sample.txt"
tests/vm/mmap-clean.ck:(mmap-clean) file change was retained after munmap
tests/vm/mmap-clean.ck:(mmap-clean) end
tests/vm/parallel-merge.c:#include "tests/vm/parallel-merge.h"
tests/vm/parallel-merge.c:        CHECK ((children[i] = exec (cmd)) != -1, "exec \"%s\"", cmd);
tests/vm/parallel-merge.c:      if ((++mp[min] - buf1) % CHUNK_SIZE == 0)
tests/vm/parallel-merge.c:        mp[min] = mp[--mp_left];
tests/vm/parallel-merge.c:      while (histogram[hist_idx]-- > 0)
tests/vm/sample.txt:trouble to figure out if the object is carcdr-able anyway, we figured
tests/vm/sample.txt:code shows how to destructure a cons (SOME-CONS) into its two slots
tests/vm/sample.txt:(THE-CAR and THE-CDR):
tests/vm/sample.txt:        (MULTIPLE-VALUE-BIND (THE-CAR THE-CDR) (CAR SOME-CONS) ...)
tests/vm/sample.txt:the object.  In a related change, the functions MAKE-ARRAY and CONS
tests/vm/lazy-file.ck:# -*- perl -*-
tests/vm/lazy-file.ck:(lazy-file) begin
tests/vm/lazy-file.ck:(lazy-file) open "small.txt"
tests/vm/lazy-file.ck:(lazy-file) sizeof small: 10017
tests/vm/lazy-file.ck:(lazy-file) page aligned size of small: 12288
tests/vm/lazy-file.ck:(lazy-file) mmap "small.txt"
tests/vm/lazy-file.ck:(lazy-file) initial pages status
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) load pages (3)
tests/vm/lazy-file.ck:(lazy-file) load page [0]
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) load page [1]
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is not loaded
tests/vm/lazy-file.ck:(lazy-file) load page [2]
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) check if page is loaded
tests/vm/lazy-file.ck:(lazy-file) end
tests/vm/mmap-remove.c:  CHECK (open ("sample.txt") == -1, "try to open \"sample.txt\"");
tests/vm/mmap-bad-fd2.ck:# -*- perl -*-
tests/vm/mmap-bad-fd2.ck:(mmap-bad-fd2) begin
tests/vm/mmap-bad-fd2.ck:(mmap-bad-fd2) try to mmap stdin
tests/vm/mmap-bad-fd2.ck:(mmap-bad-fd2) end
tests/vm/mmap-bad-fd2.ck:mmap-bad-fd2: exit(0)
tests/vm/mmap-bad-fd2.ck:(mmap-bad-fd2) begin
tests/vm/mmap-bad-fd2.ck:(mmap-bad-fd2) try to mmap stdin
tests/vm/mmap-bad-fd2.ck:mmap-bad-fd2: exit(-1)
tests/vm/mmap-bad-off.ck:# -*- perl -*-
tests/vm/mmap-bad-off.ck:(mmap-bad-off) begin
tests/vm/mmap-bad-off.ck:(mmap-bad-off) open "large.txt"
tests/vm/mmap-bad-off.ck:(mmap-bad-off) try to mmap invalid offset
tests/vm/mmap-bad-off.ck:(mmap-bad-off) end
tests/vm/mmap-bad-off.ck:mmap-bad-off: exit(0)
tests/vm/mmap-ro.ck:# -*- perl -*-
tests/vm/mmap-ro.ck:(mmap-ro) begin
tests/vm/mmap-ro.ck:(mmap-ro) open "large.txt"
tests/vm/mmap-ro.ck:(mmap-ro) mmap "large.txt" with writable=0
tests/vm/mmap-ro.ck:(mmap-ro) about to write into read-only mmap'd memory
tests/vm/mmap-exit.ck:# -*- perl -*-
tests/vm/mmap-exit.ck:(mmap-exit) begin
tests/vm/mmap-exit.ck:(child-mm-wrt) begin
tests/vm/mmap-exit.ck:(child-mm-wrt) create "sample.txt"
tests/vm/mmap-exit.ck:(child-mm-wrt) open "sample.txt"
tests/vm/mmap-exit.ck:(child-mm-wrt) mmap "sample.txt"
tests/vm/mmap-exit.ck:(child-mm-wrt) end
tests/vm/mmap-exit.ck:(mmap-exit) open "sample.txt" for verification
tests/vm/mmap-exit.ck:(mmap-exit) verified contents of "sample.txt"
tests/vm/mmap-exit.ck:(mmap-exit) close "sample.txt"
tests/vm/mmap-exit.ck:(mmap-exit) end
tests/vm/pt-grow-stk-sc.ck:# -*- perl -*-
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) begin
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) create "sample.txt"
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) open "sample.txt"
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) write "sample.txt"
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) 2nd open "sample.txt"
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) read "sample.txt"
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) compare written data against read data
tests/vm/pt-grow-stk-sc.ck:(pt-grow-stk-sc) end
tests/vm/child-linear.c:/* Child process of page-parallel.
tests/vm/child-linear.c:const char *test_name = "child-linear";
tests/vm/child-linear.c:  const char *key = argv[argc - 1];
tests/vm/mmap-kernel.c:  kernel = (void *) 0x8004000000 - 0x1000;
tests/vm/mmap-kernel.c:  CHECK (mmap (kernel, -0x8004000000 + 0x1000, 0, handle, 0) == MAP_FAILED,
tests/vm/mmap-bad-fd.ck:# -*- perl -*-
tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) begin
tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) try to mmap invalid fd
tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) end
tests/vm/mmap-bad-fd.ck:mmap-bad-fd: exit(0)
tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) begin
tests/vm/mmap-bad-fd.ck:(mmap-bad-fd) try to mmap invalid fd
tests/vm/mmap-bad-fd.ck:mmap-bad-fd: exit(-1)
tests/vm/Rubric.functionality:- Test stack growth.
tests/vm/Rubric.functionality:3	pt-grow-stack
tests/vm/Rubric.functionality:3	pt-grow-stk-sc
tests/vm/Rubric.functionality:3	pt-big-stk-obj
tests/vm/Rubric.functionality:- Test paging behavior.
tests/vm/Rubric.functionality:3	page-linear
tests/vm/Rubric.functionality:5	page-parallel
tests/vm/Rubric.functionality:3	page-shuffle
tests/vm/Rubric.functionality:3	page-merge-seq
tests/vm/Rubric.functionality:5	page-merge-par
tests/vm/Rubric.functionality:5	page-merge-mm
tests/vm/Rubric.functionality:5	page-merge-stk
tests/vm/Rubric.functionality:- Test "mmap" system call.
tests/vm/Rubric.functionality:2	mmap-read
tests/vm/Rubric.functionality:2	mmap-write
tests/vm/Rubric.functionality:2	mmap-ro
tests/vm/Rubric.functionality:2	mmap-shuffle
tests/vm/Rubric.functionality:2	mmap-twice
tests/vm/Rubric.functionality:2	mmap-unmap
tests/vm/Rubric.functionality:1	mmap-exit
tests/vm/Rubric.functionality:3	mmap-clean
tests/vm/Rubric.functionality:2	mmap-close
tests/vm/Rubric.functionality:2	mmap-remove
tests/vm/Rubric.functionality:2	mmap-off
tests/vm/Rubric.functionality:- Test memory swapping
tests/vm/Rubric.functionality:4	swap-anon
tests/vm/Rubric.functionality:4	swap-file
tests/vm/Rubric.functionality:4	swap-iter
tests/vm/Rubric.functionality:4	swap-fork
tests/vm/Rubric.functionality:- Test lazy loading
tests/vm/Rubric.functionality:4	lazy-anon
tests/vm/Rubric.functionality:4	lazy-file
tests/vm/mmap-bad-off.c:   exit code -1. */
tests/vm/page-merge-seq.c:      child = fork("child-sort");
tests/vm/page-merge-seq.c:			/* 	CHECK (exec ("child-sort buffer") != -1, "exec \"child-sort buffer\""); */
tests/vm/page-merge-seq.c:			/* 	CHECK (wait (child) == 123, "wait for child-sort"); */
tests/vm/page-merge-seq.c:				if (exec ("child-sort buffer") == -1)
tests/vm/page-merge-seq.c:      if ((++mp[min] - buf1) % CHUNK_SIZE == 0)
tests/vm/page-merge-seq.c:        mp[min] = mp[--mp_left];
tests/vm/page-merge-seq.c:      while (histogram[hist_idx]-- > 0)
tests/vm/swap-fork.c:	  child[i] = fork("child-swap");
tests/vm/swap-fork.c:	  	if(exec ("child-swap") == -1)
tests/vm/swap-fork.c:            fail("exec \"child-swap\"");
tests/vm/mmap-inherit.c:/* Maps a file into memory and runs child-inherit to verify that
tests/vm/mmap-inherit.c:	child = fork("child-inherit");
tests/vm/mmap-inherit.c:		CHECK (exec ("child-inherit") != -1, "exec \"child-inherit\"");
tests/vm/mmap-inherit.c:		CHECK (wait (child) == -1, "wait for child (should return -1)");
tests/vm/child-qsort-mm.c:   a multi-pass divide and conquer algorithm.  */
tests/vm/child-qsort-mm.c:const char *test_name = "child-qsort-mm";
tests/vm/page-merge-mm.c:#include "tests/vm/parallel-merge.h"
tests/vm/page-merge-mm.c:  parallel_merge ("child-qsort-mm", 80);
tests/vm/mmap-over-code.ck:# -*- perl -*-
tests/vm/mmap-over-code.ck:(mmap-over-code) begin
tests/vm/mmap-over-code.ck:(mmap-over-code) open "sample.txt"
tests/vm/mmap-over-code.ck:(mmap-over-code) try to mmap over code segment
tests/vm/mmap-over-code.ck:(mmap-over-code) end
tests/vm/pt-grow-bad.c:   The process must be terminated with -1 exit code. */
tests/vm/pt-grow-bad.c:  asm volatile ("movq -4096(%rsp), %rax");
tests/vm/page-shuffle.ck:# -*- perl -*-
tests/vm/page-shuffle.ck:    for my $i (0...128 * 1024 - 1) {
tests/vm/page-shuffle.ck:(page-shuffle) begin
tests/vm/page-shuffle.ck:(page-shuffle) init: cksum=$init
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 0: cksum=$shuffle[0]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 1: cksum=$shuffle[1]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 2: cksum=$shuffle[2]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 3: cksum=$shuffle[3]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 4: cksum=$shuffle[4]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 5: cksum=$shuffle[5]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 6: cksum=$shuffle[6]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 7: cksum=$shuffle[7]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 8: cksum=$shuffle[8]
tests/vm/page-shuffle.ck:(page-shuffle) shuffle 9: cksum=$shuffle[9]
tests/vm/page-shuffle.ck:(page-shuffle) end
tests/vm/pt-write-code2.c:   The process must be terminated with -1 exit code. */
tests/vm/parallel-merge.h:#endif /* tests/vm/parallel-merge.h */
tests/vm/lazy-file.c:/* Checks if file-mapped pages are lazy loaded  */
tests/vm/pt-big-stk-obj.ck:# -*- perl -*-
tests/vm/pt-big-stk-obj.ck:(pt-big-stk-obj) begin
tests/vm/pt-big-stk-obj.ck:(pt-big-stk-obj) cksum: 3256410166
tests/vm/pt-big-stk-obj.ck:(pt-big-stk-obj) end
tests/vm/mmap-bad-fd2.c:   exit code -1. */
tests/vm/mmap-read.ck:# -*- perl -*-
tests/vm/mmap-read.ck:(mmap-read) begin
tests/vm/mmap-read.ck:(mmap-read) open "sample.txt"
tests/vm/mmap-read.ck:(mmap-read) mmap "sample.txt"
tests/vm/mmap-read.ck:(mmap-read) end
tests/vm/mmap-kernel.ck:# -*- perl -*-
tests/vm/mmap-kernel.ck:(mmap-kernel) begin
tests/vm/mmap-kernel.ck:(mmap-kernel) open "sample.txt"
tests/vm/mmap-kernel.ck:(mmap-kernel) try to mmap over kernel 0
tests/vm/mmap-kernel.ck:(mmap-kernel) try to mmap over kernel 1
tests/vm/mmap-kernel.ck:(mmap-kernel) try to mmap over kernel 2
tests/vm/mmap-kernel.ck:(mmap-kernel) end
tests/vm/mmap-kernel.ck:mmap-kernel: exit(0)
tests/vm/swap-file.ck:# -*- perl -*-
tests/vm/swap-file.ck:(swap-file) begin
tests/vm/swap-file.ck:(swap-file) open "large.txt"
tests/vm/swap-file.ck:(swap-file) mmap "large.txt"
tests/vm/swap-file.ck:(swap-file) end
tests/vm/page-merge-mm.ck:# -*- perl -*-
tests/vm/page-merge-mm.ck:(page-merge-mm) begin
tests/vm/page-merge-mm.ck:(page-merge-mm) init
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 0
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 1
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 2
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 3
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 4
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 5
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 6
tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 7
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 0
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 1
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 2
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 3
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 4
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 5
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 6
tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 7
tests/vm/page-merge-mm.ck:(page-merge-mm) merge
tests/vm/page-merge-mm.ck:(page-merge-mm) verify
tests/vm/page-merge-mm.ck:(page-merge-mm) success, buf_idx=1,048,576
tests/vm/page-merge-mm.ck:(page-merge-mm) end
tests/vm/pt-write-code.ck:# -*- perl -*-
tests/vm/pt-write-code.ck:check_process_death ('pt-write-code');
tests/vm/pt-write-code2.ck:# -*- perl -*-
tests/vm/pt-write-code2.ck:(pt-write-code2) begin
tests/vm/pt-write-code2.ck:(pt-write-code2) open "sample.txt"
tests/vm/pt-write-code2.ck:pt-write-code2: exit(-1)
tests/vm/child-sort.c:   it, using counting sort, a single-pass algorithm.  The sorted
tests/vm/child-sort.c:   data is written back to the same file in-place. */
tests/vm/child-sort.c:const char *test_name = "child-sort";
tests/vm/child-sort.c:      while (j-- > 0)
tests/vm/swap-fork.ck:# -*- perl -*-
tests/vm/swap-fork.ck:(swap-fork) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(child-swap) begin
tests/vm/swap-fork.ck:(swap-fork) end
tests/vm/mmap-write.ck:# -*- perl -*-
tests/vm/mmap-write.ck:(mmap-write) begin
tests/vm/mmap-write.ck:(mmap-write) create "sample.txt"
tests/vm/mmap-write.ck:(mmap-write) open "sample.txt"
tests/vm/mmap-write.ck:(mmap-write) mmap "sample.txt"
tests/vm/mmap-write.ck:(mmap-write) compare read data against written data
tests/vm/mmap-write.ck:(mmap-write) end
tests/vm/sample.inc:  "trouble to figure out if the object is carcdr-able anyway, we figured\n"
tests/vm/sample.inc:  "code shows how to destructure a cons (SOME-CONS) into its two slots\n"
tests/vm/sample.inc:  "(THE-CAR and THE-CDR):\n"
tests/vm/sample.inc:  "        (MULTIPLE-VALUE-BIND (THE-CAR THE-CDR) (CAR SOME-CONS) ...)\n"
tests/vm/sample.inc:  "the object.  In a related change, the functions MAKE-ARRAY and CONS\n"
tests/vm/mmap-twice.ck:# -*- perl -*-
tests/vm/mmap-twice.ck:(mmap-twice) begin
tests/vm/mmap-twice.ck:(mmap-twice) open "sample.txt" #0
tests/vm/mmap-twice.ck:(mmap-twice) mmap "sample.txt" #0 at 0x10000000
tests/vm/mmap-twice.ck:(mmap-twice) open "sample.txt" #1
tests/vm/mmap-twice.ck:(mmap-twice) mmap "sample.txt" #1 at 0x20000000
tests/vm/mmap-twice.ck:(mmap-twice) compare mmap'd file 0 against data
tests/vm/mmap-twice.ck:(mmap-twice) compare mmap'd file 1 against data
tests/vm/mmap-twice.ck:(mmap-twice) end
tests/vm/pt-grow-stack.ck:# -*- perl -*-
tests/vm/pt-grow-stack.ck:(pt-grow-stack) begin
tests/vm/pt-grow-stack.ck:(pt-grow-stack) cksum: 3424492700
tests/vm/pt-grow-stack.ck:(pt-grow-stack) end
tests/vm/Rubric.robustness:- Test robustness of page table support.
tests/vm/Rubric.robustness:2	pt-bad-addr
tests/vm/Rubric.robustness:2	pt-bad-read
tests/vm/Rubric.robustness:2	pt-write-code
tests/vm/Rubric.robustness:2	pt-write-code2
tests/vm/Rubric.robustness:2	pt-grow-bad
tests/vm/Rubric.robustness:- Test robustness of "mmap" system call.
tests/vm/Rubric.robustness:1	mmap-bad-fd
tests/vm/Rubric.robustness:1	mmap-bad-fd2
tests/vm/Rubric.robustness:1	mmap-bad-fd3
tests/vm/Rubric.robustness:1	mmap-inherit
tests/vm/Rubric.robustness:1	mmap-null
tests/vm/Rubric.robustness:1	mmap-zero
tests/vm/Rubric.robustness:1	mmap-zero-len
tests/vm/Rubric.robustness:1	mmap-misalign
tests/vm/Rubric.robustness:1	mmap-over-code
tests/vm/Rubric.robustness:1	mmap-over-data
tests/vm/Rubric.robustness:1	mmap-over-stk
tests/vm/Rubric.robustness:1	mmap-overlap
tests/vm/Rubric.robustness:1	mmap-bad-off
tests/vm/Rubric.robustness:3	mmap-kernel
tests/vm/lazy-anon.ck:# -*- perl -*-
tests/vm/lazy-anon.ck:(lazy-anon) begin
tests/vm/lazy-anon.ck:(lazy-anon) initial pages status
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) load pages
tests/vm/lazy-anon.ck:(lazy-anon) load page [0]
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) load page [1]
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) check if page is not loaded
tests/vm/lazy-anon.ck:(lazy-anon) load page [2]
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) check if page is loaded
tests/vm/lazy-anon.ck:(lazy-anon) check memory content
tests/vm/lazy-anon.ck:(lazy-anon) end
tests/vm/child-qsort.c:   it, using quick sort, a multi-pass divide and conquer
tests/vm/child-qsort.c:   in-place. */
tests/vm/child-qsort.c:const char *test_name = "child-qsort";
tests/Make.tests:# -*- makefile -*-
tests/Make.tests:	rm -f $(OUTPUTS) $(ERRORS) $(RESULTS) 
tests/Make.tests:	$(SRCDIR)/tests/make-grade $(SRCDIR) $< $(GRADING_FILE) | tee $@
tests/Make.tests:	@COUNT="`egrep '^(pass|FAIL) ' $< | wc -l | sed 's/[ 	]//g;'`"; \
tests/Make.tests:	FAILURES="`egrep '^FAIL ' $< | wc -l | sed 's/[ 	]//g;'`"; \
tests/Make.tests:		if echo PASS | cmp -s $$d.result -; then	\
tests/Make.tests:TESTCMD = pintos -v -k -T $(TIMEOUT) -m $(MEMORY)
tests/Make.tests:TESTCMD += --fs-disk=$(FSDISK)
tests/Make.tests:TESTCMD += $(foreach file,$(PUTFILES),-p $(file):$(notdir $(file)))
tests/Make.tests:TESTCMD += --swap-disk=$(SWAP_DISK)
tests/Make.tests:TESTCMD += -- -q 
tests/Make.tests:TESTCMD += -f
tests/Make.tests:	perl -I$(SRCDIR) $< $* $@
tests/userprog/open-null.c:   The process must be terminated with exit code -1. */
tests/userprog/rox-multichild.ck:# -*- perl -*-
tests/userprog/rox-multichild.ck:(rox-multichild) begin
tests/userprog/rox-multichild.ck:(rox-multichild) open "child-rox"
tests/userprog/rox-multichild.ck:(rox-multichild) read "child-rox"
tests/userprog/rox-multichild.ck:(rox-multichild) write "child-rox"
tests/userprog/rox-multichild.ck:(rox-multichild) exec "child-rox 5"
tests/userprog/rox-multichild.ck:(child-rox) begin
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) exec "child-rox 4"
tests/userprog/rox-multichild.ck:(child-rox) begin
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) exec "child-rox 3"
tests/userprog/rox-multichild.ck:(child-rox) begin
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) exec "child-rox 2"
tests/userprog/rox-multichild.ck:(child-rox) begin
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) exec "child-rox 1"
tests/userprog/rox-multichild.ck:(child-rox) begin
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) end
tests/userprog/rox-multichild.ck:child-rox: exit(12)
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) end
tests/userprog/rox-multichild.ck:child-rox: exit(12)
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) end
tests/userprog/rox-multichild.ck:child-rox: exit(12)
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) end
tests/userprog/rox-multichild.ck:child-rox: exit(12)
tests/userprog/rox-multichild.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-multichild.ck:(child-rox) end
tests/userprog/rox-multichild.ck:child-rox: exit(12)
tests/userprog/rox-multichild.ck:(rox-multichild) write "child-rox"
tests/userprog/rox-multichild.ck:(rox-multichild) end
tests/userprog/rox-multichild.ck:rox-multichild: exit(0)
tests/userprog/close-twice.ck:# -*- perl -*-
tests/userprog/close-twice.ck:(close-twice) begin
tests/userprog/close-twice.ck:(close-twice) open "sample.txt"
tests/userprog/close-twice.ck:(close-twice) close "sample.txt"
tests/userprog/close-twice.ck:(close-twice) close "sample.txt" again
tests/userprog/close-twice.ck:(close-twice) end
tests/userprog/close-twice.ck:close-twice: exit(0)
tests/userprog/close-twice.ck:(close-twice) begin
tests/userprog/close-twice.ck:(close-twice) open "sample.txt"
tests/userprog/close-twice.ck:(close-twice) close "sample.txt"
tests/userprog/close-twice.ck:(close-twice) close "sample.txt" again
tests/userprog/close-twice.ck:close-twice: exit(-1)
tests/userprog/read-bad-fd.ck:# -*- perl -*-
tests/userprog/read-bad-fd.ck:(read-bad-fd) begin
tests/userprog/read-bad-fd.ck:(read-bad-fd) end
tests/userprog/read-bad-fd.ck:read-bad-fd: exit(0)
tests/userprog/read-bad-fd.ck:(read-bad-fd) begin
tests/userprog/read-bad-fd.ck:read-bad-fd: exit(-1)
tests/userprog/fork-close.ck:# -*- perl -*-
tests/userprog/fork-close.ck:(fork-close) begin
tests/userprog/fork-close.ck:(fork-close) open "sample.txt"
tests/userprog/fork-close.ck:(fork-close) child run
tests/userprog/fork-close.ck:(fork-close) end
tests/userprog/fork-close.ck:(fork-close) Parent success
tests/userprog/fork-close.ck:(fork-close) end
tests/userprog/fork-close.ck:fork-close: exit(0)
tests/userprog/bad-read2.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-read2.c:  msg ("Congratulations - you have successfully read kernel memory: %d", 
tests/userprog/bad-read2.c:  fail ("should have exited with -1");
tests/userprog/rox-simple.c:  CHECK ((handle = open ("rox-simple")) > 1, "open \"rox-simple\"");
tests/userprog/rox-simple.c:         "read \"rox-simple\"");
tests/userprog/rox-simple.c:         "try to write \"rox-simple\"");
tests/userprog/write-stdin.c:   which may just fail or terminate the process with -1 exit
tests/userprog/create-bound.ck:# -*- perl -*-
tests/userprog/create-bound.ck:(create-bound) begin
tests/userprog/create-bound.ck:(create-bound) create("quux.dat"): 1
tests/userprog/create-bound.ck:(create-bound) end
tests/userprog/create-bound.ck:create-bound: exit(0)
tests/userprog/child-bad.c:/* Child process run by wait-killed test.
tests/userprog/child-bad.c:   -1 exit code because `pintos` is not present in Pintos. */
tests/userprog/child-bad.c:  fail ("should have exited with -1");
tests/userprog/write-bad-fd.ck:# -*- perl -*-
tests/userprog/write-bad-fd.ck:(write-bad-fd) begin
tests/userprog/write-bad-fd.ck:(write-bad-fd) end
tests/userprog/write-bad-fd.ck:write-bad-fd: exit(0)
tests/userprog/write-bad-fd.ck:(write-bad-fd) begin
tests/userprog/write-bad-fd.ck:write-bad-fd: exit(-1)
tests/userprog/bad-jump2.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-jump2.c:  msg ("Congratulations - you have successfully called kernel code: %d", 
tests/userprog/bad-jump2.c:  fail ("should have exited with -1");
tests/userprog/wait-bad-pid.c:   process with -1 exit code. */
tests/userprog/exec-arg.ck:# -*- perl -*-
tests/userprog/exec-arg.ck:(exec-arg) begin
tests/userprog/exec-arg.ck:(exec-arg) I'm your father
tests/userprog/exec-arg.ck:(args) argv[0] = 'child-args'
tests/userprog/exec-arg.ck:exec-arg: exit(0)
tests/userprog/dup2/dup2-simple.ck:# -*- perl -*-
tests/userprog/dup2/dup2-simple.ck:(dup2-simple) open "sample.txt"
tests/userprog/dup2/dup2-simple.ck:(dup2-simple) first dup2()
tests/userprog/dup2/dup2-simple.ck:(dup2-simple) Parent success
tests/userprog/dup2/dup2-simple.ck:dup2-simple: exit(0)
tests/userprog/dup2/Make.tests:# -*- makefile -*-
tests/userprog/dup2/Make.tests:tests/userprog/dup2_TESTS = $(addprefix tests/userprog/dup2/dup2-,complex simple)
tests/userprog/dup2/Make.tests:tests/userprog/dup2/dup2-complex_SRC = tests/userprog/dup2/dup2-complex.c	\
tests/userprog/dup2/Make.tests:tests/userprog/dup2/dup2-simple_SRC = tests/userprog/dup2/dup2-simple.c	\
tests/userprog/dup2/Make.tests:tests/userprog/dup2/dup2-complex_PUTFILES += tests/userprog/dup2/sample.txt
tests/userprog/dup2/Make.tests:tests/userprog/dup2/dup2-simple_PUTFILES += tests/userprog/dup2/sample.txt
tests/userprog/dup2/dup2-complex.c:const char *test_name = "dup2-complex";
tests/userprog/dup2/dup2-complex.c:  int fd1, fd2, fd3 = 0x1CE, fd4 = 0x1CE - 0xC0FFEE, fd5, fd6;
tests/userprog/dup2/dup2-complex.c:  CHECK ((fd1 = open ("sample.txt")) > -1, "open \"sample.txt\"");
tests/userprog/dup2/dup2-complex.c:  CHECK ((fd2 = open ("sample.txt")) > -1, "open \"sample.txt\"");
tests/userprog/dup2/dup2-complex.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/dup2/dup2-complex.c:  byte_cnt += (read (fd1, buffer + 15, 30) - 15);
tests/userprog/dup2/dup2-complex.c:  write (fd5, magic, sizeof magic - 1);
tests/userprog/dup2/dup2-complex.c:  byte_cnt += read (fd2, buffer + byte_cnt , sizeof sample - byte_cnt);
tests/userprog/dup2/dup2-complex.ck:# -*- perl -*-
tests/userprog/dup2/dup2-complex.ck:(dup2-complex) open "sample.txt"
tests/userprog/dup2/dup2-complex.ck:(dup2-complex) open "sample.txt"
tests/userprog/dup2/dup2-complex.ck:(dup2-complex) first dup2()
tests/userprog/dup2/dup2-complex.ck:(dup2-complex) Parent success
tests/userprog/dup2/dup2-complex.ck:dup2-complex: exit(0)
tests/userprog/dup2/dup2-simple.c:const char *test_name = "dup2-simple";
tests/userprog/dup2/dup2-simple.c:  CHECK ((fd1 = open ("sample.txt")) > -1, "open \"sample.txt\"");
tests/userprog/dup2/dup2-simple.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/dup2/dup2-simple.c:  byte_cnt += read (fd2, buffer + byte_cnt , sizeof sample - byte_cnt);
tests/userprog/dup2/sample.txt: of Korea and beyond." --KAIST
tests/userprog/dup2/Rubric:1	dup2-simple
tests/userprog/dup2/Rubric:99	dup2-complex
tests/userprog/multi-child-fd.c:  snprintf (child_cmd, sizeof child_cmd, "child-close %d", handle);
tests/userprog/multi-child-fd.c:  if (!(pid = fork("child-close"))){
tests/userprog/multi-child-fd.c:  check_file_handle (handle, "sample.txt", sample, sizeof sample - 1);
tests/userprog/bad-jump2.ck:# -*- perl -*-
tests/userprog/bad-jump2.ck:(bad-jump2) begin
tests/userprog/bad-jump2.ck:bad-jump2: exit(-1)
tests/userprog/read-zero.ck:# -*- perl -*-
tests/userprog/read-zero.ck:(read-zero) begin
tests/userprog/read-zero.ck:(read-zero) open "sample.txt"
tests/userprog/read-zero.ck:(read-zero) end
tests/userprog/read-zero.ck:read-zero: exit(0)
tests/userprog/multi-recurse.ck:# -*- perl -*-
tests/userprog/multi-recurse.ck:(multi-recurse) begin 15
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 14")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 14
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 13")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 13
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 12")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 12
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 11")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 11
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 10")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 10
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 9")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 9
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 8")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 8
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 7")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 7
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 6")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 6
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 5")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 5
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 4")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 4
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 3")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 3
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 2")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 2
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 1")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 1
tests/userprog/multi-recurse.ck:(multi-recurse) exec("multi-recurse 0")
tests/userprog/multi-recurse.ck:(multi-recurse) begin 0
tests/userprog/multi-recurse.ck:(multi-recurse) end 0
tests/userprog/multi-recurse.ck:multi-recurse: exit(0)
tests/userprog/multi-recurse.ck:(multi-recurse) end 1
tests/userprog/multi-recurse.ck:multi-recurse: exit(1)
tests/userprog/multi-recurse.ck:(multi-recurse) end 2
tests/userprog/multi-recurse.ck:multi-recurse: exit(2)
tests/userprog/multi-recurse.ck:(multi-recurse) end 3
tests/userprog/multi-recurse.ck:multi-recurse: exit(3)
tests/userprog/multi-recurse.ck:(multi-recurse) end 4
tests/userprog/multi-recurse.ck:multi-recurse: exit(4)
tests/userprog/multi-recurse.ck:(multi-recurse) end 5
tests/userprog/multi-recurse.ck:multi-recurse: exit(5)
tests/userprog/multi-recurse.ck:(multi-recurse) end 6
tests/userprog/multi-recurse.ck:multi-recurse: exit(6)
tests/userprog/multi-recurse.ck:(multi-recurse) end 7
tests/userprog/multi-recurse.ck:multi-recurse: exit(7)
tests/userprog/multi-recurse.ck:(multi-recurse) end 8
tests/userprog/multi-recurse.ck:multi-recurse: exit(8)
tests/userprog/multi-recurse.ck:(multi-recurse) end 9
tests/userprog/multi-recurse.ck:multi-recurse: exit(9)
tests/userprog/multi-recurse.ck:(multi-recurse) end 10
tests/userprog/multi-recurse.ck:multi-recurse: exit(10)
tests/userprog/multi-recurse.ck:(multi-recurse) end 11
tests/userprog/multi-recurse.ck:multi-recurse: exit(11)
tests/userprog/multi-recurse.ck:(multi-recurse) end 12
tests/userprog/multi-recurse.ck:multi-recurse: exit(12)
tests/userprog/multi-recurse.ck:(multi-recurse) end 13
tests/userprog/multi-recurse.ck:multi-recurse: exit(13)
tests/userprog/multi-recurse.ck:(multi-recurse) end 14
tests/userprog/multi-recurse.ck:multi-recurse: exit(14)
tests/userprog/multi-recurse.ck:(multi-recurse) end 15
tests/userprog/multi-recurse.ck:multi-recurse: exit(15)
tests/userprog/exec-read.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/exec-read.c:  if ((pid = fork ("child-read"))){
tests/userprog/exec-read.c:    byte_cnt = read (handle, buffer + 20, sizeof sample - 21);
tests/userprog/exec-read.c:    if (byte_cnt != sizeof sample - 21)
tests/userprog/exec-read.c:      fail ("read() returned %d instead of %zu", byte_cnt, sizeof sample - 21);
tests/userprog/exec-read.c:    snprintf (cmd_line, sizeof cmd_line, "%s %d", "child-read", handle);
tests/userprog/Make.tests:# -*- makefile -*-
tests/userprog/Make.tests:tests/%.output: PUTFILES = $(filter-out os.dsk, $^)
tests/userprog/Make.tests:tests/threads/%.output: KERNELFLAGS += -threads-tests
tests/userprog/Make.tests:tests/userprog_TESTS = $(addprefix tests/userprog/,args-none		\
tests/userprog/Make.tests:args-single args-multiple args-many args-dbl-space halt exit create-normal		\
tests/userprog/Make.tests:create-empty create-null create-bad-ptr create-long create-exists	\
tests/userprog/Make.tests:create-bound open-normal open-missing open-boundary open-empty		\
tests/userprog/Make.tests:open-null open-bad-ptr open-twice close-normal close-twice close-bad-fd				\
tests/userprog/Make.tests:read-normal read-bad-ptr read-boundary \
tests/userprog/Make.tests:read-zero read-stdout read-bad-fd write-normal write-bad-ptr		\
tests/userprog/Make.tests:write-boundary write-zero write-stdin write-bad-fd fork-once fork-multiple	\
tests/userprog/Make.tests:fork-recursive fork-read fork-close fork-boundary exec-once exec-arg \
tests/userprog/Make.tests:exec-boundary exec-missing exec-bad-ptr exec-read wait-simple wait-twice		\
tests/userprog/Make.tests:wait-killed wait-bad-pid multi-recurse multi-child-fd       \
tests/userprog/Make.tests:rox-simple rox-child rox-multichild bad-read bad-write bad-read2 bad-write2  \
tests/userprog/Make.tests:bad-jump bad-jump2)
tests/userprog/Make.tests:tests/userprog/,child-simple child-args child-bad child-close child-rox child-read)
tests/userprog/Make.tests:tests/userprog/args-none_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/args-single_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/args-multiple_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/args-many_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/args-dbl-space_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/bad-read_SRC = tests/userprog/bad-read.c tests/main.c
tests/userprog/Make.tests:tests/userprog/bad-write_SRC = tests/userprog/bad-write.c tests/main.c
tests/userprog/Make.tests:tests/userprog/bad-jump_SRC = tests/userprog/bad-jump.c tests/main.c
tests/userprog/Make.tests:tests/userprog/bad-read2_SRC = tests/userprog/bad-read2.c tests/main.c
tests/userprog/Make.tests:tests/userprog/bad-write2_SRC = tests/userprog/bad-write2.c tests/main.c
tests/userprog/Make.tests:tests/userprog/bad-jump2_SRC = tests/userprog/bad-jump2.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-normal_SRC = tests/userprog/create-normal.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-empty_SRC = tests/userprog/create-empty.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-null_SRC = tests/userprog/create-null.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-bad-ptr_SRC = tests/userprog/create-bad-ptr.c	\
tests/userprog/Make.tests:tests/userprog/create-long_SRC = tests/userprog/create-long.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-exists_SRC = tests/userprog/create-exists.c tests/main.c
tests/userprog/Make.tests:tests/userprog/create-bound_SRC = tests/userprog/create-bound.c	\
tests/userprog/Make.tests:tests/userprog/open-normal_SRC = tests/userprog/open-normal.c tests/main.c
tests/userprog/Make.tests:tests/userprog/open-missing_SRC = tests/userprog/open-missing.c tests/main.c
tests/userprog/Make.tests:tests/userprog/open-boundary_SRC = tests/userprog/open-boundary.c	\
tests/userprog/Make.tests:tests/userprog/open-empty_SRC = tests/userprog/open-empty.c tests/main.c
tests/userprog/Make.tests:tests/userprog/open-null_SRC = tests/userprog/open-null.c tests/main.c
tests/userprog/Make.tests:tests/userprog/open-bad-ptr_SRC = tests/userprog/open-bad-ptr.c tests/main.c
tests/userprog/Make.tests:tests/userprog/open-twice_SRC = tests/userprog/open-twice.c tests/main.c
tests/userprog/Make.tests:tests/userprog/close-normal_SRC = tests/userprog/close-normal.c tests/main.c
tests/userprog/Make.tests:tests/userprog/close-twice_SRC = tests/userprog/close-twice.c tests/main.c
tests/userprog/Make.tests:tests/userprog/close-bad-fd_SRC = tests/userprog/close-bad-fd.c tests/main.c
tests/userprog/Make.tests:tests/userprog/read-normal_SRC = tests/userprog/read-normal.c tests/main.c
tests/userprog/Make.tests:tests/userprog/read-bad-ptr_SRC = tests/userprog/read-bad-ptr.c tests/main.c
tests/userprog/Make.tests:tests/userprog/read-boundary_SRC = tests/userprog/read-boundary.c	\
tests/userprog/Make.tests:tests/userprog/read-zero_SRC = tests/userprog/read-zero.c tests/main.c
tests/userprog/Make.tests:tests/userprog/read-stdout_SRC = tests/userprog/read-stdout.c tests/main.c
tests/userprog/Make.tests:tests/userprog/read-bad-fd_SRC = tests/userprog/read-bad-fd.c tests/main.c
tests/userprog/Make.tests:tests/userprog/write-normal_SRC = tests/userprog/write-normal.c tests/main.c
tests/userprog/Make.tests:tests/userprog/write-bad-ptr_SRC = tests/userprog/write-bad-ptr.c tests/main.c
tests/userprog/Make.tests:tests/userprog/write-boundary_SRC = tests/userprog/write-boundary.c	\
tests/userprog/Make.tests:tests/userprog/write-zero_SRC = tests/userprog/write-zero.c tests/main.c
tests/userprog/Make.tests:tests/userprog/write-stdin_SRC = tests/userprog/write-stdin.c tests/main.c
tests/userprog/Make.tests:tests/userprog/write-bad-fd_SRC = tests/userprog/write-bad-fd.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-once_SRC = tests/userprog/exec-once.c tests/main.c
tests/userprog/Make.tests:tests/userprog/fork-read_SRC = tests/userprog/fork-read.c 	\
tests/userprog/Make.tests:tests/userprog/fork-close_SRC = tests/userprog/fork-close.c 	\
tests/userprog/Make.tests:tests/userprog/fork-boundary_SRC = tests/userprog/fork-boundary.c	\
tests/userprog/Make.tests:tests/userprog/fork-once_SRC = tests/userprog/fork-once.c tests/main.c
tests/userprog/Make.tests:tests/userprog/fork-recursive_SRC = tests/userprog/fork-recursive.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-arg_SRC = tests/userprog/exec-arg.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-boundary_SRC = tests/userprog/exec-boundary.c	\
tests/userprog/Make.tests:tests/userprog/fork-multiple_SRC = tests/userprog/fork-multiple.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-missing_SRC = tests/userprog/exec-missing.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-bad-ptr_SRC = tests/userprog/exec-bad-ptr.c tests/main.c
tests/userprog/Make.tests:tests/userprog/exec-read_SRC = tests/userprog/exec-read.c 	\
tests/userprog/Make.tests:tests/userprog/wait-simple_SRC = tests/userprog/wait-simple.c tests/main.c
tests/userprog/Make.tests:tests/userprog/wait-twice_SRC = tests/userprog/wait-twice.c tests/main.c
tests/userprog/Make.tests:tests/userprog/wait-killed_SRC = tests/userprog/wait-killed.c tests/main.c
tests/userprog/Make.tests:tests/userprog/wait-bad-pid_SRC = tests/userprog/wait-bad-pid.c tests/main.c
tests/userprog/Make.tests:tests/userprog/multi-recurse_SRC = tests/userprog/multi-recurse.c
tests/userprog/Make.tests:tests/userprog/multi-child-fd_SRC = tests/userprog/multi-child-fd.c	\
tests/userprog/Make.tests:tests/userprog/rox-simple_SRC = tests/userprog/rox-simple.c tests/main.c
tests/userprog/Make.tests:tests/userprog/rox-child_SRC = tests/userprog/rox-child.c tests/main.c
tests/userprog/Make.tests:tests/userprog/rox-multichild_SRC = tests/userprog/rox-multichild.c	\
tests/userprog/Make.tests:tests/userprog/child-simple_SRC = tests/userprog/child-simple.c
tests/userprog/Make.tests:tests/userprog/child-args_SRC = tests/userprog/args.c
tests/userprog/Make.tests:tests/userprog/child-bad_SRC = tests/userprog/child-bad.c tests/main.c
tests/userprog/Make.tests:tests/userprog/child-close_SRC = tests/userprog/child-close.c
tests/userprog/Make.tests:tests/userprog/child-rox_SRC = tests/userprog/child-rox.c
tests/userprog/Make.tests:tests/userprog/child-read_SRC = tests/userprog/child-read.c \
tests/userprog/Make.tests:tests/userprog/args-single_ARGS = onearg
tests/userprog/Make.tests:tests/userprog/args-multiple_ARGS = some arguments for you!
tests/userprog/Make.tests:tests/userprog/args-many_ARGS = a b c d e f g h i j k l m n o p q r s t u v
tests/userprog/Make.tests:tests/userprog/args-dbl-space_ARGS = two  spaces!
tests/userprog/Make.tests:tests/userprog/multi-recurse_ARGS = 15
tests/userprog/Make.tests:tests/userprog/open-normal_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/open-boundary_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/open-twice_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/close-normal_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/close-twice_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/read-normal_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/read-bad-ptr_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/read-boundary_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/read-zero_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/write-normal_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/write-bad-ptr_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/fork-read_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/fork-close_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/exec-read_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/write-boundary_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/write-zero_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/multi-child-fd_PUTFILES += tests/userprog/sample.txt
tests/userprog/Make.tests:tests/userprog/exec-boundary_PUTFILES += tests/userprog/child-simple
tests/userprog/Make.tests:tests/userprog/exec-once_PUTFILES += tests/userprog/child-simple
tests/userprog/Make.tests:tests/userprog/wait-simple_PUTFILES += tests/userprog/child-simple
tests/userprog/Make.tests:tests/userprog/wait-twice_PUTFILES += tests/userprog/child-simple
tests/userprog/Make.tests:tests/userprog/exec-arg_PUTFILES += tests/userprog/child-args
tests/userprog/Make.tests:tests/userprog/multi-child-fd_PUTFILES += tests/userprog/child-close
tests/userprog/Make.tests:tests/userprog/wait-killed_PUTFILES += tests/userprog/child-bad
tests/userprog/Make.tests:tests/userprog/rox-child_PUTFILES += tests/userprog/child-rox
tests/userprog/Make.tests:tests/userprog/rox-multichild_PUTFILES += tests/userprog/child-rox
tests/userprog/Make.tests:tests/userprog/exec-read_PUTFILES += tests/userprog/child-read
tests/userprog/halt.ck:# -*- perl -*-
tests/userprog/halt.ck:fail "found 'fail' message--halt didn't really halt\n"
tests/userprog/open-bad-ptr.ck:# -*- perl -*-
tests/userprog/open-bad-ptr.ck:(open-bad-ptr) begin
tests/userprog/open-bad-ptr.ck:(open-bad-ptr) end
tests/userprog/open-bad-ptr.ck:open-bad-ptr: exit(0)
tests/userprog/open-bad-ptr.ck:(open-bad-ptr) begin
tests/userprog/open-bad-ptr.ck:open-bad-ptr: exit(-1)
tests/userprog/wait-killed.c:  if ((child = fork ("child-bad"))){
tests/userprog/wait-killed.c:    exec ("child-bad");
tests/userprog/write-stdin.ck:# -*- perl -*-
tests/userprog/write-stdin.ck:(write-stdin) begin
tests/userprog/write-stdin.ck:(write-stdin) end
tests/userprog/write-stdin.ck:write-stdin: exit(0)
tests/userprog/write-stdin.ck:(write-stdin) begin
tests/userprog/write-stdin.ck:write-stdin: exit(-1)
tests/userprog/open-bad-ptr.c:   The process must be terminated with -1 exit code. */
tests/userprog/open-bad-ptr.c:  fail ("should have called exit(-1)");
tests/userprog/create-null.c:   The process must be terminated with exit code -1. */
tests/userprog/exec-boundary.c:  pid_t pid = fork ("child-simple");
tests/userprog/exec-boundary.c:    exec (copy_string_across_boundary ("child-simple"));
tests/userprog/create-bad-ptr.ck:# -*- perl -*-
tests/userprog/create-bad-ptr.ck:(create-bad-ptr) begin
tests/userprog/create-bad-ptr.ck:create-bad-ptr: exit(-1)
tests/userprog/exec-bad-ptr.ck:# -*- perl -*-
tests/userprog/exec-bad-ptr.ck:(exec-bad-ptr) begin
tests/userprog/exec-bad-ptr.ck:(exec-bad-ptr) end
tests/userprog/exec-bad-ptr.ck:exec-bad-ptr: exit(0)
tests/userprog/exec-bad-ptr.ck:(exec-bad-ptr) begin
tests/userprog/exec-bad-ptr.ck:exec-bad-ptr: exit(-1)
tests/userprog/close-normal.ck:# -*- perl -*-
tests/userprog/close-normal.ck:(close-normal) begin
tests/userprog/close-normal.ck:(close-normal) open "sample.txt"
tests/userprog/close-normal.ck:(close-normal) close "sample.txt"
tests/userprog/close-normal.ck:(close-normal) end
tests/userprog/close-normal.ck:close-normal: exit(0)
tests/userprog/bad-write2.ck:# -*- perl -*-
tests/userprog/bad-write2.ck:(bad-write2) begin
tests/userprog/bad-write2.ck:bad-write2: exit(-1)
tests/userprog/write-boundary.c:  byte_cnt = write (handle, sample_p, sizeof sample - 1);
tests/userprog/write-boundary.c:  if (byte_cnt != sizeof sample - 1)
tests/userprog/write-boundary.c:    fail ("write() returned %d instead of %zu", byte_cnt, sizeof sample - 1);
tests/userprog/no-vm/Make.tests:# -*- makefile -*-
tests/userprog/no-vm/Make.tests:tests/userprog/no-vm_TESTS = tests/userprog/no-vm/multi-oom
tests/userprog/no-vm/Make.tests:tests/userprog/no-vm_PROGS = $(tests/userprog/no-vm_TESTS)
tests/userprog/no-vm/Make.tests:tests/userprog/no-vm/multi-oom_SRC = tests/userprog/no-vm/multi-oom.c	\
tests/userprog/no-vm/Make.tests:tests/userprog/no-vm/multi-oom.output: TIMEOUT = 600 -m 20
tests/userprog/no-vm/multi-oom.c:   return -1, not a valid PID.
tests/userprog/no-vm/multi-oom.c:const char *test_name = "multi-oom";
tests/userprog/no-vm/multi-oom.c:	 A low-memory condition in open() should not lead to the
tests/userprog/no-vm/multi-oom.c:		if (dup2(random_ulong () % fd, fd+fdmax) == -1)
tests/userprog/no-vm/multi-oom.c:			if (open (test_name) == -1)
tests/userprog/no-vm/multi-oom.c:		if (open (test_name) == -1)
tests/userprog/no-vm/multi-oom.c:	  exit (-1);
tests/userprog/no-vm/multi-oom.c:      if (pid > 0 && wait (pid) != -1) {
tests/userprog/no-vm/multi-oom.c:        fail ("crashed child should return -1.");
tests/userprog/no-vm/Rubric:1	multi-oom
tests/userprog/no-vm/multi-oom.ck:# -*- perl -*-
tests/userprog/no-vm/multi-oom.ck:(multi-oom) begin
tests/userprog/no-vm/multi-oom.ck:(multi-oom) Spawned at least 10 children.
tests/userprog/no-vm/multi-oom.ck:(multi-oom) success. Program forked 10 iterations.
tests/userprog/no-vm/multi-oom.ck:(multi-oom) end
tests/userprog/close-bad-fd.c:   or terminate with exit code -1. */
tests/userprog/wait-twice.c:   The second wait call must return -1 immediately. */
tests/userprog/wait-twice.c:  if ((child = fork ("child-simple"))){
tests/userprog/wait-twice.c:    exec ("child-simple");
tests/userprog/exec-missing.c:   The exec system call must return -1. */
tests/userprog/exec-missing.c:  msg ("exec(\"no-such-file\"): %d", exec ("no-such-file"));
tests/userprog/args-none.ck:# -*- perl -*-
tests/userprog/args-none.ck:(args) argv[0] = 'args-none'
tests/userprog/args-none.ck:args-none: exit(0)
tests/userprog/read-bad-ptr.ck:# -*- perl -*-
tests/userprog/read-bad-ptr.ck:(read-bad-ptr) begin
tests/userprog/read-bad-ptr.ck:(read-bad-ptr) open "sample.txt"
tests/userprog/read-bad-ptr.ck:(read-bad-ptr) end
tests/userprog/read-bad-ptr.ck:read-bad-ptr: exit(0)
tests/userprog/read-bad-ptr.ck:(read-bad-ptr) begin
tests/userprog/read-bad-ptr.ck:(read-bad-ptr) open "sample.txt"
tests/userprog/read-bad-ptr.ck:read-bad-ptr: exit(-1)
tests/userprog/null.ck:# -*- perl -*-
tests/userprog/read-normal.ck:# -*- perl -*-
tests/userprog/read-normal.ck:(read-normal) begin
tests/userprog/read-normal.ck:(read-normal) open "sample.txt" for verification
tests/userprog/read-normal.ck:(read-normal) verified contents of "sample.txt"
tests/userprog/read-normal.ck:(read-normal) close "sample.txt"
tests/userprog/read-normal.ck:(read-normal) end
tests/userprog/read-normal.ck:read-normal: exit(0)
tests/userprog/bad-read.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-read.c:  msg ("Congratulations - you have successfully dereferenced NULL: %d", 
tests/userprog/bad-read.c:  fail ("should have exited with -1");
tests/userprog/write-zero.ck:# -*- perl -*-
tests/userprog/write-zero.ck:(write-zero) begin
tests/userprog/write-zero.ck:(write-zero) open "sample.txt"
tests/userprog/write-zero.ck:(write-zero) end
tests/userprog/write-zero.ck:write-zero: exit(0)
tests/userprog/fork-boundary.ck:# -*- perl -*-
tests/userprog/fork-boundary.ck:(fork-boundary) begin
tests/userprog/fork-boundary.ck:(fork-boundary) child run
tests/userprog/fork-boundary.ck:child-simple: exit(54)
tests/userprog/fork-boundary.ck:(fork-boundary) fork
tests/userprog/fork-boundary.ck:(fork-boundary) wait
tests/userprog/fork-boundary.ck:(fork-boundary) end
tests/userprog/fork-boundary.ck:fork-boundary: exit(0)
tests/userprog/exec-once.c:  exec ("child-simple");
tests/userprog/fork-close.c:    buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/fork-close.c:    byte_cnt = read (handle, buffer, sizeof sample - 1);
tests/userprog/fork-close.c:    if (byte_cnt != sizeof sample - 1)
tests/userprog/fork-close.c:      fail ("read() returned %d instead of %zu", byte_cnt, sizeof sample - 1);
tests/userprog/child-simple.c:/* Child process run by exec-multiple, exec-one, wait-simple, and
tests/userprog/child-simple.c:   wait-twice tests.
tests/userprog/child-simple.c:const char *test_name = "child-simple";
tests/userprog/fork-read.ck:# -*- perl -*-
tests/userprog/fork-read.ck:(fork-read) begin
tests/userprog/fork-read.ck:(fork-read) open "sample.txt"
tests/userprog/fork-read.ck:(fork-read) child run
tests/userprog/fork-read.ck:(fork-read) Child: pintos is funny!
tests/userprog/fork-read.ck:(fork-read) end
tests/userprog/fork-read.ck:(fork-read) Parent success
tests/userprog/fork-read.ck:(fork-read) end
tests/userprog/fork-read.ck:fork-read: exit(0)
tests/userprog/fork-read.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/fork-read.c:    byte_cnt = read (handle, buffer + 20, sizeof sample - 21);
tests/userprog/fork-read.c:    if (byte_cnt != sizeof sample - 21)
tests/userprog/fork-read.c:      fail ("read() returned %d instead of %zu", byte_cnt, sizeof sample - 21);
tests/userprog/fork-read.c:    byte_cnt = read (handle, buffer + 20, sizeof sample - 21);
tests/userprog/fork-read.c:    if (byte_cnt != sizeof sample - 21)
tests/userprog/fork-read.c:      fail ("read() returned %d instead of %zu", byte_cnt, sizeof sample - 21);
tests/userprog/exec-boundary.ck:# -*- perl -*-
tests/userprog/exec-boundary.ck:(exec-boundary) begin
tests/userprog/exec-boundary.ck:(child-simple) run
tests/userprog/exec-boundary.ck:child-simple: exit(81)
tests/userprog/exec-boundary.ck:(exec-boundary) fork
tests/userprog/exec-boundary.ck:(exec-boundary) wait
tests/userprog/exec-boundary.ck:(exec-boundary) end
tests/userprog/exec-boundary.ck:exec-boundary: exit(0)
tests/userprog/wait-killed.ck:# -*- perl -*-
tests/userprog/wait-killed.ck:(wait-killed) begin
tests/userprog/wait-killed.ck:(child-bad) begin
tests/userprog/wait-killed.ck:child-bad: exit(-1)
tests/userprog/wait-killed.ck:(wait-killed) wait(exec()) = -1
tests/userprog/wait-killed.ck:(wait-killed) end
tests/userprog/wait-killed.ck:wait-killed: exit(0)
tests/userprog/wait-killed.ck:(wait-killed) begin
tests/userprog/wait-killed.ck:(child-bad) begin
tests/userprog/wait-killed.ck:child-bad: exit(-1)
tests/userprog/wait-killed.ck:(wait-killed) wait(exec()) = -1
tests/userprog/wait-killed.ck:(wait-killed) end
tests/userprog/wait-killed.ck:wait-killed: exit(0)
tests/userprog/exec-missing.ck:# -*- perl -*-
tests/userprog/exec-missing.ck:(exec-missing) begin
tests/userprog/exec-missing.ck:load: no-such-file: open failed
tests/userprog/exec-missing.ck:exec-missing: exit(-1)
tests/userprog/exec-missing.ck:(exec-missing) begin
tests/userprog/exec-missing.ck:(exec-missing) exec("no-such-file"): -1
tests/userprog/exec-missing.ck:exec-missing: exit(-1)
tests/userprog/sample.txt: of Korea and beyond." --KAIST
tests/userprog/create-long.c:  name[sizeof name - 1] = '\0';
tests/userprog/write-bad-fd.c:   exit code -1. */
tests/userprog/write-bad-fd.c:  write (-5, &buf, 1);
tests/userprog/write-bad-fd.c:  write (-8192, &buf, 1);
tests/userprog/write-bad-fd.c:  write (INT_MAX - 1, &buf, 1);
tests/userprog/child-read.c:/* Child process run by multi-child-fd test.
tests/userprog/child-read.c:   command-line argument. Since KAIST new Pintos inherits opened
tests/userprog/child-read.c:const char *test_name = "child-read";
tests/userprog/child-read.c:    fail ("bad command-line arguments");
tests/userprog/child-read.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/child-read.c:  CHECK ((byte_cnt = read (handle1, buffer + 20, sizeof sample - 21))
tests/userprog/child-read.c:                      == sizeof sample -21,
tests/userprog/create-null.ck:# -*- perl -*-
tests/userprog/create-null.ck:(create-null) begin
tests/userprog/create-null.ck:create-null: exit(-1)
tests/userprog/fork-recursive.ck:# -*- perl -*-
tests/userprog/fork-recursive.ck:(fork-recursive) begin
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) child run
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 10
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 10
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 9
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 8
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 7
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 6
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 5
tests/userprog/fork-recursive.ck:(fork-recursive) Parent: child exit status is 4
tests/userprog/fork-recursive.ck:(fork-recursive) end
tests/userprog/fork-recursive.ck:fork-recursive: exit(0)
tests/userprog/create-normal.ck:# -*- perl -*-
tests/userprog/create-normal.ck:(create-normal) begin
tests/userprog/create-normal.ck:(create-normal) create quux.dat
tests/userprog/create-normal.ck:(create-normal) end
tests/userprog/create-normal.ck:create-normal: exit(0)
tests/userprog/multi-child-fd.ck:# -*- perl -*-
tests/userprog/multi-child-fd.ck:(multi-child-fd) begin
tests/userprog/multi-child-fd.ck:(multi-child-fd) open "sample.txt"
tests/userprog/multi-child-fd.ck:(child-close) begin
tests/userprog/multi-child-fd.ck:(child-close) verified contents of "sample.txt"
tests/userprog/multi-child-fd.ck:(child-close) end
tests/userprog/multi-child-fd.ck:child-close: exit(0)
tests/userprog/multi-child-fd.ck:(multi-child-fd) wait(exec()) = 0
tests/userprog/multi-child-fd.ck:(multi-child-fd) verified contents of "sample.txt"
tests/userprog/multi-child-fd.ck:(multi-child-fd) end
tests/userprog/multi-child-fd.ck:multi-child-fd: exit(0)
tests/userprog/rox-child.inc:/* -*- c -*- */
tests/userprog/rox-child.inc:  const char *child_cmd = "child-rox " CHILD_CNT;
tests/userprog/rox-child.inc:  /* Open child-rox, read from it, write back same data. */
tests/userprog/rox-child.inc:  CHECK ((handle = open ("child-rox")) > 1, "open \"child-rox\"");
tests/userprog/rox-child.inc:         "read \"child-rox\"");
tests/userprog/rox-child.inc:         "write \"child-rox\"");
tests/userprog/rox-child.inc:  /* Execute child-rox and wait for it. */
tests/userprog/rox-child.inc:  if (!(child = fork ("child-rox"))){
tests/userprog/rox-child.inc:  /* Write to child-rox again. */
tests/userprog/rox-child.inc:         "write \"child-rox\"");
tests/userprog/open-empty.ck:# -*- perl -*-
tests/userprog/open-empty.ck:(open-empty) begin
tests/userprog/open-empty.ck:(open-empty) end
tests/userprog/open-empty.ck:open-empty: exit(0)
tests/userprog/open-null.ck:# -*- perl -*-
tests/userprog/open-null.ck:(open-null) begin
tests/userprog/open-null.ck:(open-null) end
tests/userprog/open-null.ck:open-null: exit(0)
tests/userprog/open-null.ck:(open-null) begin
tests/userprog/open-null.ck:open-null: exit(-1)
tests/userprog/bad-read2.ck:# -*- perl -*-
tests/userprog/bad-read2.ck:(bad-read2) begin
tests/userprog/bad-read2.ck:bad-read2: exit(-1)
tests/userprog/bad-read.ck:# -*- perl -*-
tests/userprog/bad-read.ck:(bad-read) begin
tests/userprog/bad-read.ck:bad-read: exit(-1)
tests/userprog/bad-write.ck:# -*- perl -*-
tests/userprog/bad-write.ck:(bad-write) begin
tests/userprog/bad-write.ck:bad-write: exit(-1)
tests/userprog/create-bad-ptr.c:   -1. */
tests/userprog/exec-arg.c:  exec ("child-args childarg");
tests/userprog/boundary.c:  if (p - dst < 2048)
tests/userprog/boundary.c:  p -= strlen (src) < 4096 ? strlen (src) / 2 : 4096;
tests/userprog/wait-simple.ck:# -*- perl -*-
tests/userprog/wait-simple.ck:(wait-simple) begin
tests/userprog/wait-simple.ck:(child-simple) run
tests/userprog/wait-simple.ck:child-simple: exit(81)
tests/userprog/wait-simple.ck:(wait-simple) wait(exec()) = 81
tests/userprog/wait-simple.ck:(wait-simple) end
tests/userprog/wait-simple.ck:wait-simple: exit(0)
tests/userprog/fork-once.ck:# -*- perl -*-
tests/userprog/fork-once.ck:(fork-once) begin
tests/userprog/fork-once.ck:(fork-once) child run
tests/userprog/fork-once.ck:(fork-once) Parent: child exit status is 81
tests/userprog/fork-once.ck:(fork-once) end
tests/userprog/fork-once.ck:fork-once: exit(0)
tests/userprog/Rubric.functionality:- Test argument passing on Pintos command line.
tests/userprog/Rubric.functionality:3	args-none
tests/userprog/Rubric.functionality:3	args-single
tests/userprog/Rubric.functionality:3	args-multiple
tests/userprog/Rubric.functionality:3	args-many
tests/userprog/Rubric.functionality:3	args-dbl-space
tests/userprog/Rubric.functionality:- Test "create" system call.
tests/userprog/Rubric.functionality:3	create-empty
tests/userprog/Rubric.functionality:3	create-long
tests/userprog/Rubric.functionality:3	create-normal
tests/userprog/Rubric.functionality:3	create-exists
tests/userprog/Rubric.functionality:- Test "open" system call.
tests/userprog/Rubric.functionality:3	open-missing
tests/userprog/Rubric.functionality:3	open-normal
tests/userprog/Rubric.functionality:3	open-twice
tests/userprog/Rubric.functionality:- Test "read" system call.
tests/userprog/Rubric.functionality:3	read-normal
tests/userprog/Rubric.functionality:3	read-zero
tests/userprog/Rubric.functionality:- Test "write" system call.
tests/userprog/Rubric.functionality:3	write-normal
tests/userprog/Rubric.functionality:3	write-zero
tests/userprog/Rubric.functionality:- Test "close" system call.
tests/userprog/Rubric.functionality:3	close-normal
tests/userprog/Rubric.functionality:- Test "fork" system call.
tests/userprog/Rubric.functionality:3	fork-once
tests/userprog/Rubric.functionality:3	fork-multiple
tests/userprog/Rubric.functionality:3	fork-close
tests/userprog/Rubric.functionality:8	fork-read
tests/userprog/Rubric.functionality:- Test "exec" system call.
tests/userprog/Rubric.functionality:3	exec-once
tests/userprog/Rubric.functionality:3	exec-arg
tests/userprog/Rubric.functionality:10	exec-read
tests/userprog/Rubric.functionality:- Test "wait" system call.
tests/userprog/Rubric.functionality:5	wait-simple
tests/userprog/Rubric.functionality:5	wait-twice
tests/userprog/Rubric.functionality:- Test "exit" system call.
tests/userprog/Rubric.functionality:- Test "halt" system call.
tests/userprog/Rubric.functionality:- Test recursive execution of user programs.
tests/userprog/Rubric.functionality:5	fork-recursive
tests/userprog/Rubric.functionality:15	multi-recurse
tests/userprog/Rubric.functionality:- Test read-only executable feature.
tests/userprog/Rubric.functionality:3	rox-simple
tests/userprog/Rubric.functionality:3	rox-child
tests/userprog/Rubric.functionality:3	rox-multichild
tests/userprog/read-stdout.c:   which may just fail or terminate the process with -1 exit
tests/userprog/rox-simple.ck:# -*- perl -*-
tests/userprog/rox-simple.ck:(rox-simple) begin
tests/userprog/rox-simple.ck:(rox-simple) open "rox-simple"
tests/userprog/rox-simple.ck:(rox-simple) read "rox-simple"
tests/userprog/rox-simple.ck:(rox-simple) try to write "rox-simple"
tests/userprog/rox-simple.ck:(rox-simple) end
tests/userprog/rox-simple.ck:rox-simple: exit(0)
tests/userprog/rox-child.c:#include "tests/userprog/rox-child.inc"
tests/userprog/wait-twice.ck:# -*- perl -*-
tests/userprog/wait-twice.ck:(wait-twice) begin
tests/userprog/wait-twice.ck:(child-simple) run
tests/userprog/wait-twice.ck:child-simple: exit(81)
tests/userprog/wait-twice.ck:(wait-twice) wait(exec()) = 81
tests/userprog/wait-twice.ck:(wait-twice) wait(exec()) = -1
tests/userprog/wait-twice.ck:(wait-twice) end
tests/userprog/wait-twice.ck:wait-twice: exit(0)
tests/userprog/bad-write.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-write.c:  fail ("should have exited with -1");
tests/userprog/exec-read.ck:# -*- perl -*-
tests/userprog/exec-read.ck:(exec-read) begin
tests/userprog/exec-read.ck:(exec-read) open "sample.txt"
tests/userprog/exec-read.ck:(exec-read) read "sample.txt" first 20 bytes
tests/userprog/exec-read.ck:(child-read) begin
tests/userprog/exec-read.ck:(child-read) open "sample.txt"
tests/userprog/exec-read.ck:(child-read) read "sample.txt" first 20 bytes
tests/userprog/exec-read.ck:(child-read) read "sample.txt" remainders
tests/userprog/exec-read.ck:(child-read) Child success
tests/userprog/exec-read.ck:(child-read) end
tests/userprog/exec-read.ck:child-read: exit(0)
tests/userprog/exec-read.ck:(exec-read) Parent success
tests/userprog/exec-read.ck:(exec-read) end
tests/userprog/exec-read.ck:exec-read: exit(0)
tests/userprog/write-normal.ck:# -*- perl -*-
tests/userprog/write-normal.ck:(write-normal) begin
tests/userprog/write-normal.ck:(write-normal) create "test.txt"
tests/userprog/write-normal.ck:(write-normal) open "test.txt"
tests/userprog/write-normal.ck:(write-normal) end
tests/userprog/write-normal.ck:write-normal: exit(0)
tests/userprog/open-missing.ck:# -*- perl -*-
tests/userprog/open-missing.ck:(open-missing) begin
tests/userprog/open-missing.ck:(open-missing) end
tests/userprog/open-missing.ck:open-missing: exit(0)
tests/userprog/bad-write2.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-write2.c:  fail ("should have exited with -1");
tests/userprog/read-bad-ptr.c:   The process must be terminated with -1 exit code. */
tests/userprog/write-bad-ptr.ck:# -*- perl -*-
tests/userprog/write-bad-ptr.ck:(write-bad-ptr) begin
tests/userprog/write-bad-ptr.ck:(write-bad-ptr) open "sample.txt"
tests/userprog/write-bad-ptr.ck:(write-bad-ptr) end
tests/userprog/write-bad-ptr.ck:write-bad-ptr: exit(0)
tests/userprog/write-bad-ptr.ck:(write-bad-ptr) begin
tests/userprog/write-bad-ptr.ck:(write-bad-ptr) open "sample.txt"
tests/userprog/write-bad-ptr.ck:write-bad-ptr: exit(-1)
tests/userprog/args-multiple.ck:# -*- perl -*-
tests/userprog/args-multiple.ck:(args) argv[0] = 'args-multiple'
tests/userprog/args-multiple.ck:args-multiple: exit(0)
tests/userprog/child-rox.c:/* Child process run by rox-child and rox-multichild tests.
tests/userprog/child-rox.c:   first command-line argument. */
tests/userprog/child-rox.c:const char *test_name = "child-rox";
tests/userprog/child-rox.c:  CHECK ((handle = open ("child-rox")) > 1, "open \"child-rox\"");
tests/userprog/child-rox.c:         "try to write \"child-rox\"");
tests/userprog/child-rox.c:    fail ("bad command-line arguments");
tests/userprog/child-rox.c:      snprintf (cmd, sizeof cmd, "child-rox %d", atoi (argv[1]) - 1);
tests/userprog/child-rox.c:      if (!(child = fork ("child-rox"))){
tests/userprog/child-rox.c:      CHECK (wait (child) == 12, "wait for \"child-rox\"");
tests/userprog/bad-jump.ck:# -*- perl -*-
tests/userprog/bad-jump.ck:(bad-jump) begin
tests/userprog/bad-jump.ck:bad-jump: exit(-1)
tests/userprog/wait-bad-pid.ck:# -*- perl -*-
tests/userprog/wait-bad-pid.ck:(wait-bad-pid) begin
tests/userprog/wait-bad-pid.ck:(wait-bad-pid) end
tests/userprog/wait-bad-pid.ck:wait-bad-pid: exit(0)
tests/userprog/wait-bad-pid.ck:(wait-bad-pid) begin
tests/userprog/wait-bad-pid.ck:wait-bad-pid: exit(-1)
tests/userprog/exec-once.ck:# -*- perl -*-
tests/userprog/exec-once.ck:(exec-once) begin
tests/userprog/exec-once.ck:(exec-once) I'm your father
tests/userprog/exec-once.ck:(child-simple) run
tests/userprog/exec-once.ck:exec-once: exit(81)
tests/userprog/rox-child.ck:# -*- perl -*-
tests/userprog/rox-child.ck:(rox-child) begin
tests/userprog/rox-child.ck:(rox-child) open "child-rox"
tests/userprog/rox-child.ck:(rox-child) read "child-rox"
tests/userprog/rox-child.ck:(rox-child) write "child-rox"
tests/userprog/rox-child.ck:(rox-child) exec "child-rox 1"
tests/userprog/rox-child.ck:(child-rox) begin
tests/userprog/rox-child.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-child.ck:(child-rox) try to write "child-rox"
tests/userprog/rox-child.ck:(child-rox) end
tests/userprog/rox-child.ck:child-rox: exit(12)
tests/userprog/rox-child.ck:(rox-child) write "child-rox"
tests/userprog/rox-child.ck:(rox-child) end
tests/userprog/rox-child.ck:rox-child: exit(0)
tests/userprog/args-dbl-space.ck:# -*- perl -*-
tests/userprog/args-dbl-space.ck:(args) argv[0] = 'args-dbl-space'
tests/userprog/args-dbl-space.ck:args-dbl-space: exit(0)
tests/userprog/fork-multiple.ck:# -*- perl -*-
tests/userprog/fork-multiple.ck:(fork-multiple) begin
tests/userprog/fork-multiple.ck:(fork-multiple) child run
tests/userprog/fork-multiple.ck:(fork-multiple) Parent: child exit status is 4
tests/userprog/fork-multiple.ck:(fork-multiple) child run
tests/userprog/fork-multiple.ck:(fork-multiple) Parent: child exit status is 5
tests/userprog/fork-multiple.ck:(fork-multiple) child run
tests/userprog/fork-multiple.ck:(fork-multiple) Parent: child exit status is 6
tests/userprog/fork-multiple.ck:(fork-multiple) child run
tests/userprog/fork-multiple.ck:(fork-multiple) Parent: child exit status is 7
tests/userprog/fork-multiple.ck:(fork-multiple) end
tests/userprog/fork-multiple.ck:fork-multiple: exit(0)
tests/userprog/args.c:/* Prints the command-line arguments.
tests/userprog/args.c:   This program is used for all of the args-* tests.  Grading is
tests/userprog/args.c:   done differently for each of the args-* tests based on the
tests/userprog/args.c:    msg ("argv and stack must be word-aligned, actually %p", argv);
tests/userprog/close-bad-fd.ck:# -*- perl -*-
tests/userprog/close-bad-fd.ck:(close-bad-fd) begin
tests/userprog/close-bad-fd.ck:(close-bad-fd) end
tests/userprog/close-bad-fd.ck:close-bad-fd: exit(0)
tests/userprog/close-bad-fd.ck:(close-bad-fd) begin
tests/userprog/close-bad-fd.ck:close-bad-fd: exit(-1)
tests/userprog/read-normal.c:  check_file ("sample.txt", sample, sizeof sample - 1);
tests/userprog/multi-recurse.c:   first command-line argument. */
tests/userprog/multi-recurse.c:const char *test_name = "multi-recurse";
tests/userprog/multi-recurse.c:      snprintf (child_cmd, sizeof child_cmd, "multi-recurse %d", n - 1);
tests/userprog/multi-recurse.c:      if (!(child_pid = fork ("multi-recurse"))){
tests/userprog/multi-recurse.c:      if (code != n - 1)
tests/userprog/open-normal.ck:# -*- perl -*-
tests/userprog/open-normal.ck:(open-normal) begin
tests/userprog/open-normal.ck:(open-normal) end
tests/userprog/open-normal.ck:open-normal: exit(0)
tests/userprog/open-twice.ck:# -*- perl -*-
tests/userprog/open-twice.ck:(open-twice) begin
tests/userprog/open-twice.ck:(open-twice) open "sample.txt" once
tests/userprog/open-twice.ck:(open-twice) open "sample.txt" again
tests/userprog/open-twice.ck:(open-twice) end
tests/userprog/open-twice.ck:open-twice: exit(0)
tests/userprog/create-empty.ck:# -*- perl -*-
tests/userprog/create-empty.ck:(create-empty) begin
tests/userprog/create-empty.ck:(create-empty) create(""): 0
tests/userprog/create-empty.ck:(create-empty) end
tests/userprog/create-empty.ck:create-empty: exit(0)
tests/userprog/create-empty.ck:(create-empty) begin
tests/userprog/create-empty.ck:create-empty: exit(-1)
tests/userprog/open-empty.c:  if (handle != -1)
tests/userprog/open-empty.c:    fail ("open() returned %d instead of -1", handle);
tests/userprog/create-exists.c:  CHECK (!create ("quux.dat", 0), "try to re-create quux.dat");
tests/userprog/create-exists.c:  CHECK (!create ("warble.dat", 0), "try to re-create quux.dat");
tests/userprog/create-exists.ck:# -*- perl -*-
tests/userprog/create-exists.ck:(create-exists) begin
tests/userprog/create-exists.ck:(create-exists) create quux.dat
tests/userprog/create-exists.ck:(create-exists) create warble.dat
tests/userprog/create-exists.ck:(create-exists) try to re-create quux.dat
tests/userprog/create-exists.ck:(create-exists) create baffle.dat
tests/userprog/create-exists.ck:(create-exists) try to re-create quux.dat
tests/userprog/create-exists.ck:(create-exists) end
tests/userprog/create-exists.ck:create-exists: exit(0)
tests/userprog/exit.ck:# -*- perl -*-
tests/userprog/write-normal.c:  CHECK (create ("test.txt", sizeof sample - 1), "create \"test.txt\"");
tests/userprog/write-normal.c:  byte_cnt = write (handle, sample, sizeof sample - 1);
tests/userprog/write-normal.c:  if (byte_cnt != sizeof sample - 1)
tests/userprog/write-normal.c:    fail ("write() returned %d instead of %zu", byte_cnt, sizeof sample - 1);
tests/userprog/rox-multichild.c:#include "tests/userprog/rox-child.inc"
tests/userprog/args-many.ck:# -*- perl -*-
tests/userprog/args-many.ck:(args) argv[0] = 'args-many'
tests/userprog/args-many.ck:args-many: exit(0)
tests/userprog/read-zero.c:/* Try a 0-byte read, which should return 0 without reading
tests/userprog/read-zero.c:    fail ("0-byte read() modified buffer");
tests/userprog/write-zero.c:/* Try a 0-byte write, which should return 0 without writing
tests/userprog/child-close.c:/* Child process run by multi-child-fd test.
tests/userprog/child-close.c:   command-line argument. Since KAIST new Pintos inherits opened
tests/userprog/child-close.c:const char *test_name = "child-close";
tests/userprog/child-close.c:    fail ("bad command-line arguments");
tests/userprog/child-close.c:  check_file_handle (handle, "sample.txt", sample, sizeof sample - 1);
tests/userprog/bad-jump.c:   This should terminate the process with a -1 exit code. */
tests/userprog/bad-jump.c:  msg ("Congratulations - you have successfully called NULL: %d", 
tests/userprog/bad-jump.c:  fail ("should have exited with -1");
tests/userprog/args-single.ck:# -*- perl -*-
tests/userprog/args-single.ck:(args) argv[0] = 'args-single'
tests/userprog/args-single.ck:args-single: exit(0)
tests/userprog/read-boundary.ck:# -*- perl -*-
tests/userprog/read-boundary.ck:(read-boundary) begin
tests/userprog/read-boundary.ck:(read-boundary) open "sample.txt"
tests/userprog/read-boundary.ck:(read-boundary) end
tests/userprog/read-boundary.ck:read-boundary: exit(0)
tests/userprog/read-stdout.ck:# -*- perl -*-
tests/userprog/read-stdout.ck:(read-stdout) begin
tests/userprog/read-stdout.ck:(read-stdout) end
tests/userprog/read-stdout.ck:read-stdout: exit(0)
tests/userprog/read-stdout.ck:(read-stdout) begin
tests/userprog/read-stdout.ck:read-stdout: exit(-1)
tests/userprog/exec-bad-ptr.c:   The process must be terminated with -1 exit code. */
tests/userprog/open-missing.c:  int handle = open ("no-such-file");
tests/userprog/open-missing.c:  if (handle != -1)
tests/userprog/write-bad-ptr.c:   The process must be terminated with -1 exit code. */
tests/userprog/write-bad-ptr.c:  fail ("should have exited with -1");
tests/userprog/sample.inc:  " of Korea and beyond.\" --KAIST"
tests/userprog/open-boundary.ck:# -*- perl -*-
tests/userprog/open-boundary.ck:(open-boundary) begin
tests/userprog/open-boundary.ck:(open-boundary) open "sample.txt"
tests/userprog/open-boundary.ck:(open-boundary) end
tests/userprog/open-boundary.ck:open-boundary: exit(0)
tests/userprog/read-bad-fd.c:   exit code -1. */
tests/userprog/read-bad-fd.c:  read (-1, &buf, 1);
tests/userprog/read-bad-fd.c:  read (-1024, &buf, 1);
tests/userprog/fork-boundary.c:  pid_t pid = fork (copy_string_across_boundary ("child-simple"));
tests/userprog/Rubric.robustness:- Test robustness of file descriptor handling.
tests/userprog/Rubric.robustness:2	close-bad-fd
tests/userprog/Rubric.robustness:2	close-twice
tests/userprog/Rubric.robustness:2	read-bad-fd
tests/userprog/Rubric.robustness:2	read-stdout
tests/userprog/Rubric.robustness:2	write-bad-fd
tests/userprog/Rubric.robustness:2	write-stdin
tests/userprog/Rubric.robustness:2	multi-child-fd
tests/userprog/Rubric.robustness:- Test robustness of pointer handling.
tests/userprog/Rubric.robustness:3	create-bad-ptr
tests/userprog/Rubric.robustness:3	exec-bad-ptr
tests/userprog/Rubric.robustness:3	open-bad-ptr
tests/userprog/Rubric.robustness:3	read-bad-ptr
tests/userprog/Rubric.robustness:3	write-bad-ptr
tests/userprog/Rubric.robustness:- Test robustness of buffer copying across page boundaries.
tests/userprog/Rubric.robustness:3	create-bound
tests/userprog/Rubric.robustness:3	open-boundary
tests/userprog/Rubric.robustness:3	read-boundary
tests/userprog/Rubric.robustness:3	write-boundary
tests/userprog/Rubric.robustness:3	fork-boundary
tests/userprog/Rubric.robustness:3	exec-boundary
tests/userprog/Rubric.robustness:- Test handling of null pointer and empty strings.
tests/userprog/Rubric.robustness:2	create-null
tests/userprog/Rubric.robustness:2	open-null
tests/userprog/Rubric.robustness:2	open-empty
tests/userprog/Rubric.robustness:- Test robustness of "fork", "exec" and "wait" system calls.
tests/userprog/Rubric.robustness:5	exec-missing
tests/userprog/Rubric.robustness:5	wait-bad-pid
tests/userprog/Rubric.robustness:5	wait-killed
tests/userprog/Rubric.robustness:- Test robustness of exception handling.
tests/userprog/Rubric.robustness:1	bad-read
tests/userprog/Rubric.robustness:1	bad-write
tests/userprog/Rubric.robustness:1	bad-jump
tests/userprog/Rubric.robustness:1	bad-read2
tests/userprog/Rubric.robustness:1	bad-write2
tests/userprog/Rubric.robustness:1	bad-jump2
tests/userprog/close-twice.c:   -1. */
tests/userprog/Grading.extra:10%	tests/userprog/no-vm/Rubric
tests/userprog/wait-simple.c:  if ((pid = fork ("child-simple"))){
tests/userprog/wait-simple.c:    exec ("child-simple");
tests/userprog/create-long.ck:# -*- perl -*-
tests/userprog/create-long.ck:(create-long) begin
tests/userprog/create-long.ck:(create-long) create("x..."): 0
tests/userprog/create-long.ck:(create-long) end
tests/userprog/create-long.ck:create-long: exit(0)
tests/userprog/write-boundary.ck:# -*- perl -*-
tests/userprog/write-boundary.ck:(write-boundary) begin
tests/userprog/write-boundary.ck:(write-boundary) open "sample.txt"
tests/userprog/write-boundary.ck:(write-boundary) end
tests/userprog/write-boundary.ck:write-boundary: exit(0)
tests/userprog/Grading.no-extra:10%	tests/userprog/no-vm/Rubric
tests/userprog/read-boundary.c:  buffer = get_boundary_area () - sizeof sample / 2;
tests/userprog/read-boundary.c:  byte_cnt = read (handle, buffer, sizeof sample - 1);
tests/userprog/read-boundary.c:  if (byte_cnt != sizeof sample - 1)
tests/userprog/read-boundary.c:    fail ("read() returned %d instead of %zu", byte_cnt, sizeof sample - 1);
tests/lib.c:  vsnprintf (buf + strlen (buf), sizeof buf - strlen (buf), format, args);
tests/lib.c:  strlcpy (buf + strlen (buf), suffix, sizeof buf - strlen (buf));
tests/lib.c:      size_t j = i + random_ulong () % (cnt - i);
tests/lib.c:  /* Read the file block-by-block, comparing data as we go. */
tests/lib.c:      block_size = size - ofs;
tests/lib.c:       "from expected.", j - i, ofs + i, file_name);
tests/lib.c:  show_cnt = j - i;
tests/lib.c:  if (j - i > 64) 
tests/lib.c:        "from expected", j - i, ofs + i, file_name);
tests/Algorithm/Diff.pm:#          ^ ^^ ^^-- Incremented at will
tests/Algorithm/Diff.pm:#          | \+----- Incremented for non-trivial changes to features
tests/Algorithm/Diff.pm:#          \-------- Incremented for fundamental changes
tests/Algorithm/Diff.pm:# McIlroy-Hunt diff algorithm
tests/Algorithm/Diff.pm:# by Ned Konz, perl@bike-nomad.com
tests/Algorithm/Diff.pm:        my $element = $aCollection->[$index];
tests/Algorithm/Diff.pm:    if ( $high == -1 || $aValue > $array->[-1] )
tests/Algorithm/Diff.pm:        $found = $array->[$index];
tests/Algorithm/Diff.pm:            $high = $index - 1;
tests/Algorithm/Diff.pm:    $array->[$low] = $aValue;    # overwrite next larger
tests/Algorithm/Diff.pm:#   $a->[ $i ] == $b->[ $result[ $i ] ]
tests/Algorithm/Diff.pm:    # Check for bogus (non-ref) argument values
tests/Algorithm/Diff.pm:            and &$compare( $a->[$aStart], $b->[$bStart], @_ ) )
tests/Algorithm/Diff.pm:            $matchVector->[ $aStart++ ] = $bStart++;
tests/Algorithm/Diff.pm:            and &$compare( $a->[$aFinish], $b->[$bFinish], @_ ) )
tests/Algorithm/Diff.pm:            $matchVector->[ $aFinish-- ] = $bFinish--;
tests/Algorithm/Diff.pm:        $ai = &$keyGen( $a->[$i], @_ );
tests/Algorithm/Diff.pm:        if ( exists( $bMatches->{$ai} ) )
tests/Algorithm/Diff.pm:            for $j ( @{ $bMatches->{$ai} } )
tests/Algorithm/Diff.pm:                if ( $k and $thresh->[$k] > $j and $thresh->[ $k - 1 ] < $j )
tests/Algorithm/Diff.pm:                    $thresh->[$k] = $j;
tests/Algorithm/Diff.pm:                    $links->[$k] =
tests/Algorithm/Diff.pm:                      [ ( $k ? $links->[ $k - 1 ] : undef ), $i, $j ];
tests/Algorithm/Diff.pm:        for ( my $link = $links->[$#$thresh] ; $link ; $link = $link->[0] )
tests/Algorithm/Diff.pm:            $matchVector->[ $link->[1] ] = $link->[2];
tests/Algorithm/Diff.pm:    my $matchCallback     = $callbacks->{'MATCH'} || sub { };
tests/Algorithm/Diff.pm:    my $discardACallback  = $callbacks->{'DISCARD_A'} || sub { };
tests/Algorithm/Diff.pm:    my $finishedACallback = $callbacks->{'A_FINISHED'};
tests/Algorithm/Diff.pm:    my $discardBCallback  = $callbacks->{'DISCARD_B'} || sub { };
tests/Algorithm/Diff.pm:    my $finishedBCallback = $callbacks->{'B_FINISHED'};
tests/Algorithm/Diff.pm:        my $bLine = $matchVector->[$ai];
tests/Algorithm/Diff.pm:    my $matchCallback     = $callbacks->{'MATCH'} || sub { };
tests/Algorithm/Diff.pm:    my $discardACallback  = $callbacks->{'DISCARD_A'} || sub { };
tests/Algorithm/Diff.pm:    my $discardBCallback  = $callbacks->{'DISCARD_B'} || sub { };
tests/Algorithm/Diff.pm:    my $changeCallback    = $callbacks->{'CHANGE'};
tests/Algorithm/Diff.pm:    my $ma    = -1;
tests/Algorithm/Diff.pm:            &&  !defined $matchVector->[$ma]
tests/Algorithm/Diff.pm:        $mb = $matchVector->[$ma];
tests/Algorithm/Diff.pm:        if ( defined( $matchVector->[$i] ) )
tests/Algorithm/Diff.pm:            push ( @retval, $a->[$i] );
tests/Algorithm/Diff.pm:    my @am= grep defined $match->[$_], 0..$#$match;
tests/Algorithm/Diff.pm:        while(  @$am  &&  $ai == $am->[0]  &&  $bi == $bm->[0]  ) {
tests/Algorithm/Diff.pm:        $ai = $am->[0];
tests/Algorithm/Diff.pm:        $bi = $bm->[0];
tests/Algorithm/Diff.pm:        push @$hunk, [ '-', $_[0], $a->[ $_[0] ] ];
tests/Algorithm/Diff.pm:        push @$hunk, [ '+', $_[1], $b->[ $_[1] ] ];
tests/Algorithm/Diff.pm:    my $discard = sub { push ( @$retval, [ '-', $a->[ $_[0] ], "" ] ) };
tests/Algorithm/Diff.pm:    my $add = sub { push ( @$retval, [ '+', "", $b->[ $_[1] ] ] ) };
tests/Algorithm/Diff.pm:        push ( @$retval, [ 'c', $a->[ $_[0] ], $b->[ $_[1] ] ] );
tests/Algorithm/Diff.pm:        push ( @$retval, [ 'u', $a->[ $_[0] ], $b->[ $_[1] ] ] );
tests/Algorithm/Diff.pm:sub _Idx()  { 0 } # $me->[_Idx]: Ref to array of hunk indices
tests/Algorithm/Diff.pm:            # 1   # $me->[1]: Ref to first sequence
tests/Algorithm/Diff.pm:            # 2   # $me->[2]: Ref to second sequence
tests/Algorithm/Diff.pm:sub _End()  { 3 } # $me->[_End]: Diff between forward and reverse pos
tests/Algorithm/Diff.pm:sub _Same() { 4 } # $me->[_Same]: 1 if pos 1 contains unchanged items
tests/Algorithm/Diff.pm:sub _Base() { 5 } # $me->[_Base]: Added to range's min and max
tests/Algorithm/Diff.pm:sub _Pos()  { 6 } # $me->[_Pos]: Which hunk is currently selected
tests/Algorithm/Diff.pm:sub _Off()  { 7 } # $me->[_Off]: Offset into _Idx for current position
tests/Algorithm/Diff.pm:sub _Min() { -2 } # Added to _Off to get min instead of max+1
tests/Algorithm/Diff.pm:    return   if  $me->[_Pos];
tests/Algorithm/Diff.pm:    return $seq + $me->[_Off]
tests/Algorithm/Diff.pm:    for( $opts->{keyGen} ) {
tests/Algorithm/Diff.pm:    for( $opts->{keyGenArgs} ) {
tests/Algorithm/Diff.pm:    if(  0 == $cdif->[2]  &&  0 == $cdif->[3]  ) {
tests/Algorithm/Diff.pm:    my $me = bless \@obj, $us->getObjPkg();
tests/Algorithm/Diff.pm:    $me->Reset( 0 );
tests/Algorithm/Diff.pm:    $pos += $me->[_End]
tests/Algorithm/Diff.pm:        if  $pos < 0  ||  $me->[_End] <= $pos;
tests/Algorithm/Diff.pm:    $me->[_Pos]= $pos || !1;
tests/Algorithm/Diff.pm:    $me->[_Off]= 2*$pos - 1;
tests/Algorithm/Diff.pm:    my $oldBase= $me->[_Base];
tests/Algorithm/Diff.pm:    $me->[_Base]= 0+$base   if  defined $base;
tests/Algorithm/Diff.pm:    $you->Reset( $pos )   if  defined $pos;
tests/Algorithm/Diff.pm:    $you->Base( $base );
tests/Algorithm/Diff.pm:        my $pos= $me->[_Pos];
tests/Algorithm/Diff.pm:        $me->Reset( $new )
tests/Algorithm/Diff.pm:    return $me->[_Pos];
tests/Algorithm/Diff.pm:    my $pos= $me->Next(-$steps);
tests/Algorithm/Diff.pm:    $pos -= $me->[_End]   if  $pos;
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:    return 0   if  $me->[_Same] == ( 1 & $me->[_Pos] );
tests/Algorithm/Diff.pm:    my $off= $me->[_Off];
tests/Algorithm/Diff.pm:            if  $me->[_Idx][ $off + $seq + _Min ]
tests/Algorithm/Diff.pm:            <   $me->[_Idx][ $off + $seq ];
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:    my $off= $me->_ChkSeq($seq);
tests/Algorithm/Diff.pm:    $base= $me->[_Base] if !defined $base;
tests/Algorithm/Diff.pm:    return $base + $me->[_Idx][ $off + _Min ];
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:    my $off= $me->_ChkSeq($seq);
tests/Algorithm/Diff.pm:    $base= $me->[_Base] if !defined $base;
tests/Algorithm/Diff.pm:    return $base + $me->[_Idx][ $off ] -1;
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:    my $off = $me->_ChkSeq($seq);
tests/Algorithm/Diff.pm:        return  $me->[_Idx][ $off ]
tests/Algorithm/Diff.pm:            -   $me->[_Idx][ $off + _Min ];
tests/Algorithm/Diff.pm:    $base= $me->[_Base] if !defined $base;
tests/Algorithm/Diff.pm:    return  ( $base + $me->[_Idx][ $off + _Min ] )
tests/Algorithm/Diff.pm:        ..  ( $base + $me->[_Idx][ $off ] - 1 );
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:    my $off = $me->_ChkSeq($seq);
tests/Algorithm/Diff.pm:        return  $me->[_Idx][ $off ]
tests/Algorithm/Diff.pm:            -   $me->[_Idx][ $off + _Min ];
tests/Algorithm/Diff.pm:        @{$me->[$seq]}[
tests/Algorithm/Diff.pm:                $me->[_Idx][ $off + _Min ]
tests/Algorithm/Diff.pm:            ..  ( $me->[_Idx][ $off ] - 1 )
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:        if  $me->[_Same] != ( 1 & $me->[_Pos] );
tests/Algorithm/Diff.pm:    return $me->Items(1);
tests/Algorithm/Diff.pm:    $me->_ChkPos();
tests/Algorithm/Diff.pm:            if(     $word !~ /^(-?\d+)?([a-zA-Z]+)([12])?$/
tests/Algorithm/Diff.pm:                    ? $meth->( $me )
tests/Algorithm/Diff.pm:                    : $meth->( $me, $seq, $base )
tests/Algorithm/Diff.pm:Algorithm::Diff - Compute `intelligent' differences between two files / lists
tests/Algorithm/Diff.pm:    my $diff = Algorithm::Diff->new( \@seq1, \@seq2 );
tests/Algorithm/Diff.pm:    $diff->Base( 1 );   # Return line numbers, not indices
tests/Algorithm/Diff.pm:    while(  $diff->Next()  ) {
tests/Algorithm/Diff.pm:        next   if  $diff->Same();
tests/Algorithm/Diff.pm:        if(  ! $diff->Items(2)  ) {
tests/Algorithm/Diff.pm:                $diff->Get(qw( Min1 Max1 Max2 ));
tests/Algorithm/Diff.pm:        } elsif(  ! $diff->Items(1)  ) {
tests/Algorithm/Diff.pm:                $diff->Get(qw( Max1 Min2 Max2 ));
tests/Algorithm/Diff.pm:            $sep = "---\n";
tests/Algorithm/Diff.pm:                $diff->Get(qw( Min1 Max1 Min2 Max2 ));
tests/Algorithm/Diff.pm:        print "< $_"   for  $diff->Items(1);
tests/Algorithm/Diff.pm:        print "> $_"   for  $diff->Items(2);
tests/Algorithm/Diff.pm:(by Mark-Jason Dominus)
tests/Algorithm/Diff.pm:From there it's only a small step to get diff-like output:
tests/Algorithm/Diff.pm:    +   - +   +   - + + +
tests/Algorithm/Diff.pm:to generate C<diff>-like output.
tests/Algorithm/Diff.pm:This module now provides an object-oriented interface that uses less
tests/Algorithm/Diff.pm:    $diff = Algorithm::Diffs->new( \@seq1, \@seq2 );
tests/Algorithm/Diff.pm:    $diff = Algorithm::Diffs->new( \@seq1, \@seq2, \%opts );
tests/Algorithm/Diff.pm:    $obj        = Algorithm::Diff->new( \@seq1, \@seq2, [ \%opts ] );
tests/Algorithm/Diff.pm:    $pos        = $obj->Next(  [ $count : 1 ] );
tests/Algorithm/Diff.pm:    $revPos     = $obj->Prev(  [ $count : 1 ] );
tests/Algorithm/Diff.pm:    $obj        = $obj->Reset( [ $pos : 0 ] );
tests/Algorithm/Diff.pm:    $copy       = $obj->Copy(  [ $pos, [ $newBase ] ] );
tests/Algorithm/Diff.pm:    $oldBase    = $obj->Base(  [ $newBase ] );
tests/Algorithm/Diff.pm:    $bits       = $obj->Diff(  );
tests/Algorithm/Diff.pm:    @items|$cnt = $obj->Same(  );
tests/Algorithm/Diff.pm:    @items|$cnt = $obj->Items( $seqNum );
tests/Algorithm/Diff.pm:    @idxs |$cnt = $obj->Range( $seqNum, [ $base ] );
tests/Algorithm/Diff.pm:    $minIdx     = $obj->Min(   $seqNum, [ $base ] );
tests/Algorithm/Diff.pm:    $maxIdx     = $obj->Max(   $seqNum, [ $base ] );
tests/Algorithm/Diff.pm:    @values     = $obj->Get(   @names );
tests/Algorithm/Diff.pm:    $pos = $diff->Next();    # Move forward 1 hunk
tests/Algorithm/Diff.pm:    $pos = $diff->Next( 2 ); # Move forward 2 hunks
tests/Algorithm/Diff.pm:    $pos = $diff->Next(-5);  # Move backward 5 hunks
tests/Algorithm/Diff.pm:C<Prev($N)> is almost identical to C<Next(-$N)>; it moves to the $Nth
tests/Algorithm/Diff.pm:previous hunk.  On a 'reset' object, C<Prev()> [and C<Next(-1)>] move
tests/Algorithm/Diff.pm:hunks; -1 for the last hunk, -2 for the second-to-last, etc.
tests/Algorithm/Diff.pm:    $diff->Reset();     # Reset the object's position
tests/Algorithm/Diff.pm:    $diff->Reset($pos); # Move to the specified hunk
tests/Algorithm/Diff.pm:    $diff->Reset(1);    # Move to the first hunk
tests/Algorithm/Diff.pm:    $diff->Reset(-1);   # Move to the last hunk
tests/Algorithm/Diff.pm:C<< $diff->Reset()->Next(-1) >> to get the number of hunks.
tests/Algorithm/Diff.pm:    $copy = $diff->Copy( $newPos, $newBase );
tests/Algorithm/Diff.pm:    $copy = $diff->Copy($pos);
tests/Algorithm/Diff.pm:    $copy = $diff->Copy();
tests/Algorithm/Diff.pm:    $copy->Reset($pos);
tests/Algorithm/Diff.pm:    $copy = $diff->Copy()->Reset($pos);
tests/Algorithm/Diff.pm:    $copy = $diff->Copy();
tests/Algorithm/Diff.pm:    $copy->Base( 0 );
tests/Algorithm/Diff.pm:    $copy = $diff->Copy(undef,0);
tests/Algorithm/Diff.pm:    $copy = $diff->Copy(0);
tests/Algorithm/Diff.pm:    $copy = $diff->Copy()->Reset();
tests/Algorithm/Diff.pm:    $bits = $obj->Diff();
tests/Algorithm/Diff.pm:    $count = $diff->Items(2);
tests/Algorithm/Diff.pm:    @items = $diff->Items($seqNum);
tests/Algorithm/Diff.pm:C<< $diff->Items(1) >> will return an empty list (0 in a scalar conext).
tests/Algorithm/Diff.pm:If the current hunk contains only deletions, then C<< $diff->Items(2) >>
tests/Algorithm/Diff.pm:If the hunk contains replacements, then both C<< $diff->Items(1) >> and
tests/Algorithm/Diff.pm:C<< $diff->Items(2) >> will return different, non-empty lists.
tests/Algorithm/Diff.pm:    @items = $diff->Items(1);
tests/Algorithm/Diff.pm:    @items = $diff->Items(2);
tests/Algorithm/Diff.pm:    @items = $diff->Same();
tests/Algorithm/Diff.pm:    $count = $diff->Range( $seqNum );
tests/Algorithm/Diff.pm:    @indices = $diff->Range( $seqNum );
tests/Algorithm/Diff.pm:    @indices = $diff->Range( $seqNum, $base );
tests/Algorithm/Diff.pm:    @list = $diff->Items(2);
tests/Algorithm/Diff.pm:    @list = @seq2[ $diff->Range(2) ];
tests/Algorithm/Diff.pm:    @list = $diff->Items(1);
tests/Algorithm/Diff.pm:    @list = @seq1[ $diff->Range(1,0) ];
tests/Algorithm/Diff.pm:    $curBase = $diff->Base();
tests/Algorithm/Diff.pm:    $oldBase = $diff->Base($newBase);
tests/Algorithm/Diff.pm:    $min1 = $diff->Min(1);
tests/Algorithm/Diff.pm:    $min = $diff->Min( $seqNum, $base );
tests/Algorithm/Diff.pm:    ( $n, $x, $r ) = $diff->Get(qw( min1 max1 range1 ));
tests/Algorithm/Diff.pm:    @values = $diff->Get(qw( 0min2 1max2 range2 same base ));
tests/Algorithm/Diff.pm:    /^(-?\d+)?(min|max)[12]$/i
tests/Algorithm/Diff.pm:    $diff->Get('min1') == $diff->Min(1)
tests/Algorithm/Diff.pm:    $diff->Get('0min2') == $diff->Min(2,0)
tests/Algorithm/Diff.pm:      [ [ '-', 0, 'a' ] ],
tests/Algorithm/Diff.pm:      [ [ '-', 4, 'h' ],
tests/Algorithm/Diff.pm:      [ [ '-',  8, 'n' ],
tests/Algorithm/Diff.pm:        [ '-',  9, 'p' ],
tests/Algorithm/Diff.pm:position 0 of the first sequence should be deleted (C<->).  The second
tests/Algorithm/Diff.pm:Unix-utility I<sdiff> does:
tests/Algorithm/Diff.pm:    old        <     -
tests/Algorithm/Diff.pm:    -          >     new
tests/Algorithm/Diff.pm:(C<+>: Element added, C<->: Element removed, C<u>: Element unmodified,
tests/Algorithm/Diff.pm:be displayed side-by-side.
tests/Algorithm/Diff.pm:    ( [ '-', 'a', ''  ],
tests/Algorithm/Diff.pm:contains items C<$diff[0]> through C<$diff[2] - 1> of the first sequence
tests/Algorithm/Diff.pm:and contains items C<$diff[1]> through C<$diff[3] - 1> of the second
tests/Algorithm/Diff.pm:    @list1 = @a[ $cdiff[0] .. $cdiff[2]-1 ];
tests/Algorithm/Diff.pm:    @list2 = @b[ $cdiff[1] .. $cdiff[3]-1 ];
tests/Algorithm/Diff.pm:So the 1st, 3rd, 5th, etc. hunks (all odd-numbered hunks if you start
tests/Algorithm/Diff.pm:etc. hunks (all even-numbered hunks if you start counting from 1) all
tests/Algorithm/Diff.pm:    @hunk1a = @a[ 0 .. 0-1 ];
tests/Algorithm/Diff.pm:    @hunk1b = @b[ 0 .. 0-1 ];
tests/Algorithm/Diff.pm:And C<0..-1> returns the empty list.
tests/Algorithm/Diff.pm:        @hunk2a = @a[ $cdiff[2] .. $cdiff[4]-1 ];
tests/Algorithm/Diff.pm:        @hunk2b = @b[ $cdiff[3] .. $cdiff[5]-1 ];
tests/Algorithm/Diff.pm:        @hunk2a = @a[ 0 .. 1-1 ];
tests/Algorithm/Diff.pm:        @hunk2b = @b[ 0 .. 0-1 ];
tests/Algorithm/Diff.pm:        @hunk2b = @b[ 0 .. -1 ];
tests/Algorithm/Diff.pm:        @hunk3a = @a[ $cdiff[4] .. $cdiff[6]-1 ];
tests/Algorithm/Diff.pm:        @hunk3a = @b[ $cdiff[5] .. $cdiff[7]-1 ];
tests/Algorithm/Diff.pm:        @hunk3a = @a[ 1 .. 3-1 ];
tests/Algorithm/Diff.pm:        @hunk3a = @b[ 0 .. 2-1 ];
tests/Algorithm/Diff.pm:sequences one element at a time, calling an appropriate user-specified
tests/Algorithm/Diff.pm:        undef,     # default key-gen
tests/Algorithm/Diff.pm:        return shift()->{'ssn'};
tests/Algorithm/Diff.pm:    my $person1 = Person->new( name => 'Joe', ssn => '123-45-6789' );
tests/Algorithm/Diff.pm:    my $person2 = Person->new( name => 'Mary', ssn => '123-47-0000' );
tests/Algorithm/Diff.pm:    my $person3 = Person->new( name => 'Pete', ssn => '999-45-2222' );
tests/Algorithm/Diff.pm:    my $person4 = Person->new( name => 'Peggy', ssn => '123-45-9999' );
tests/Algorithm/Diff.pm:    my $person5 = Person->new( name => 'Frank', ssn => '000-45-9999' );
tests/Algorithm/Diff.pm:    my $array2 = [ $person1, $person3, $person4->clone(), $person5 ];
tests/Algorithm/Diff.pm:$person4 and $person4->clone() (which have the same name and SSN)
tests/Algorithm/Diff.pm:    my $array2 = [ $person1, $person3, $person4->clone(), $person5 ];
tests/Algorithm/Diff.pm:so would consider $person4 and $person4->clone() as equal.
tests/Algorithm/Diff.pm:If you pass these routines a non-reference and they expect a reference,
tests/Algorithm/Diff.pm:Parts Copyright (c) 2000-2004 Ned Konz.  All rights reserved.
tests/Algorithm/Diff.pm:Mark-Jason still maintains a mailing list.  To join a low-volume mailing
tests/Algorithm/Diff.pm:empty mail message to mjd-perl-diff-request@plover.com.
tests/Algorithm/Diff.pm:Mark-Jason Dominus, mjd-perl-diff@plover.com
tests/Algorithm/Diff.pm:Mark-Jason's, but Diff.pm's code was completely replaced.
tests/Algorithm/Diff.pm:CACM, vol.20, no.5, pp.350-353, May 1977, with a few
tests/Algorithm/Diff.pm:Much work was done by Ned Konz (perl@bike-nomad.com).
tests/cksum.c:  for (i = n; i > 0; --i)
tests/make-grade:			push (@rubrics, "\t$_"), next if /^-/;
tests/make-grade:    push (@rubrics, "\t- Section summary.");
tests/make-grade:    push (@summary, sprintf ("%-45s %3d/%3d %5.1f%%/%5.1f%%",
tests/make-grade:  = "--------------------------------------------- --- --- ------ ------";
tests/make-grade:	 sprintf ("%-45s %3s %3s %6s %6s",
tests/make-grade:      sprintf ("%-45s %3s %3s %5.1f%%/%5.1f%%",
tests/make-grade:    push (@overall, "ALL TESTED PASSED -- PERFECT SCORE");
tests/make-grade:my (@divider) = ('', '- ' x 38, '');
tests/internal/stdio.c:  printf ("\"%s\" -> \"%s\": ", format, expect);
tests/internal/stdio.c:  checkf ("-1", "%'d", -1);
tests/internal/stdio.c:  checkf ("-12", "%'d", -12);
tests/internal/stdio.c:  checkf ("-123", "%'d", -123);
tests/internal/stdio.c:  checkf ("-1,234", "%'d", -1234);
tests/internal/stdio.c:  checkf ("-12,345", "%'d", -12345);
tests/internal/stdio.c:  checkf ("-123,456", "%'ld", -123456L);
tests/internal/stdio.c:  checkf ("-1,234,567", "%'ld", -1234567L);
tests/internal/stdio.c:  checkf ("-12,345,678", "%'ld", -12345678L);
tests/internal/stdio.c:  checkf ("-123,456,789", "%'ld", -123456789L);
tests/internal/stdio.c:  checkf ("-1,234,567,890", "%'ld", -1234567890L);
tests/internal/stdio.c:  checkf ("-12,345,678,901", "%'lld", -12345678901LL);
tests/internal/stdio.c:  checkf ("-123,456,789,012", "%'lld", -123456789012LL);
tests/internal/stdio.c:  checkf ("-1,234,567,890,123", "%'lld", -1234567890123LL);
tests/internal/stdio.c:  checkf ("-12,345,678,901,234", "%'lld", -12345678901234LL);
tests/internal/stdio.c:  checkf ("-123,456,789,012,345", "%'lld", -123456789012345LL);
tests/internal/stdio.c:  checkf ("-1,234,567,890,123,456", "%'lld", -1234567890123456LL);
tests/internal/stdio.c:  checkf ("-12,345,678,901,234,567", "%'lld", -12345678901234567LL);
tests/internal/stdio.c:  checkf ("-123,456,789,012,345,678", "%'lld", -123456789012345678LL);
tests/internal/stdio.c:  checkf ("-1,234,567,890,123,456,789", "%'lld", -1234567890123456789LL);
tests/internal/stdio.c:  checkf ("0    ", "%-5d", 0);
tests/internal/stdio.c:  checkf ("+0   ", "%+-5d", 0);
tests/internal/stdio.c:  checkf ("1    ", "%-5d", 1);
tests/internal/stdio.c:  checkf ("+1   ", "%+-5d", 1);
tests/internal/stdio.c:  checkf ("   -1", "%5d", -1);
tests/internal/stdio.c:  checkf ("-1   ", "%-5d", -1);
tests/internal/stdio.c:  checkf ("   -1", "%+5d", -1);
tests/internal/stdio.c:  checkf ("-1   ", "%+-5d", -1);
tests/internal/stdio.c:  checkf ("   -1", "% 5d", -1);
tests/internal/stdio.c:  checkf ("-0001", "%05d", -1);
tests/internal/stdio.c:  checkf ("   -1", "%5.0d", -1);
tests/internal/stdio.c:  checkf ("  -01", "%5.2d", -1);
tests/internal/stdio.c:  checkf ("-1", "%d", -1);
tests/internal/stdio.c:  checkf ("12345", "%-5d", 12345);
tests/internal/stdio.c:  checkf ("+12345", "%+-5d", 12345);
tests/internal/stdio.c:  checkf ("123456", "%-5d", 123456);
tests/internal/stdio.c:  checkf ("+123456", "%+-5d", 123456);
tests/internal/stdio.c:  checkf ("  left-right  ", "%6s%s%-7s", "left", "-", "right");
tests/internal/stdio.c:  checkf ("36657730000", "%- o", (unsigned) 036657730000);
tests/internal/stdio.c:  checkf ("4139757568", "%- u", (unsigned) 4139757568UL);
tests/internal/stdio.c:  checkf ("f6bfb000", "%- x", (unsigned) 0xf6bfb000);
tests/internal/stdio.c:  checkf ("36657730000", "%-to", (ptrdiff_t) 036657730000);
tests/internal/stdio.c:  checkf ("4139757568", "%-tu", (ptrdiff_t) 4139757568UL);
tests/internal/stdio.c:  checkf ("-155209728", "%-zi", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%-zd", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "% zi", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "% zd", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%#zd", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%0zi", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155,209,728", "%-'d", -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%.zi", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%zi", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%zd", (size_t) -155209728);
tests/internal/stdio.c:  checkf ("-155209728", "%+zi", (size_t) -155209728);
tests/internal/stdlib.c:      size_t j = i + random_ulong () % (cnt - i);
tests/internal/stdlib.c:   -1 if *A is less than *B. */
tests/internal/stdlib.c:  return *a < *b ? -1 : *a > *b;
tests/internal/stdlib.c:/* Verifies that ARRAY contains the CNT ints 0...CNT-1. */
tests/internal/stdlib.c:   contain the values 0...CNT-1. */
tests/internal/stdlib.c:  int not_in_array[] = {0, -1, INT_MAX, MAX_CNT, MAX_CNT + 1, MAX_CNT * 2};
tests/internal/list.c:          ASSERT (size ? list_entry (e, struct value, elem)->value == 0
tests/internal/list.c:          ASSERT (size ? list_entry (e, struct value, elem)->value == size - 1
tests/internal/list.c:              while (copies-- > 0) 
tests/internal/list.c:                  values[ofs].value = v->value;
tests/internal/list.c:      size_t j = i + random_ulong () % (cnt - i);
tests/internal/list.c:  return a->value < b->value;
tests/internal/list.c:      ASSERT (i == v->value);
tests/internal/list.c:      ASSERT (i == v->value);
tests/lib.pm:    my (@a) = 0...$cnt - 1;
tests/lib.pm:    for my $i (0...$cnt - 1) {
tests/lib.pm:	my ($j) = $i + random_ulong () % ($cnt - $i);
tests/threads/Rubric.priority:3	priority-change
tests/threads/Rubric.priority:3	priority-preempt
tests/threads/Rubric.priority:3	priority-fifo
tests/threads/Rubric.priority:3	priority-sema
tests/threads/Rubric.priority:3	priority-donate-one
tests/threads/Rubric.priority:3	priority-donate-multiple
tests/threads/Rubric.priority:3	priority-donate-multiple2
tests/threads/Rubric.priority:3	priority-donate-nest
tests/threads/Rubric.priority:5	priority-donate-chain
tests/threads/Rubric.priority:3	priority-donate-sema
tests/threads/Rubric.priority:3	priority-donate-lower
tests/threads/priority-change.ck:# -*- perl -*-
tests/threads/priority-change.ck:(priority-change) begin
tests/threads/priority-change.ck:(priority-change) Creating a high-priority thread 2.
tests/threads/priority-change.ck:(priority-change) Thread 2 now lowering priority.
tests/threads/priority-change.ck:(priority-change) Thread 2 should have just lowered its priority.
tests/threads/priority-change.ck:(priority-change) Thread 2 exiting.
tests/threads/priority-change.ck:(priority-change) Thread 2 should have just exited.
tests/threads/priority-change.ck:(priority-change) end
tests/threads/alarm-multiple.ck:# -*- perl -*-
tests/threads/alarm-negative.c:/* Tests timer_sleep(-100).  Only requirement is that it not crash. */
tests/threads/alarm-negative.c:  timer_sleep (-100);
tests/threads/alarm-wait.c:   duration, M times.  Records the wake-up order and verifies
tests/threads/alarm-wait.c:      t->test = &test;
tests/threads/alarm-wait.c:      t->id = i;
tests/threads/alarm-wait.c:      t->duration = (i + 1) * 10;
tests/threads/alarm-wait.c:      t->iterations = 0;
tests/threads/alarm-wait.c:      new_prod = ++t->iterations * t->duration;
tests/threads/alarm-wait.c:           t->id, t->duration, t->iterations, new_prod);
tests/threads/alarm-wait.c:              t->id, product, new_prod);
tests/threads/alarm-wait.c:  struct sleep_test *test = t->test;
tests/threads/alarm-wait.c:  for (i = 1; i <= test->iterations; i++) 
tests/threads/alarm-wait.c:      int64_t sleep_until = test->start + i * t->duration;
tests/threads/alarm-wait.c:      timer_sleep (sleep_until - timer_ticks ());
tests/threads/alarm-wait.c:      lock_acquire (&test->output_lock);
tests/threads/alarm-wait.c:      *test->output_pos++ = t->id;
tests/threads/alarm-wait.c:      lock_release (&test->output_lock);
tests/threads/priority-donate-multiple.ck:# -*- perl -*-
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) begin
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Main thread should have priority 32.  Actual priority: 32.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Main thread should have priority 33.  Actual priority: 33.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread b acquired lock b.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread b finished.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread b should have just finished.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Main thread should have priority 32.  Actual priority: 32.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread a acquired lock a.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread a finished.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Thread a should have just finished.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) Main thread should have priority 31.  Actual priority: 31.
tests/threads/priority-donate-multiple.ck:(priority-donate-multiple) end
tests/threads/Rubric.alarm:4	alarm-single
tests/threads/Rubric.alarm:4	alarm-multiple
tests/threads/Rubric.alarm:4	alarm-simultaneous
tests/threads/Rubric.alarm:4	alarm-priority
tests/threads/Rubric.alarm:1	alarm-zero
tests/threads/Rubric.alarm:1	alarm-negative
tests/threads/priority-donate-multiple2.ck:# -*- perl -*-
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) begin
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Main thread should have priority 34.  Actual priority: 34.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 36.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 36.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Thread b acquired lock b.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Thread b finished.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Thread a acquired lock a.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Thread a finished.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Thread c finished.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Threads b, a, c should have just finished, in that order.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) Main thread should have priority 31.  Actual priority: 31.
tests/threads/priority-donate-multiple2.ck:(priority-donate-multiple2) end
tests/threads/mlfqs.pm:# -*- perl -*-
tests/threads/mlfqs.pm:	$load_avg = (59/60) * $load_avg + (1/60) * $ready->[$i];
tests/threads/mlfqs.pm:	if (defined $recent_delta->[$i]) {
tests/threads/mlfqs.pm:	    $recent_cpu = ($recent_cpu + $recent_delta->[$i]) * $load_factor;
tests/threads/mlfqs.pm:	      foreach 0...($thread_cnt - 1);
tests/threads/mlfqs.pm:	foreach my $j (0...($thread_cnt - 1)) {
tests/threads/mlfqs.pm:	my ($actual) = $actual_ref->[$t];
tests/threads/mlfqs.pm:	my ($expected) = $expected_ref->[$t];
tests/threads/mlfqs.pm:	  if !defined ($actual) || abs ($actual - $expected) > $maxdiff + .01;
tests/threads/mlfqs.pm:    mlfqs_row ($indep_var, "actual", "<->", "expected", "explanation");
tests/threads/mlfqs.pm:    mlfqs_row ("------", "--------", "---", "--------", '-' x 40);
tests/threads/mlfqs.pm:	my ($actual) = $actual_ref->[$t];
tests/threads/mlfqs.pm:	my ($expected) = $expected_ref->[$t];
tests/threads/mlfqs.pm:	    my ($delta) = abs ($actual - $expected);
tests/threads/mlfqs.pm:		my ($excess) = $delta - $maxdiff;
tests/threads/mlfqs.pm:    printf "%6s %8s %3s %-8s %s\n", @_;
tests/threads/priority-sema.c:/* Tests that the highest-priority thread waiting on a semaphore
tests/threads/priority-sema.c:      int priority = PRI_DEFAULT - (i + 3) % 10 - 1;
tests/threads/Make.tests:# -*- makefile -*-
tests/threads/Make.tests:tests/threads_TESTS = $(addprefix tests/threads/,alarm-single		\
tests/threads/Make.tests:alarm-multiple alarm-simultaneous alarm-priority alarm-zero		\
tests/threads/Make.tests:alarm-negative priority-change priority-donate-one			\
tests/threads/Make.tests:priority-donate-multiple priority-donate-multiple2			\
tests/threads/Make.tests:priority-donate-nest priority-donate-sema priority-donate-lower		\
tests/threads/Make.tests:priority-fifo priority-preempt priority-sema        \
tests/threads/Make.tests:priority-donate-chain)
tests/threads/Make.tests:tests/threads_SRC += tests/threads/alarm-wait.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/alarm-simultaneous.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/alarm-priority.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/alarm-zero.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/alarm-negative.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-change.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-one.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-multiple.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-multiple2.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-nest.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-sema.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-lower.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-fifo.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-preempt.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-sema.c
tests/threads/Make.tests:tests/threads_SRC += tests/threads/priority-donate-chain.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/condvar/priority-condvar.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-load-1.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-load-60.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-load-avg.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-recent-1.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-fair.c
tests/threads/Make.tests:    tests/threads_SRC += tests/threads/mlfqs/mlfqs-block.c
tests/threads/alarm-zero.ck:# -*- perl -*-
tests/threads/alarm-zero.ck:(alarm-zero) begin
tests/threads/alarm-zero.ck:(alarm-zero) PASS
tests/threads/alarm-zero.ck:(alarm-zero) end
tests/threads/priority-donate-one.ck:# -*- perl -*-
tests/threads/priority-donate-one.ck:(priority-donate-one) begin
tests/threads/priority-donate-one.ck:(priority-donate-one) This thread should have priority 32.  Actual priority: 32.
tests/threads/priority-donate-one.ck:(priority-donate-one) This thread should have priority 33.  Actual priority: 33.
tests/threads/priority-donate-one.ck:(priority-donate-one) acquire2: got the lock
tests/threads/priority-donate-one.ck:(priority-donate-one) acquire2: done
tests/threads/priority-donate-one.ck:(priority-donate-one) acquire1: got the lock
tests/threads/priority-donate-one.ck:(priority-donate-one) acquire1: done
tests/threads/priority-donate-one.ck:(priority-donate-one) acquire2, acquire1 must already have finished, in that order.
tests/threads/priority-donate-one.ck:(priority-donate-one) This should be the last line before finishing this test.
tests/threads/priority-donate-one.ck:(priority-donate-one) end
tests/threads/priority-donate-nest.c:/* Low-priority main thread L acquires lock A.  Medium-priority
tests/threads/priority-donate-nest.c:   High-priority thread H then blocks on acquiring lock B.  Thus,
tests/threads/priority-donate-nest.c:  lock_acquire (locks->b);
tests/threads/priority-donate-nest.c:  lock_acquire (locks->a);
tests/threads/priority-donate-nest.c:  lock_release (locks->a);
tests/threads/priority-donate-nest.c:  lock_release (locks->b);
tests/threads/alarm-simultaneous.ck:# -*- perl -*-
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) begin
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) Creating 3 threads to sleep 5 times each.
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) Each thread sleeps 10 ticks each time.
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) Within an iteration, all threads should wake up on the same tick.
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 0, thread 0: woke up after 10 ticks
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 0, thread 1: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 0, thread 2: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 1, thread 0: woke up 10 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 1, thread 1: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 1, thread 2: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 2, thread 0: woke up 10 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 2, thread 1: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 2, thread 2: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 3, thread 0: woke up 10 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 3, thread 1: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 3, thread 2: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 4, thread 0: woke up 10 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 4, thread 1: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) iteration 4, thread 2: woke up 0 ticks later
tests/threads/alarm-simultaneous.ck:(alarm-simultaneous) end
tests/threads/priority-fifo.c:   that they consistently run in the same round-robin order.
tests/threads/priority-fifo.c:      d->id = i;
tests/threads/priority-fifo.c:      d->iterations = 0;
tests/threads/priority-fifo.c:      d->lock = &lock;
tests/threads/priority-fifo.c:      d->op = &op;
tests/threads/priority-fifo.c:        printf ("(priority-fifo) iteration:");
tests/threads/priority-fifo.c:      printf (" %d", d->id);
tests/threads/priority-fifo.c:      d->iterations++;
tests/threads/priority-fifo.c:      lock_acquire (data->lock);
tests/threads/priority-fifo.c:      *(*data->op)++ = data->id;
tests/threads/priority-fifo.c:      lock_release (data->lock);
tests/threads/priority-sema.ck:# -*- perl -*-
tests/threads/priority-sema.ck:(priority-sema) begin
tests/threads/priority-sema.ck:(priority-sema) Thread priority 30 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 29 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 28 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 27 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 26 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 25 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 24 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 23 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 22 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) Thread priority 21 woke up.
tests/threads/priority-sema.ck:(priority-sema) Back in main thread.
tests/threads/priority-sema.ck:(priority-sema) end
tests/threads/priority-change.c:   longer the highest-priority thread in the system causes it to
tests/threads/priority-change.c:  msg ("Creating a high-priority thread 2.");
tests/threads/priority-change.c:  thread_set_priority (PRI_DEFAULT - 2);
tests/threads/priority-change.c:  thread_set_priority (PRI_DEFAULT - 1);
tests/threads/alarm-priority.c:   higher-priority threads run first. */
tests/threads/alarm-priority.c:      int priority = PRI_DEFAULT - (i + 5) % 10 - 1;
tests/threads/alarm-priority.c:  /* Busy-wait until the current time changes. */
tests/threads/alarm-priority.c:  timer_sleep (wake_time - timer_ticks ());
tests/threads/alarm-priority.c:  /* Print a message on wake-up. */
tests/threads/mlfqs/mlfqs-fair-2.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-load-60.c:      timer_sleep (sleep_until - timer_ticks ());
tests/threads/mlfqs/mlfqs-load-60.c:  timer_sleep (sleep_time - timer_elapsed (start_time));
tests/threads/mlfqs/mlfqs-load-60.c:  timer_sleep (exit_time - timer_elapsed (start_time));
tests/threads/mlfqs/Make.tests:# -*- makefile -*-
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs_TESTS = $(addprefix tests/threads/mlfqs/,mlfqs-load-1 \
tests/threads/mlfqs/Make.tests:mlfqs-load-60 mlfqs-load-avg mlfqs-recent-1 mlfqs-fair-2	\
tests/threads/mlfqs/Make.tests:mlfqs-fair-20 mlfqs-nice-2 mlfqs-nice-10 mlfqs-block)
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-load-1.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-load-60.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-load-avg.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-recent-1.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-fair-2.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-fair-20.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-nice-2.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-nice-10.output		\
tests/threads/mlfqs/Make.tests:tests/threads/mlfqs/mlfqs-block.output
tests/threads/mlfqs/Make.tests:$(MLFQS_OUTPUTS): KERNELFLAGS += -mlfqs
tests/threads/mlfqs/mlfqs-fair.c:   The mlfqs-nice-2 test runs 2 threads, one with nice 0, the
tests/threads/mlfqs/mlfqs-fair.c:   The mlfqs-nice-10 test runs 10 threads with nice 0 through 9.
tests/threads/mlfqs/mlfqs-fair.c:  ASSERT (nice_min >= -10);
tests/threads/mlfqs/mlfqs-fair.c:  ASSERT (nice_min + nice_step * (thread_cnt - 1) <= 20);
tests/threads/mlfqs/mlfqs-fair.c:  thread_set_nice (-20);
tests/threads/mlfqs/mlfqs-fair.c:      ti->start_time = start_time;
tests/threads/mlfqs/mlfqs-fair.c:      ti->tick_count = 0;
tests/threads/mlfqs/mlfqs-fair.c:      ti->nice = nice;
tests/threads/mlfqs/mlfqs-fair.c:  thread_set_nice (ti->nice);
tests/threads/mlfqs/mlfqs-fair.c:  timer_sleep (sleep_time - timer_elapsed (ti->start_time));
tests/threads/mlfqs/mlfqs-fair.c:  while (timer_elapsed (ti->start_time) < spin_time) 
tests/threads/mlfqs/mlfqs-fair.c:        ti->tick_count++;
tests/threads/mlfqs/mlfqs-load-avg.c:  thread_set_nice (-20);
tests/threads/mlfqs/mlfqs-load-avg.c:      timer_sleep (sleep_until - timer_ticks ());
tests/threads/mlfqs/mlfqs-load-avg.c:  timer_sleep (sleep_time - timer_elapsed (start_time));
tests/threads/mlfqs/mlfqs-load-avg.c:  timer_sleep (exit_time - timer_elapsed (start_time));
tests/threads/mlfqs/mlfqs-nice-10.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-recent-1.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-load-60.ck:# -*- perl -*-
tests/threads/mlfqs/Rubric:5	mlfqs-load-1
tests/threads/mlfqs/Rubric:5	mlfqs-load-60
tests/threads/mlfqs/Rubric:3	mlfqs-load-avg
tests/threads/mlfqs/Rubric:5	mlfqs-recent-1
tests/threads/mlfqs/Rubric:5	mlfqs-fair-2
tests/threads/mlfqs/Rubric:3	mlfqs-fair-20
tests/threads/mlfqs/Rubric:4	mlfqs-nice-2
tests/threads/mlfqs/Rubric:2	mlfqs-nice-10
tests/threads/mlfqs/Rubric:5	mlfqs-block
tests/threads/mlfqs/mlfqs-load-1.c:   perl -e '$i++,$a=(59*$a+1)/60while$a<=.5;print "$i\n"'
tests/threads/mlfqs/mlfqs-load-1.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-load-1.ck:  unless grep ($_ eq '(mlfqs-load-1) PASS', @output);
tests/threads/mlfqs/mlfqs-load-avg.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-load-avg.ck:    my ($ready) = $t < 60 ? $t : $t < 120 ? 120 - $t : 0;
tests/threads/mlfqs/mlfqs-fair-20.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-nice-2.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-recent-1.c:      timer_sleep (DIV_ROUND_UP (start_time, TIMER_FREQ) - start_time
tests/threads/mlfqs/mlfqs-block.ck:# -*- perl -*-
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) begin
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Main thread acquiring lock.
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Block thread spinning for 20 seconds...
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Block thread acquiring lock...
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Main thread spinning for 5 seconds...
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Main thread releasing lock.
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) ...got it.
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) Block thread should have already acquired lock.
tests/threads/mlfqs/mlfqs-block.ck:(mlfqs-block) end
tests/threads/tests.c:    {"alarm-single", test_alarm_single},
tests/threads/tests.c:    {"alarm-multiple", test_alarm_multiple},
tests/threads/tests.c:    {"alarm-simultaneous", test_alarm_simultaneous},
tests/threads/tests.c:    {"alarm-priority", test_alarm_priority},
tests/threads/tests.c:    {"alarm-zero", test_alarm_zero},
tests/threads/tests.c:    {"alarm-negative", test_alarm_negative},
tests/threads/tests.c:    {"priority-change", test_priority_change},
tests/threads/tests.c:    {"priority-donate-one", test_priority_donate_one},
tests/threads/tests.c:    {"priority-donate-multiple", test_priority_donate_multiple},
tests/threads/tests.c:    {"priority-donate-multiple2", test_priority_donate_multiple2},
tests/threads/tests.c:    {"priority-donate-nest", test_priority_donate_nest},
tests/threads/tests.c:    {"priority-donate-sema", test_priority_donate_sema},
tests/threads/tests.c:    {"priority-donate-lower", test_priority_donate_lower},
tests/threads/tests.c:    {"priority-donate-chain", test_priority_donate_chain},
tests/threads/tests.c:    {"priority-fifo", test_priority_fifo},
tests/threads/tests.c:    {"priority-preempt", test_priority_preempt},
tests/threads/tests.c:    {"priority-sema", test_priority_sema},
tests/threads/tests.c:    {"priority-condvar", test_priority_condvar},
tests/threads/tests.c:    {"mlfqs-load-1", test_mlfqs_load_1},
tests/threads/tests.c:    {"mlfqs-load-60", test_mlfqs_load_60},
tests/threads/tests.c:    {"mlfqs-load-avg", test_mlfqs_load_avg},
tests/threads/tests.c:    {"mlfqs-recent-1", test_mlfqs_recent_1},
tests/threads/tests.c:    {"mlfqs-fair-2", test_mlfqs_fair_2},
tests/threads/tests.c:    {"mlfqs-fair-20", test_mlfqs_fair_20},
tests/threads/tests.c:    {"mlfqs-nice-2", test_mlfqs_nice_2},
tests/threads/tests.c:    {"mlfqs-nice-10", test_mlfqs_nice_10},
tests/threads/tests.c:    {"mlfqs-block", test_mlfqs_block},
tests/threads/tests.c:    if (!strcmp (name, t->name))
tests/threads/tests.c:        t->function ();
tests/threads/tests.c:   and following it with a new-line character. */
tests/threads/tests.c:   and following it with a new-line character,
tests/threads/priority-donate-multiple.c:   higher-priority threads.  Each of these threads blocks
tests/threads/priority-donate-nest.ck:# -*- perl -*-
tests/threads/priority-donate-nest.ck:(priority-donate-nest) begin
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Low thread should have priority 32.  Actual priority: 32.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Low thread should have priority 33.  Actual priority: 33.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Medium thread should have priority 33.  Actual priority: 33.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Medium thread got the lock.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) High thread got the lock.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) High thread finished.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) High thread should have just finished.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Middle thread finished.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Medium thread should just have finished.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) Low thread should have priority 31.  Actual priority: 31.
tests/threads/priority-donate-nest.ck:(priority-donate-nest) end
tests/threads/alarm-single.ck:# -*- perl -*-
tests/threads/priority-preempt.c:/* Ensures that a high-priority thread really preempts.
tests/threads/priority-preempt.c:  thread_create ("high-priority", PRI_DEFAULT + 1, simple_thread_func, NULL);
tests/threads/priority-preempt.c:  msg ("The high-priority thread should have already completed.");
tests/threads/priority-donate-sema.ck:# -*- perl -*-
tests/threads/priority-donate-sema.ck:(priority-donate-sema) begin
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread L acquired lock.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread L downed semaphore.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread H acquired lock.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread H finished.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread M finished.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Thread L finished.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) Main thread finished.
tests/threads/priority-donate-sema.ck:(priority-donate-sema) end
tests/threads/priority-condvar.c:/* Tests that cond_signal() wakes up the highest-priority thread
tests/threads/priority-condvar.c:      int priority = PRI_DEFAULT - (i + 7) % 10 - 1;
tests/threads/priority-donate-lower.c:   higher-priority thread that blocks acquiring the lock, causing
tests/threads/priority-donate-lower.c:  thread_set_priority (PRI_DEFAULT - 10);
tests/threads/priority-donate-lower.c:       PRI_DEFAULT - 10, thread_get_priority ());
tests/threads/condvar/Make.tests:# -*- makefile -*-
tests/threads/condvar/Make.tests:tests/threads/condvar_TESTS = tests/threads/condvar/priority-condvar
tests/threads/condvar/Make.tests:tests/threads/condvar/priority-condvar.output
tests/threads/condvar/Rubric:5	priority-condvar
tests/threads/condvar/priority-condvar.c:/* Tests that cond_signal() wakes up the highest-priority thread
tests/threads/condvar/priority-condvar.c:      int priority = PRI_DEFAULT - (i + 7) % 10 - 1;
tests/threads/condvar/priority-condvar.ck:# -*- perl -*-
tests/threads/condvar/priority-condvar.ck:(priority-condvar) begin
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 23 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 22 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 21 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 30 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 29 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 28 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 27 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 26 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 25 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 24 starting.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 30 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 29 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 28 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 27 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 26 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 25 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 24 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 23 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 22 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/condvar/priority-condvar.ck:(priority-condvar) Thread priority 21 woke up.
tests/threads/condvar/priority-condvar.ck:(priority-condvar) end
tests/threads/priority-condvar.ck:# -*- perl -*-
tests/threads/priority-condvar.ck:(priority-condvar) begin
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 23 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 22 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 21 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 30 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 29 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 28 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 27 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 26 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 25 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 24 starting.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 30 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 29 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 28 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 27 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 26 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 25 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 24 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 23 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 22 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) Signaling...
tests/threads/priority-condvar.ck:(priority-condvar) Thread priority 21 woke up.
tests/threads/priority-condvar.ck:(priority-condvar) end
tests/threads/priority-preempt.ck:# -*- perl -*-
tests/threads/priority-preempt.ck:(priority-preempt) begin
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority iteration 0
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority iteration 1
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority iteration 2
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority iteration 3
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority iteration 4
tests/threads/priority-preempt.ck:(priority-preempt) Thread high-priority done!
tests/threads/priority-preempt.ck:(priority-preempt) The high-priority thread should have already completed.
tests/threads/priority-preempt.ck:(priority-preempt) end
tests/threads/alarm-priority.ck:# -*- perl -*-
tests/threads/alarm-priority.ck:(alarm-priority) begin
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 30 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 29 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 28 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 27 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 26 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 25 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 24 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 23 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 22 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) Thread priority 21 woke up.
tests/threads/alarm-priority.ck:(alarm-priority) end
tests/threads/priority-donate-chain.c:   Subsequently, thread[i] attempts to acquire lock[i-1], which is held by
tests/threads/priority-donate-chain.c:   thread[i-1], except for lock[0], which is held by the main thread.
tests/threads/priority-donate-chain.c:   Because the lock is held, thread[i] donates its priority to thread[i-1],
tests/threads/priority-donate-chain.c:   which donates to thread[i-2], and so on until the main thread
tests/threads/priority-donate-chain.c:  struct lock locks[NESTING_DEPTH - 1];
tests/threads/priority-donate-chain.c:  for (i = 0; i < NESTING_DEPTH - 1; i++)
tests/threads/priority-donate-chain.c:      lock_pairs[i].first = i < NESTING_DEPTH - 1 ? locks + i: NULL;
tests/threads/priority-donate-chain.c:      lock_pairs[i].second = locks + i - 1;
tests/threads/priority-donate-chain.c:      thread_create (name, thread_priority - 1, interloper_thread_func, NULL);
tests/threads/priority-donate-chain.c:  if (locks->first)
tests/threads/priority-donate-chain.c:    lock_acquire (locks->first);
tests/threads/priority-donate-chain.c:  lock_acquire (locks->second);
tests/threads/priority-donate-chain.c:  lock_release (locks->second);
tests/threads/priority-donate-chain.c:        thread_name (), (NESTING_DEPTH - 1) * 3,
tests/threads/priority-donate-chain.c:  if (locks->first)
tests/threads/priority-donate-chain.c:    lock_release (locks->first);
tests/threads/priority-fifo.ck:# -*- perl -*-
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:# (priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
tests/threads/priority-fifo.ck:my (@t) = (-1) x $thread_cnt;
tests/threads/priority-donate-one.c:   higher-priority threads that block acquiring the lock, causing
tests/threads/alarm-simultaneous.c:   duration, M times.  Records the wake-up order and verifies
tests/threads/alarm-simultaneous.c:  for (i = 1; i < test.output_pos - output; i++) 
tests/threads/alarm-simultaneous.c:         i / thread_cnt, i % thread_cnt, output[i] - output[i - 1]);
tests/threads/alarm-simultaneous.c:  for (i = 1; i <= test->iterations; i++) 
tests/threads/alarm-simultaneous.c:      int64_t sleep_until = test->start + i * 10;
tests/threads/alarm-simultaneous.c:      timer_sleep (sleep_until - timer_ticks ());
tests/threads/alarm-simultaneous.c:      *test->output_pos++ = timer_ticks () - test->start;
tests/threads/priority-donate-lower.ck:# -*- perl -*-
tests/threads/priority-donate-lower.ck:(priority-donate-lower) begin
tests/threads/priority-donate-lower.ck:(priority-donate-lower) Main thread should have priority 41.  Actual priority: 41.
tests/threads/priority-donate-lower.ck:(priority-donate-lower) Lowering base priority...
tests/threads/priority-donate-lower.ck:(priority-donate-lower) Main thread should have priority 41.  Actual priority: 41.
tests/threads/priority-donate-lower.ck:(priority-donate-lower) acquire: got the lock
tests/threads/priority-donate-lower.ck:(priority-donate-lower) acquire: done
tests/threads/priority-donate-lower.ck:(priority-donate-lower) acquire must already have finished.
tests/threads/priority-donate-lower.ck:(priority-donate-lower) Main thread should have priority 21.  Actual priority: 21.
tests/threads/priority-donate-lower.ck:(priority-donate-lower) end
tests/threads/alarm-negative.ck:# -*- perl -*-
tests/threads/alarm-negative.ck:(alarm-negative) begin
tests/threads/alarm-negative.ck:(alarm-negative) PASS
tests/threads/alarm-negative.ck:(alarm-negative) end
tests/threads/priority-donate-multiple2.c:   higher-priority threads.  The first two of these threads block
tests/threads/priority-donate-multiple2.c:   order compared to priority-donate-multiple.c.
tests/threads/priority-donate-chain.ck:# -*- perl -*-
tests/threads/priority-donate-chain.ck:(priority-donate-chain) begin
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main got lock.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 3.  Actual priority: 3.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 6.  Actual priority: 6.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 9.  Actual priority: 9.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 12.  Actual priority: 12.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 15.  Actual priority: 15.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 18.  Actual priority: 18.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main should have priority 21.  Actual priority: 21.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 1 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 1 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 2 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 2 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 3 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 3 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 4 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 4 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 5 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 5 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 6 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 6 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 7 got lock
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 7 should have priority 21. Actual priority: 21
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 7 finishing with priority 21.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 7 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 6 finishing with priority 18.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 6 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 5 finishing with priority 15.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 5 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 4 finishing with priority 12.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 4 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 3 finishing with priority 9.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 3 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 2 finishing with priority 6.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 2 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) thread 1 finishing with priority 3.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) interloper 1 finished.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) main finishing with priority 0.
tests/threads/priority-donate-chain.ck:(priority-donate-chain) end
tests/threads/priority-donate-sema.c:  lock_acquire (&ls->lock);
tests/threads/priority-donate-sema.c:  sema_down (&ls->sema);
tests/threads/priority-donate-sema.c:  lock_release (&ls->lock);
tests/threads/priority-donate-sema.c:  sema_down (&ls->sema);
tests/threads/priority-donate-sema.c:  lock_acquire (&ls->lock);
tests/threads/priority-donate-sema.c:  sema_up (&ls->sema);
tests/threads/priority-donate-sema.c:  lock_release (&ls->lock);
tests/filesys/base/lg-create.ck:# -*- perl -*-
tests/filesys/base/lg-create.ck:(lg-create) begin
tests/filesys/base/lg-create.ck:(lg-create) create "blargle"
tests/filesys/base/lg-create.ck:(lg-create) open "blargle" for verification
tests/filesys/base/lg-create.ck:(lg-create) verified contents of "blargle"
tests/filesys/base/lg-create.ck:(lg-create) close "blargle"
tests/filesys/base/lg-create.ck:(lg-create) end
tests/filesys/base/seq-random.inc:/* -*- c -*- */
tests/filesys/base/seq-random.inc:#include "tests/filesys/seq-test.h"
tests/filesys/base/seq-random.inc:  random_init (-1);
tests/filesys/base/sm-seq-block.ck:# -*- perl -*-
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) begin
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) create "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) open "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) writing "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) close "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) open "noodle" for verification
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) verified contents of "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) close "noodle"
tests/filesys/base/sm-seq-block.ck:(sm-seq-block) end
tests/filesys/base/child-syn-wrt.c:/* Child process for syn-read test.
tests/filesys/base/child-syn-wrt.c:#include "tests/filesys/base/syn-write.h"
tests/filesys/base/Make.tests:# -*- makefile -*-
tests/filesys/base/Make.tests:tests/filesys/base_TESTS = $(addprefix tests/filesys/base/,lg-create	\
tests/filesys/base/Make.tests:lg-full lg-random lg-seq-block lg-seq-random sm-create sm-full		\
tests/filesys/base/Make.tests:sm-random sm-seq-block sm-seq-random syn-read syn-remove syn-write)
tests/filesys/base/Make.tests:tests/filesys/base/,child-syn-read child-syn-wrt)
tests/filesys/base/Make.tests:	$(eval $(prog)_SRC += $(prog).c tests/lib.c tests/filesys/seq-test.c))
tests/filesys/base/Make.tests:tests/filesys/base/syn-read_PUTFILES = tests/filesys/base/child-syn-read
tests/filesys/base/Make.tests:tests/filesys/base/syn-write_PUTFILES = tests/filesys/base/child-syn-wrt
tests/filesys/base/Make.tests:tests/filesys/base/syn-read.output: TIMEOUT = 300
tests/filesys/base/seq-block.inc:/* -*- c -*- */
tests/filesys/base/seq-block.inc:#include "tests/filesys/seq-test.h"
tests/filesys/base/sm-seq-block.c:/* Writes out a fairly small file sequentially, one fixed-size
tests/filesys/base/sm-seq-block.c:#include "tests/filesys/base/seq-block.inc"
tests/filesys/base/syn-remove.ck:# -*- perl -*-
tests/filesys/base/syn-remove.ck:(syn-remove) begin
tests/filesys/base/syn-remove.ck:(syn-remove) create "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) open "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) remove "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) write "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) seek "deleteme" to 0
tests/filesys/base/syn-remove.ck:(syn-remove) read "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) close "deleteme"
tests/filesys/base/syn-remove.ck:(syn-remove) end
tests/filesys/base/lg-seq-random.ck:# -*- perl -*-
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) begin
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) create "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) open "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) writing "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) close "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) open "nibble" for verification
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) verified contents of "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) close "nibble"
tests/filesys/base/lg-seq-random.ck:(lg-seq-random) end
tests/filesys/base/lg-full.ck:# -*- perl -*-
tests/filesys/base/lg-full.ck:(lg-full) begin
tests/filesys/base/lg-full.ck:(lg-full) create "quux"
tests/filesys/base/lg-full.ck:(lg-full) open "quux"
tests/filesys/base/lg-full.ck:(lg-full) writing "quux"
tests/filesys/base/lg-full.ck:(lg-full) close "quux"
tests/filesys/base/lg-full.ck:(lg-full) open "quux" for verification
tests/filesys/base/lg-full.ck:(lg-full) verified contents of "quux"
tests/filesys/base/lg-full.ck:(lg-full) close "quux"
tests/filesys/base/lg-full.ck:(lg-full) end
tests/filesys/base/sm-create.ck:# -*- perl -*-
tests/filesys/base/sm-create.ck:(sm-create) begin
tests/filesys/base/sm-create.ck:(sm-create) create "blargle"
tests/filesys/base/sm-create.ck:(sm-create) open "blargle" for verification
tests/filesys/base/sm-create.ck:(sm-create) verified contents of "blargle"
tests/filesys/base/sm-create.ck:(sm-create) close "blargle"
tests/filesys/base/sm-create.ck:(sm-create) end
tests/filesys/base/random.inc:/* -*- c -*- */
tests/filesys/base/syn-read.ck:# -*- perl -*-
tests/filesys/base/syn-read.ck:(syn-read) begin
tests/filesys/base/syn-read.ck:(syn-read) create "data"
tests/filesys/base/syn-read.ck:(syn-read) open "data"
tests/filesys/base/syn-read.ck:(syn-read) write "data"
tests/filesys/base/syn-read.ck:(syn-read) close "data"
tests/filesys/base/syn-read.ck:(syn-read) exec child 1 of 10: "child-syn-read 0"
tests/filesys/base/syn-read.ck:(syn-read) exec child 2 of 10: "child-syn-read 1"
tests/filesys/base/syn-read.ck:(syn-read) exec child 3 of 10: "child-syn-read 2"
tests/filesys/base/syn-read.ck:(syn-read) exec child 4 of 10: "child-syn-read 3"
tests/filesys/base/syn-read.ck:(syn-read) exec child 5 of 10: "child-syn-read 4"
tests/filesys/base/syn-read.ck:(syn-read) exec child 6 of 10: "child-syn-read 5"
tests/filesys/base/syn-read.ck:(syn-read) exec child 7 of 10: "child-syn-read 6"
tests/filesys/base/syn-read.ck:(syn-read) exec child 8 of 10: "child-syn-read 7"
tests/filesys/base/syn-read.ck:(syn-read) exec child 9 of 10: "child-syn-read 8"
tests/filesys/base/syn-read.ck:(syn-read) exec child 10 of 10: "child-syn-read 9"
tests/filesys/base/syn-read.ck:(syn-read) wait for child 1 of 10 returned 0 (expected 0)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 2 of 10 returned 1 (expected 1)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 3 of 10 returned 2 (expected 2)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 4 of 10 returned 3 (expected 3)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 5 of 10 returned 4 (expected 4)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 6 of 10 returned 5 (expected 5)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 7 of 10 returned 6 (expected 6)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 8 of 10 returned 7 (expected 7)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 9 of 10 returned 8 (expected 8)
tests/filesys/base/syn-read.ck:(syn-read) wait for child 10 of 10 returned 9 (expected 9)
tests/filesys/base/syn-read.ck:(syn-read) end
tests/filesys/base/child-syn-read.c:/* Child process for syn-read test.
tests/filesys/base/child-syn-read.c:#include "tests/filesys/base/syn-read.h"
tests/filesys/base/child-syn-read.c:const char *test_name = "child-syn-read";
tests/filesys/base/syn-write.h:#endif /* tests/filesys/base/syn-write.h */
tests/filesys/base/syn-read.h:#endif /* tests/filesys/base/syn-read.h */
tests/filesys/base/sm-seq-random.c:/* Writes out a fairly large file sequentially, one random-sized
tests/filesys/base/sm-seq-random.c:#include "tests/filesys/base/seq-random.inc"
tests/filesys/base/lg-seq-random.c:/* Writes out a fairly large file sequentially, one random-sized
tests/filesys/base/lg-seq-random.c:#include "tests/filesys/base/seq-random.inc"
tests/filesys/base/syn-write.c:#include "tests/filesys/base/syn-write.h"
tests/filesys/base/syn-write.c:  exec_children ("child-syn-wrt", children, CHILD_CNT);
tests/filesys/base/Rubric:- Test basic support for small files.
tests/filesys/base/Rubric:1	sm-create
tests/filesys/base/Rubric:2	sm-full
tests/filesys/base/Rubric:2	sm-random
tests/filesys/base/Rubric:2	sm-seq-block
tests/filesys/base/Rubric:3	sm-seq-random
tests/filesys/base/Rubric:- Test basic support for large files.
tests/filesys/base/Rubric:1	lg-create
tests/filesys/base/Rubric:2	lg-full
tests/filesys/base/Rubric:2	lg-random
tests/filesys/base/Rubric:2	lg-seq-block
tests/filesys/base/Rubric:3	lg-seq-random
tests/filesys/base/Rubric:- Test synchronized multiprogram access to files.
tests/filesys/base/Rubric:4	syn-read
tests/filesys/base/Rubric:4	syn-write
tests/filesys/base/Rubric:2	syn-remove
tests/filesys/base/sm-full.ck:# -*- perl -*-
tests/filesys/base/sm-full.ck:(sm-full) begin
tests/filesys/base/sm-full.ck:(sm-full) create "quux"
tests/filesys/base/sm-full.ck:(sm-full) open "quux"
tests/filesys/base/sm-full.ck:(sm-full) writing "quux"
tests/filesys/base/sm-full.ck:(sm-full) close "quux"
tests/filesys/base/sm-full.ck:(sm-full) open "quux" for verification
tests/filesys/base/sm-full.ck:(sm-full) verified contents of "quux"
tests/filesys/base/sm-full.ck:(sm-full) close "quux"
tests/filesys/base/sm-full.ck:(sm-full) end
tests/filesys/base/sm-random.ck:# -*- perl -*-
tests/filesys/base/sm-random.ck:(sm-random) begin
tests/filesys/base/sm-random.ck:(sm-random) create "bazzle"
tests/filesys/base/sm-random.ck:(sm-random) open "bazzle"
tests/filesys/base/sm-random.ck:(sm-random) write "bazzle" in random order
tests/filesys/base/sm-random.ck:(sm-random) read "bazzle" in random order
tests/filesys/base/sm-random.ck:(sm-random) close "bazzle"
tests/filesys/base/sm-random.ck:(sm-random) end
tests/filesys/base/syn-read.c:#include "tests/filesys/base/syn-read.h"
tests/filesys/base/syn-read.c:  exec_children ("child-syn-read", children, CHILD_CNT);
tests/filesys/base/syn-write.ck:# -*- perl -*-
tests/filesys/base/syn-write.ck:(syn-write) begin
tests/filesys/base/syn-write.ck:(syn-write) create "stuff"
tests/filesys/base/syn-write.ck:(syn-write) exec child 1 of 10: "child-syn-wrt 0"
tests/filesys/base/syn-write.ck:(syn-write) exec child 2 of 10: "child-syn-wrt 1"
tests/filesys/base/syn-write.ck:(syn-write) exec child 3 of 10: "child-syn-wrt 2"
tests/filesys/base/syn-write.ck:(syn-write) exec child 4 of 10: "child-syn-wrt 3"
tests/filesys/base/syn-write.ck:(syn-write) exec child 5 of 10: "child-syn-wrt 4"
tests/filesys/base/syn-write.ck:(syn-write) exec child 6 of 10: "child-syn-wrt 5"
tests/filesys/base/syn-write.ck:(syn-write) exec child 7 of 10: "child-syn-wrt 6"
tests/filesys/base/syn-write.ck:(syn-write) exec child 8 of 10: "child-syn-wrt 7"
tests/filesys/base/syn-write.ck:(syn-write) exec child 9 of 10: "child-syn-wrt 8"
tests/filesys/base/syn-write.ck:(syn-write) exec child 10 of 10: "child-syn-wrt 9"
tests/filesys/base/syn-write.ck:(syn-write) wait for child 1 of 10 returned 0 (expected 0)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 2 of 10 returned 1 (expected 1)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 3 of 10 returned 2 (expected 2)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 4 of 10 returned 3 (expected 3)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 5 of 10 returned 4 (expected 4)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 6 of 10 returned 5 (expected 5)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 7 of 10 returned 6 (expected 6)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 8 of 10 returned 7 (expected 7)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 9 of 10 returned 8 (expected 8)
tests/filesys/base/syn-write.ck:(syn-write) wait for child 10 of 10 returned 9 (expected 9)
tests/filesys/base/syn-write.ck:(syn-write) open "stuff"
tests/filesys/base/syn-write.ck:(syn-write) read "stuff"
tests/filesys/base/syn-write.ck:(syn-write) end
tests/filesys/base/lg-seq-block.c:/* Writes out a fairly large file sequentially, one fixed-size
tests/filesys/base/lg-seq-block.c:#include "tests/filesys/base/seq-block.inc"
tests/filesys/base/sm-seq-random.ck:# -*- perl -*-
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) begin
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) create "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) open "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) writing "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) close "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) open "nibble" for verification
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) verified contents of "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) close "nibble"
tests/filesys/base/sm-seq-random.ck:(sm-seq-random) end
tests/filesys/base/lg-random.ck:# -*- perl -*-
tests/filesys/base/lg-random.ck:(lg-random) begin
tests/filesys/base/lg-random.ck:(lg-random) create "bazzle"
tests/filesys/base/lg-random.ck:(lg-random) open "bazzle"
tests/filesys/base/lg-random.ck:(lg-random) write "bazzle" in random order
tests/filesys/base/lg-random.ck:(lg-random) read "bazzle" in random order
tests/filesys/base/lg-random.ck:(lg-random) close "bazzle"
tests/filesys/base/lg-random.ck:(lg-random) end
tests/filesys/base/lg-seq-block.ck:# -*- perl -*-
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) begin
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) create "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) open "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) writing "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) close "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) open "noodle" for verification
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) verified contents of "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) close "noodle"
tests/filesys/base/lg-seq-block.ck:(lg-seq-block) end
tests/filesys/base/full.inc:/* -*- c -*- */
tests/filesys/base/full.inc:#include "tests/filesys/seq-test.h"
tests/filesys/seq-test.c:#include "tests/filesys/seq-test.h"
tests/filesys/seq-test.c:      if (block_size > size - ofs)
tests/filesys/seq-test.c:        block_size = size - ofs;
tests/filesys/journaling/Rubric:- Basic functionality for journaling.
tests/filesys/create.inc:/* -*- c -*- */
tests/filesys/mount/Rubric:- Basic functionality for mount.
tests/filesys/extended/symlink-file-persistence.ck:# -*- perl -*-
tests/filesys/extended/mk-tree.h:#endif /* tests/filesys/extended/mk-tree.h */
tests/filesys/extended/dir-mkdir-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-cwd.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) begin
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) mkdir "a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) verify "/a" is empty
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) "/" and "/a" must have different inumbers
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) chdir "a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) remove failed
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove "../a" (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove ".././a" (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove "/./a" (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "."
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) "/a" and "." must have same inumber
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) "/" and "/a" must have different inumbers
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) chdir "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "."
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) "." must have same inumber as before
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) chdir "/"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove "a" (must fail: still open)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) verify "/a" is empty
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) end
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) begin
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) mkdir "a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) verify "/a" is empty
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) "/" and "/a" must have different inumbers
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) chdir "a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) try to remove "/a"
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) remove successful
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "/a" (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open "." (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) open ".." (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) create "x" (must fail)
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) verify "/a" is empty
tests/filesys/extended/dir-rm-cwd.ck:(dir-rm-cwd) end
tests/filesys/extended/dir-rm-cwd.ck:open (CAN_RMDIR_CWD, ">tests/filesys/extended/can-rmdir-cwd")
tests/filesys/extended/dir-rm-cwd.ck:  or die "tests/filesys/extended/can-rmdir-cwd: create: $!\n";
tests/filesys/extended/dir-under-file-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-file-size.c:#include "tests/filesys/seq-test.h"
tests/filesys/extended/grow-seq-lg.ck:# -*- perl -*-
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) begin
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) create "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) open "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) writing "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) close "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) open "testme" for verification
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) verified contents of "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) close "testme"
tests/filesys/extended/grow-seq-lg.ck:(grow-seq-lg) end
tests/filesys/extended/grow-dir-lg.ck:# -*- perl -*-
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) begin
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) mkdir /x
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file0"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file1"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file2"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file3"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file4"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file5"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file6"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file7"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file8"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file9"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file10"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file11"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file12"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file13"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file14"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file15"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file16"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file17"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file18"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file19"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file20"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file21"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file22"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file23"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file24"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file25"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file26"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file27"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file28"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file29"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file30"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file31"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file32"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file33"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file34"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file35"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file36"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file37"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file38"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file39"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file40"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file41"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file42"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file43"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file44"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file45"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file46"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file47"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file48"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) creating and checking "/x/file49"
tests/filesys/extended/grow-dir-lg.ck:(grow-dir-lg) end
tests/filesys/extended/dir-mk-tree.ck:# -*- perl -*-
tests/filesys/extended/dir-mk-tree.ck:(dir-mk-tree) begin
tests/filesys/extended/dir-mk-tree.ck:(dir-mk-tree) creating /0/0/0/0 through /3/2/2/3...
tests/filesys/extended/dir-mk-tree.ck:(dir-mk-tree) open "/0/2/0/3"
tests/filesys/extended/dir-mk-tree.ck:(dir-mk-tree) close "/0/2/0/3"
tests/filesys/extended/dir-mk-tree.ck:(dir-mk-tree) end
tests/filesys/extended/syn-rw.ck:# -*- perl -*-
tests/filesys/extended/syn-rw.ck:(syn-rw) begin
tests/filesys/extended/syn-rw.ck:(syn-rw) create "logfile"
tests/filesys/extended/syn-rw.ck:(syn-rw) open "logfile"
tests/filesys/extended/syn-rw.ck:(syn-rw) exec child 1 of 4: "child-syn-rw 0"
tests/filesys/extended/syn-rw.ck:(syn-rw) exec child 2 of 4: "child-syn-rw 1"
tests/filesys/extended/syn-rw.ck:(syn-rw) exec child 3 of 4: "child-syn-rw 2"
tests/filesys/extended/syn-rw.ck:(syn-rw) exec child 4 of 4: "child-syn-rw 3"
tests/filesys/extended/syn-rw.ck:(syn-rw) wait for child 1 of 4 returned 0 (expected 0)
tests/filesys/extended/syn-rw.ck:(syn-rw) wait for child 2 of 4 returned 1 (expected 1)
tests/filesys/extended/syn-rw.ck:(syn-rw) wait for child 3 of 4 returned 2 (expected 2)
tests/filesys/extended/syn-rw.ck:(syn-rw) wait for child 4 of 4 returned 3 (expected 3)
tests/filesys/extended/syn-rw.ck:(syn-rw) end
tests/filesys/extended/dir-rm-root-persistence.ck:# -*- perl -*-
tests/filesys/extended/symlink-link.c:		if (block_size > FILE_SIZE - *ofs)
tests/filesys/extended/symlink-link.c:			block_size = FILE_SIZE - *ofs;
tests/filesys/extended/symlink-link-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-root-lg-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-root-lg-persistence.ck:$fs->{"file$_"} = [random_bytes (512)] foreach 0...49;
tests/filesys/extended/Make.tests:# -*- makefile -*-
tests/filesys/extended/Make.tests:raw_tests = dir-empty-name dir-mk-tree dir-mkdir dir-open		\
tests/filesys/extended/Make.tests:dir-over-file dir-rm-cwd dir-rm-parent dir-rm-root dir-rm-tree		\
tests/filesys/extended/Make.tests:dir-rmdir dir-under-file dir-vine grow-create grow-dir-lg		\
tests/filesys/extended/Make.tests:grow-file-size grow-root-lg grow-root-sm grow-seq-lg grow-seq-sm	\
tests/filesys/extended/Make.tests:grow-sparse grow-tell grow-two-files syn-rw				\
tests/filesys/extended/Make.tests:symlink-file symlink-dir symlink-link
tests/filesys/extended/Make.tests:tests/filesys/extended_EXTRA_GRADES = $(patsubst %,tests/filesys/extended/%-persistence,$(raw_tests))
tests/filesys/extended/Make.tests:tests/filesys/extended/child-syn-rw tests/filesys/extended/tar
tests/filesys/extended/Make.tests:	$(eval $(prog)_SRC += $(prog).c tests/lib.c tests/filesys/seq-test.c))
tests/filesys/extended/Make.tests:tests/filesys/extended/dir-mk-tree_SRC += tests/filesys/extended/mk-tree.c
tests/filesys/extended/Make.tests:tests/filesys/extended/dir-rm-tree_SRC += tests/filesys/extended/mk-tree.c
tests/filesys/extended/Make.tests:tests/filesys/extended/syn-rw_PUTFILES += tests/filesys/extended/child-syn-rw
tests/filesys/extended/Make.tests:tests/filesys/extended/dir-vine.output: TIMEOUT = 150
tests/filesys/extended/Make.tests:GETCMD = pintos -v -k -T $(GETTIMEOUT)
tests/filesys/extended/Make.tests:GETCMD += --fs-disk=$(FSDISK)
tests/filesys/extended/Make.tests:GETCMD += -g fs.tar:$(TEST).tar
tests/filesys/extended/Make.tests:GETCMD += --swap-disk=4
tests/filesys/extended/Make.tests:GETCMD += -- -q
tests/filesys/extended/Make.tests:GETCMD += 2> $(TEST)-persistence.errors $(if $(VERBOSE),|tee,>) $(TEST)-persistence.output
tests/filesys/extended/Make.tests:	rm -f tmp.dsk
tests/filesys/extended/Make.tests:	pintos-mkdisk tmp.dsk 2
tests/filesys/extended/Make.tests:	rm -f tmp.dsk
tests/filesys/extended/Make.tests:$(foreach raw_test,$(raw_tests),$(eval tests/filesys/extended/$(raw_test)-persistence.output: tests/filesys/extended/$(raw_test).output))
tests/filesys/extended/Make.tests:$(foreach raw_test,$(raw_tests),$(eval tests/filesys/extended/$(raw_test)-persistence.result: tests/filesys/extended/$(raw_test).result))
tests/filesys/extended/Make.tests:	rm -f $(TARS)
tests/filesys/extended/Make.tests:	rm -f tests/filesys/extended/can-rmdir-cwd
tests/filesys/extended/dir-rm-tree-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-dir.inc:/* -*- c -*- */
tests/filesys/extended/grow-dir.inc:#include "tests/filesys/seq-test.h"
tests/filesys/extended/grow-seq-sm.ck:# -*- perl -*-
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) begin
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) create "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) open "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) writing "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) close "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) open "testme" for verification
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) verified contents of "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) close "testme"
tests/filesys/extended/grow-seq-sm.ck:(grow-seq-sm) end
tests/filesys/extended/tar.c:  return (make_tar_archive (argv[1], argv + 2, argc - 2)
tests/filesys/extended/tar.c:      memset (buf + bytes_read, 0, 512 - bytes_read);
tests/filesys/extended/tar.c:      file_size -= chunk_size;
tests/filesys/extended/tar.c:  snprintf (header + 136, 12, "%011o", 1136102400); /* mtime (2006-01-01) */
tests/filesys/extended/dir-rm-root.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-root.ck:(dir-rm-root) begin
tests/filesys/extended/dir-rm-root.ck:(dir-rm-root) remove "/" (must fail)
tests/filesys/extended/dir-rm-root.ck:(dir-rm-root) create "/a"
tests/filesys/extended/dir-rm-root.ck:(dir-rm-root) end
tests/filesys/extended/symlink-dir.ck:# -*- perl -*-
tests/filesys/extended/symlink-dir.ck:(symlink-dir) begin
tests/filesys/extended/symlink-dir.ck:(symlink-dir) mkdir "/a"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) mkdir "a/b"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) create symlink "a/link_b"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) create "a/link_b/file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) open "file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) write "file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) close "file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) open "a/b/file" for verification
tests/filesys/extended/symlink-dir.ck:(symlink-dir) verified contents of "a/b/file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) close "a/b/file"
tests/filesys/extended/symlink-dir.ck:(symlink-dir) end
tests/filesys/extended/dir-vine-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-vine-persistence.ck:# 40642 dir-vine
tests/filesys/extended/dir-vine-persistence.ck:    $dir->{"file$i"} = ["contents $i\n"];
tests/filesys/extended/dir-vine-persistence.ck:    $dir = $dir->{"dir$i"} = {};
tests/filesys/extended/dir-rm-parent-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-seq-sm.c:#include "tests/filesys/extended/grow-seq.inc"
tests/filesys/extended/syn-rw-persistence.ck:# -*- perl -*-
tests/filesys/extended/syn-rw-persistence.ck:check_archive ({"child-syn-rw" => "tests/filesys/extended/child-syn-rw",
tests/filesys/extended/grow-file-size.ck:# -*- perl -*-
tests/filesys/extended/grow-file-size.ck:(grow-file-size) begin
tests/filesys/extended/grow-file-size.ck:(grow-file-size) create "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) open "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) writing "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) close "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) open "testfile" for verification
tests/filesys/extended/grow-file-size.ck:(grow-file-size) verified contents of "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) close "testfile"
tests/filesys/extended/grow-file-size.ck:(grow-file-size) end
tests/filesys/extended/dir-under-file.ck:# -*- perl -*-
tests/filesys/extended/dir-under-file.ck:(dir-under-file) begin
tests/filesys/extended/dir-under-file.ck:(dir-under-file) create "abc"
tests/filesys/extended/dir-under-file.ck:(dir-under-file) mkdir "abc" (must return false)
tests/filesys/extended/dir-under-file.ck:(dir-under-file) end
tests/filesys/extended/mk-tree.c:#include "tests/filesys/extended/mk-tree.h"
tests/filesys/extended/mk-tree.c:       at - 1, bt - 1, ct - 1, dt - 1);
tests/filesys/extended/mk-tree.c:  snprintf (try, sizeof try, "/%d/%d/%d/%d", 0, bt - 1, 0, dt - 1);
tests/filesys/extended/grow-root-lg.ck:# -*- perl -*-
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) begin
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file0"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file1"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file2"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file3"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file4"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file5"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file6"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file7"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file8"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file9"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file10"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file11"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file12"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file13"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file14"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file15"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file16"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file17"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file18"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file19"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file20"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file21"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file22"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file23"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file24"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file25"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file26"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file27"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file28"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file29"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file30"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file31"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file32"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file33"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file34"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file35"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file36"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file37"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file38"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file39"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file40"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file41"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file42"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file43"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file44"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file45"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file46"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file47"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file48"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) creating and checking "file49"
tests/filesys/extended/grow-root-lg.ck:(grow-root-lg) end
tests/filesys/extended/grow-dir-lg.c:#include "tests/filesys/extended/grow-dir.inc"
tests/filesys/extended/grow-seq-lg.c:#include "tests/filesys/extended/grow-seq.inc"
tests/filesys/extended/dir-vine.ck:# -*- perl -*-
tests/filesys/extended/dir-vine.ck:(dir-vine) begin
tests/filesys/extended/dir-vine.ck:(dir-vine) creating many levels of files and directories...
tests/filesys/extended/dir-vine.ck:(dir-vine) removing all but top 10 levels of files and directories...
tests/filesys/extended/dir-vine.ck:(dir-vine) end
tests/filesys/extended/syn-rw.c:#include "tests/filesys/extended/syn-rw.h"
tests/filesys/extended/syn-rw.c:  exec_children ("child-syn-rw", children, CHILD_CNT);
tests/filesys/extended/grow-two-files.ck:# -*- perl -*-
tests/filesys/extended/grow-two-files.ck:(grow-two-files) begin
tests/filesys/extended/grow-two-files.ck:(grow-two-files) create "a"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) create "b"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) open "a"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) open "b"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) write "a" and "b" alternately
tests/filesys/extended/grow-two-files.ck:(grow-two-files) close "a"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) close "b"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) open "a" for verification
tests/filesys/extended/grow-two-files.ck:(grow-two-files) verified contents of "a"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) close "a"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) open "b" for verification
tests/filesys/extended/grow-two-files.ck:(grow-two-files) verified contents of "b"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) close "b"
tests/filesys/extended/grow-two-files.ck:(grow-two-files) end
tests/filesys/extended/grow-root-sm.c:#include "tests/filesys/extended/grow-dir.inc"
tests/filesys/extended/dir-mk-tree-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-mk-tree-persistence.ck:		$tree->{$a}{$b}{$c}{$d} = [''];
tests/filesys/extended/dir-open.c:  CHECK (retval == -1,
tests/filesys/extended/dir-open.c:         "write \"xyzzy\" (must return -1, actually %d)", retval);
tests/filesys/extended/symlink-link.ck:# -*- perl -*-
tests/filesys/extended/symlink-link.ck:(symlink-link) begin
tests/filesys/extended/symlink-link.ck:(symlink-link) create symlink "link_a"
tests/filesys/extended/symlink-link.ck:(symlink-link) create symlink "link_b"
tests/filesys/extended/symlink-link.ck:(symlink-link) create symlink "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) create "file"
tests/filesys/extended/symlink-link.ck:(symlink-link) open "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) write "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) close "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) open "file" for verification
tests/filesys/extended/symlink-link.ck:(symlink-link) verified contents of "file"
tests/filesys/extended/symlink-link.ck:(symlink-link) close "file"
tests/filesys/extended/symlink-link.ck:(symlink-link) open "link_a" for verification
tests/filesys/extended/symlink-link.ck:(symlink-link) verified contents of "link_a"
tests/filesys/extended/symlink-link.ck:(symlink-link) close "link_a"
tests/filesys/extended/symlink-link.ck:(symlink-link) open "link_b" for verification
tests/filesys/extended/symlink-link.ck:(symlink-link) verified contents of "link_b"
tests/filesys/extended/symlink-link.ck:(symlink-link) close "link_b"
tests/filesys/extended/symlink-link.ck:(symlink-link) open "link_c" for verification
tests/filesys/extended/symlink-link.ck:(symlink-link) verified contents of "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) close "link_c"
tests/filesys/extended/symlink-link.ck:(symlink-link) end
tests/filesys/extended/grow-root-sm-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-root-sm-persistence.ck:$fs->{"file$_"} = [random_bytes (512)] foreach 0...19;
tests/filesys/extended/symlink-dir-persistence.ck:# -*- perl -*-
tests/filesys/extended/symlink-file.ck:# -*- perl -*-
tests/filesys/extended/symlink-file.ck:(symlink-file) begin
tests/filesys/extended/symlink-file.ck:(symlink-file) create "a"
tests/filesys/extended/symlink-file.ck:(symlink-file) create "b"
tests/filesys/extended/symlink-file.ck:(symlink-file) create symlink "link_a"
tests/filesys/extended/symlink-file.ck:(symlink-file) create symlink "link_b"
tests/filesys/extended/symlink-file.ck:(symlink-file) create symlink "link_c"
tests/filesys/extended/symlink-file.ck:(symlink-file) open "link_a"
tests/filesys/extended/symlink-file.ck:(symlink-file) open "link_b"
tests/filesys/extended/symlink-file.ck:(symlink-file) open "link_c"
tests/filesys/extended/symlink-file.ck:(symlink-file) write "link_a" and "link_b" alternately
tests/filesys/extended/symlink-file.ck:(symlink-file) close "link_a"
tests/filesys/extended/symlink-file.ck:(symlink-file) close "link_b"
tests/filesys/extended/symlink-file.ck:(symlink-file) close "link_c"
tests/filesys/extended/symlink-file.ck:(symlink-file) open "a" for verification
tests/filesys/extended/symlink-file.ck:(symlink-file) verified contents of "a"
tests/filesys/extended/symlink-file.ck:(symlink-file) close "a"
tests/filesys/extended/symlink-file.ck:(symlink-file) open "b" for verification
tests/filesys/extended/symlink-file.ck:(symlink-file) verified contents of "b"
tests/filesys/extended/symlink-file.ck:(symlink-file) close "b"
tests/filesys/extended/symlink-file.ck:(symlink-file) end
tests/filesys/extended/child-syn-rw.c:/* Child process for syn-rw.
tests/filesys/extended/child-syn-rw.c:   and calling yield whenever we receive a 0-byte read.) */
tests/filesys/extended/child-syn-rw.c:#include "tests/filesys/extended/syn-rw.h"
tests/filesys/extended/child-syn-rw.c:const char *test_name = "child-syn-rw";
tests/filesys/extended/child-syn-rw.c:      int bytes_read = read (fd, buf2 + ofs, sizeof buf2 - ofs);
tests/filesys/extended/child-syn-rw.c:      CHECK (bytes_read >= -1 && bytes_read <= (int) (sizeof buf2 - ofs),
tests/filesys/extended/child-syn-rw.c:             "%zu-byte read on \"%s\" returned invalid value of %d",
tests/filesys/extended/child-syn-rw.c:             sizeof buf2 - ofs, file_name, bytes_read);
tests/filesys/extended/dir-rm-tree.c:#include "tests/filesys/extended/mk-tree.h"
tests/filesys/extended/dir-rm-tree.c:       at - 1, bt - 1, ct - 1, dt - 1);
tests/filesys/extended/dir-rm-tree.c:  snprintf (try, sizeof (try), "/%d/%d/%d/%d", at - 1, 0, ct - 1, 0);
tests/filesys/extended/dir-rm-tree.c:  CHECK (open (try) == -1, "open \"%s\" (must return -1)", try);
tests/filesys/extended/syn-rw.h:#endif /* tests/filesys/extended/syn-rw.h */
tests/filesys/extended/grow-create-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-cwd-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-cwd-persistence.ck:my ($cwd_removable) = read_text_file ("tests/filesys/extended/can-rmdir-cwd");
tests/filesys/extended/grow-file-size-persistence.ck:# -*- perl -*-
tests/filesys/extended/Rubric.persistence:1	dir-empty-name-persistence
tests/filesys/extended/Rubric.persistence:1	dir-mk-tree-persistence
tests/filesys/extended/Rubric.persistence:1	dir-mkdir-persistence
tests/filesys/extended/Rubric.persistence:1	dir-open-persistence
tests/filesys/extended/Rubric.persistence:1	dir-over-file-persistence
tests/filesys/extended/Rubric.persistence:1	dir-rm-cwd-persistence
tests/filesys/extended/Rubric.persistence:1	dir-rm-parent-persistence
tests/filesys/extended/Rubric.persistence:1	dir-rm-root-persistence
tests/filesys/extended/Rubric.persistence:1	dir-rm-tree-persistence
tests/filesys/extended/Rubric.persistence:1	dir-rmdir-persistence
tests/filesys/extended/Rubric.persistence:1	dir-under-file-persistence
tests/filesys/extended/Rubric.persistence:1	dir-vine-persistence
tests/filesys/extended/Rubric.persistence:1	grow-create-persistence
tests/filesys/extended/Rubric.persistence:1	grow-dir-lg-persistence
tests/filesys/extended/Rubric.persistence:1	grow-file-size-persistence
tests/filesys/extended/Rubric.persistence:1	grow-root-lg-persistence
tests/filesys/extended/Rubric.persistence:1	grow-root-sm-persistence
tests/filesys/extended/Rubric.persistence:1	grow-seq-lg-persistence
tests/filesys/extended/Rubric.persistence:1	grow-seq-sm-persistence
tests/filesys/extended/Rubric.persistence:1	grow-sparse-persistence
tests/filesys/extended/Rubric.persistence:1	grow-tell-persistence
tests/filesys/extended/Rubric.persistence:1	grow-two-files-persistence
tests/filesys/extended/Rubric.persistence:1	syn-rw-persistence
tests/filesys/extended/Rubric.persistence:1	symlink-file-persistence
tests/filesys/extended/Rubric.persistence:1	symlink-dir-persistence
tests/filesys/extended/Rubric.persistence:1	symlink-link-persistence
tests/filesys/extended/dir-mk-tree.c:#include "tests/filesys/extended/mk-tree.h"
tests/filesys/extended/symlink-dir.c:		if (block_size > FILE_SIZE - *ofs)
tests/filesys/extended/symlink-dir.c:			block_size = FILE_SIZE - *ofs;
tests/filesys/extended/grow-tell-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-vine.c:  while (i-- > 10) 
tests/filesys/extended/grow-dir-lg-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-dir-lg-persistence.ck:$fs->{'x'}{"file$_"} = [random_bytes (512)] foreach 0...49;
tests/filesys/extended/grow-seq-lg-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-over-file-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-create.ck:# -*- perl -*-
tests/filesys/extended/grow-create.ck:(grow-create) begin
tests/filesys/extended/grow-create.ck:(grow-create) create "blargle"
tests/filesys/extended/grow-create.ck:(grow-create) open "blargle" for verification
tests/filesys/extended/grow-create.ck:(grow-create) verified contents of "blargle"
tests/filesys/extended/grow-create.ck:(grow-create) close "blargle"
tests/filesys/extended/grow-create.ck:(grow-create) end
tests/filesys/extended/Rubric.functionality:- Test directory support.
tests/filesys/extended/Rubric.functionality:1	dir-mkdir
tests/filesys/extended/Rubric.functionality:3	dir-mk-tree
tests/filesys/extended/Rubric.functionality:1	dir-rmdir
tests/filesys/extended/Rubric.functionality:3	dir-rm-tree
tests/filesys/extended/Rubric.functionality:5	dir-vine
tests/filesys/extended/Rubric.functionality:- Test file growth.
tests/filesys/extended/Rubric.functionality:1	grow-create
tests/filesys/extended/Rubric.functionality:1	grow-seq-sm
tests/filesys/extended/Rubric.functionality:3	grow-seq-lg
tests/filesys/extended/Rubric.functionality:3	grow-sparse
tests/filesys/extended/Rubric.functionality:3	grow-two-files
tests/filesys/extended/Rubric.functionality:1	grow-tell
tests/filesys/extended/Rubric.functionality:1	grow-file-size
tests/filesys/extended/Rubric.functionality:- Test directory growth.
tests/filesys/extended/Rubric.functionality:1	grow-dir-lg
tests/filesys/extended/Rubric.functionality:1	grow-root-sm
tests/filesys/extended/Rubric.functionality:1	grow-root-lg
tests/filesys/extended/Rubric.functionality:- Test writing from multiple processes.
tests/filesys/extended/Rubric.functionality:5	syn-rw
tests/filesys/extended/Rubric.functionality:- Symlink
tests/filesys/extended/Rubric.functionality:5	symlink-file
tests/filesys/extended/Rubric.functionality:5	symlink-dir
tests/filesys/extended/Rubric.functionality:5	symlink-link
tests/filesys/extended/dir-rmdir-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-over-file.ck:# -*- perl -*-
tests/filesys/extended/dir-over-file.ck:(dir-over-file) begin
tests/filesys/extended/dir-over-file.ck:(dir-over-file) mkdir "abc"
tests/filesys/extended/dir-over-file.ck:(dir-over-file) create "abc" (must return false)
tests/filesys/extended/dir-over-file.ck:(dir-over-file) end
tests/filesys/extended/dir-rm-parent.c:   fail, because that directory is non-empty. */
tests/filesys/extended/grow-sparse-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-root-lg.c:#include "tests/filesys/extended/grow-dir.inc"
tests/filesys/extended/grow-sparse.ck:# -*- perl -*-
tests/filesys/extended/grow-sparse.ck:(grow-sparse) begin
tests/filesys/extended/grow-sparse.ck:(grow-sparse) create "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) open "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) seek "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) write "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) close "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) open "testfile" for verification
tests/filesys/extended/grow-sparse.ck:(grow-sparse) verified contents of "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) close "testfile"
tests/filesys/extended/grow-sparse.ck:(grow-sparse) end
tests/filesys/extended/dir-open-persistence.ck:# -*- perl -*-
tests/filesys/extended/grow-two-files-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-open.ck:# -*- perl -*-
tests/filesys/extended/dir-open.ck:(dir-open) begin
tests/filesys/extended/dir-open.ck:(dir-open) mkdir "xyzzy"
tests/filesys/extended/dir-open.ck:(dir-open) open "xyzzy"
tests/filesys/extended/dir-open.ck:(dir-open) write "xyzzy"
tests/filesys/extended/dir-open.ck:(dir-open) write "xyzzy" (must return -1, actually -1)
tests/filesys/extended/dir-open.ck:(dir-open) end
tests/filesys/extended/dir-open.ck:dir-open: exit(0)
tests/filesys/extended/dir-open.ck:(dir-open) begin
tests/filesys/extended/dir-open.ck:(dir-open) mkdir "xyzzy"
tests/filesys/extended/dir-open.ck:(dir-open) open "xyzzy"
tests/filesys/extended/dir-open.ck:(dir-open) write "xyzzy"
tests/filesys/extended/dir-open.ck:dir-open: exit(-1)
tests/filesys/extended/grow-root-sm.ck:# -*- perl -*-
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) begin
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file0"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file1"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file2"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file3"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file4"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file5"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file6"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file7"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file8"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file9"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file10"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file11"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file12"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file13"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file14"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file15"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file16"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file17"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file18"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) creating and checking "file19"
tests/filesys/extended/grow-root-sm.ck:(grow-root-sm) end
tests/filesys/extended/grow-tell.ck:# -*- perl -*-
tests/filesys/extended/grow-tell.ck:(grow-tell) begin
tests/filesys/extended/grow-tell.ck:(grow-tell) create "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) open "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) writing "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) close "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) open "foobar" for verification
tests/filesys/extended/grow-tell.ck:(grow-tell) verified contents of "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) close "foobar"
tests/filesys/extended/grow-tell.ck:(grow-tell) end
tests/filesys/extended/dir-empty-name.ck:# -*- perl -*-
tests/filesys/extended/dir-empty-name.ck:(dir-empty-name) begin
tests/filesys/extended/dir-empty-name.ck:(dir-empty-name) mkdir "" (must return false)
tests/filesys/extended/dir-empty-name.ck:(dir-empty-name) end
tests/filesys/extended/symlink-file.c:      if (block_size > FILE_SIZE - *ofs)
tests/filesys/extended/symlink-file.c:        block_size = FILE_SIZE - *ofs;
tests/filesys/extended/dir-rmdir.ck:# -*- perl -*-
tests/filesys/extended/dir-rmdir.ck:(dir-rmdir) begin
tests/filesys/extended/dir-rmdir.ck:(dir-rmdir) mkdir "a"
tests/filesys/extended/dir-rmdir.ck:(dir-rmdir) rmdir "a"
tests/filesys/extended/dir-rmdir.ck:(dir-rmdir) chdir "a" (must return false)
tests/filesys/extended/dir-rmdir.ck:(dir-rmdir) end
tests/filesys/extended/grow-seq-sm-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-empty-name-persistence.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-cwd.c:      CHECK (open ("/a") == -1, "open \"/a\" (must fail)");
tests/filesys/extended/dir-rm-cwd.c:      CHECK (open (".") == -1, "open \".\" (must fail)");
tests/filesys/extended/dir-rm-cwd.c:      CHECK (open ("..") == -1, "open \"..\" (must fail)");
tests/filesys/extended/grow-sparse.c:  seek (fd, sizeof buf - 1);
tests/filesys/extended/dir-rm-tree.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) begin
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) creating /0/0/0/0 through /3/2/2/3...
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) open "/0/2/0/3"
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) close "/0/2/0/3"
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) removing /0/0/0/0 through /3/2/2/3...
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) open "/3/0/2/0" (must return -1)
tests/filesys/extended/dir-rm-tree.ck:(dir-rm-tree) end
tests/filesys/extended/grow-seq.inc:/* -*- c -*- */
tests/filesys/extended/grow-seq.inc:#include "tests/filesys/seq-test.h"
tests/filesys/extended/dir-rm-parent.ck:# -*- perl -*-
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) begin
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) mkdir "a"
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) chdir "a"
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) mkdir "b"
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) chdir "b"
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) remove "/a" (must fail)
tests/filesys/extended/dir-rm-parent.ck:(dir-rm-parent) end
tests/filesys/extended/Rubric.robustness:1	dir-empty-name
tests/filesys/extended/Rubric.robustness:1	dir-open
tests/filesys/extended/Rubric.robustness:1	dir-over-file
tests/filesys/extended/Rubric.robustness:1	dir-under-file
tests/filesys/extended/Rubric.robustness:3	dir-rm-cwd
tests/filesys/extended/Rubric.robustness:2	dir-rm-parent
tests/filesys/extended/Rubric.robustness:1	dir-rm-root
tests/filesys/extended/grow-tell.c:#include "tests/filesys/seq-test.h"
tests/filesys/extended/grow-two-files.c:      if (block_size > FILE_SIZE - *ofs)
tests/filesys/extended/grow-two-files.c:        block_size = FILE_SIZE - *ofs;
tests/filesys/extended/dir-mkdir.ck:# -*- perl -*-
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) begin
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) mkdir "a"
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) create "a/b"
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) chdir "a"
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) open "b"
tests/filesys/extended/dir-mkdir.ck:(dir-mkdir) end
tests/filesys/seq-test.h:#endif /* tests/filesys/seq-test.h */
tests/cksum.pm:    for my $i (0...$n - 1) {
tests/cksum.pm:    sysread (FILE, $data, -s FILE) == -s FILE or die "$file: read: $!\n";
README.md:The manual is available at https://casys-kaist.github.io/pintos-kaist/.
lib/string.c:	while (size-- > 0)
lib/string.c:		while (size-- > 0)
lib/string.c:		while (size-- > 0)
lib/string.c:			*--dst = *--src;
lib/string.c:	for (; size-- > 0; a++, b++)
lib/string.c:			return *a > *b ? +1 : -1;
lib/string.c:	return *a < *b ? -1 : *a > *b;
lib/string.c:	for (; size-- > 0; block++)
lib/string.c:		for (i = 0; i <= haystack_len - needle_len; i++)
lib/string.c:	/* Skip any non-DELIMITERS up to the end of the string. */
lib/string.c:	while (size-- > 0)
lib/string.c:	return p - string;
lib/string.c:/* Copies string SRC to DST.  If SRC is longer than SIZE - 1
lib/string.c:   characters, only SIZE - 1 characters are copied.  A null
lib/string.c:		size_t dst_len = size - 1;
lib/string.c:   limited to SIZE - 1 characters.  A null terminator is always
lib/string.c:		size_t copy_cnt = size - dst_len - 1;
lib/stdio.c:   BUF_SIZE - 1 characters to BUFFER, followed by a null
lib/stdio.c:   terminator.  BUFFER will always be null-terminated unless
lib/stdio.c:	aux.max_length = buf_size > 0 ? buf_size - 1 : 0;
lib/stdio.c:	if (aux->length++ < aux->max_length)
lib/stdio.c:		*aux->p++ = ch;
lib/stdio.c:   BUF_SIZE - 1 characters to BUFFER, followed by a null
lib/stdio.c:   terminator.  BUFFER will always be null-terminated unless
lib/stdio.c:		MINUS = 1 << 0,         /* '-' */
lib/stdio.c:	   -1 indicates no precision was specified. */
lib/stdio.c:		/* Literally copy non-conversions to output. */
lib/stdio.c:								value = value - SIZE_MAX - 1;
lib/stdio.c:					format_integer (value < 0 ? -value : value,
lib/stdio.c:					/* Treat character as single-character string. */
lib/stdio.c:Note: if c.precision == -1 then strnlen() will get
lib/stdio.c:				/* We don't support floating-point arithmetic,
lib/stdio.c:	c->flags = 0;
lib/stdio.c:			case '-':
lib/stdio.c:				c->flags |= MINUS;
lib/stdio.c:				c->flags |= PLUS;
lib/stdio.c:				c->flags |= SPACE;
lib/stdio.c:				c->flags |= POUND;
lib/stdio.c:				c->flags |= ZERO;
lib/stdio.c:				c->flags |= GROUP;
lib/stdio.c:				format--;
lib/stdio.c:	if (c->flags & MINUS)
lib/stdio.c:		c->flags &= ~ZERO;
lib/stdio.c:	if (c->flags & PLUS)
lib/stdio.c:		c->flags &= ~SPACE;
lib/stdio.c:	c->width = 0;
lib/stdio.c:		c->width = va_arg (*args, int);
lib/stdio.c:			c->width = c->width * 10 + *format - '0';
lib/stdio.c:	if (c->width < 0) {
lib/stdio.c:		c->width = -c->width;
lib/stdio.c:		c->flags |= MINUS;
lib/stdio.c:	c->precision = -1;
lib/stdio.c:			c->precision = va_arg (*args, int);
lib/stdio.c:			c->precision = 0;
lib/stdio.c:				c->precision = c->precision * 10 + *format - '0';
lib/stdio.c:		if (c->precision < 0)
lib/stdio.c:			c->precision = -1;
lib/stdio.c:	if (c->precision >= 0)
lib/stdio.c:		c->flags &= ~ZERO;
lib/stdio.c:	c->type = INT;
lib/stdio.c:				c->type = CHAR;
lib/stdio.c:				c->type = SHORT;
lib/stdio.c:			c->type = INTMAX;
lib/stdio.c:				c->type = LONGLONG;
lib/stdio.c:				c->type = LONG;
lib/stdio.c:			c->type = PTRDIFFT;
lib/stdio.c:			c->type = SIZET;
lib/stdio.c:			format--;
lib/stdio.c:		if (c->flags & PLUS)
lib/stdio.c:			sign = negative ? '-' : '+';
lib/stdio.c:		else if (c->flags & SPACE)
lib/stdio.c:			sign = negative ? '-' : ' ';
lib/stdio.c:			sign = '-';
lib/stdio.c:	x = (c->flags & POUND) && value ? b->x : 0;
lib/stdio.c:		if ((c->flags & GROUP) && digit_cnt > 0 && digit_cnt % b->group == 0)
lib/stdio.c:		*cp++ = b->digits[value % b->base];
lib/stdio.c:		value /= b->base;
lib/stdio.c:	precision = c->precision < 0 ? 1 : c->precision;
lib/stdio.c:	while (cp - buf < precision && cp < buf + sizeof buf - 1)
lib/stdio.c:	if ((c->flags & POUND) && b->base == 8 && (cp == buf || cp[-1] != '0'))
lib/stdio.c:	pad_cnt = c->width - (cp - buf) - (x ? 2 : 0) - (sign != 0);
lib/stdio.c:	if ((c->flags & (MINUS | ZERO)) == 0)
lib/stdio.c:	if (c->flags & ZERO)
lib/stdio.c:		output (*--cp, aux);
lib/stdio.c:	if (c->flags & MINUS)
lib/stdio.c:	while (cnt-- > 0)
lib/stdio.c:	if (c->width > length && (c->flags & MINUS) == 0)
lib/stdio.c:		output_dup (' ', c->width - length, output, aux);
lib/stdio.c:	if (c->width > length && (c->flags & MINUS) != 0)
lib/stdio.c:		output_dup (' ', c->width - length, output, aux);
lib/stdio.c:		if (end - start > size)
lib/stdio.c:		n = end - start;
lib/stdio.c:					buf[i - start], i == per_line / 2 - 1? '-' : ' ');
lib/stdio.c:						isprint (buf[i - start]) ? buf[i - start] : '.');
lib/stdio.c:		size -= n;
lib/random.c:/* RC4-based pseudo-random number generator (PRNG).
lib/random.c:   and its output is plenty random for non-cryptographic
lib/random.c:	for (buf = buf_; size-- > 0; buf++) {
lib/random.c:/* Returns a pseudo-random unsigned long.
lib/user/debug.c:   number, and function name, plus a user-specific message. */
lib/user/syscall.c:#include "../syscall-nr.h"
lib/user/user.lds:OUTPUT_FORMAT("elf64-x86-64")
lib/user/user.lds:OUTPUT_ARCH(i386:x86-64)
lib/user/user.lds:  /* Read-only sections, merged into text segment: */
lib/user/user.lds:    *(.note.gnu.build-id)
lib/user/user.lds:  /DISCARD/ : { *(.note.GNU-stack) }
lib/user/console.c:#include <syscall-nr.h>
lib/user/console.c:/* Writes string S to the console, followed by a new-line
lib/user/console.c:	*aux->p++ = c;
lib/user/console.c:	if (aux->p >= aux->buf + sizeof aux->buf)
lib/user/console.c:	aux->char_cnt++;
lib/user/console.c:	if (aux->p > aux->buf)
lib/user/console.c:		write (aux->handle, aux->buf, aux->p - aux->buf);
lib/user/console.c:	aux->p = aux->buf;
lib/targets.mk:lib_SRC += lib/random.c			# Pseudo-random numbers.
lib/kernel/hash.c:	h->elem_cnt = 0;
lib/kernel/hash.c:	h->bucket_cnt = 4;
lib/kernel/hash.c:	h->buckets = malloc (sizeof *h->buckets * h->bucket_cnt);
lib/kernel/hash.c:	h->hash = hash;
lib/kernel/hash.c:	h->less = less;
lib/kernel/hash.c:	h->aux = aux;
lib/kernel/hash.c:	if (h->buckets != NULL) {
lib/kernel/hash.c:   If DESTRUCTOR is non-null, then it is called for each element
lib/kernel/hash.c:	for (i = 0; i < h->bucket_cnt; i++) {
lib/kernel/hash.c:		struct list *bucket = &h->buckets[i];
lib/kernel/hash.c:				destructor (hash_elem, h->aux);
lib/kernel/hash.c:	h->elem_cnt = 0;
lib/kernel/hash.c:   If DESTRUCTOR is non-null, then it is first called for each
lib/kernel/hash.c:	free (h->buckets);
lib/kernel/hash.c:	for (i = 0; i < h->bucket_cnt; i++) {
lib/kernel/hash.c:		struct list *bucket = &h->buckets[i];
lib/kernel/hash.c:			action (list_elem_to_hash_elem (elem), h->aux);
lib/kernel/hash.c:	i->hash = h;
lib/kernel/hash.c:	i->bucket = i->hash->buckets;
lib/kernel/hash.c:	i->elem = list_elem_to_hash_elem (list_head (i->bucket));
lib/kernel/hash.c:	i->elem = list_elem_to_hash_elem (list_next (&i->elem->list_elem));
lib/kernel/hash.c:	while (i->elem == list_elem_to_hash_elem (list_end (i->bucket))) {
lib/kernel/hash.c:		if (++i->bucket >= i->hash->buckets + i->hash->bucket_cnt) {
lib/kernel/hash.c:			i->elem = NULL;
lib/kernel/hash.c:		i->elem = list_elem_to_hash_elem (list_begin (i->bucket));
lib/kernel/hash.c:	return i->elem;
lib/kernel/hash.c:	return i->elem;
lib/kernel/hash.c:	return h->elem_cnt;
lib/kernel/hash.c:	return h->elem_cnt == 0;
lib/kernel/hash.c:/* Fowler-Noll-Vo hash constants, for 32-bit word sizes. */
lib/kernel/hash.c:	/* Fowler-Noll-Vo 32-bit hash, for bytes. */
lib/kernel/hash.c:	while (size-- > 0)
lib/kernel/hash.c:	size_t bucket_idx = h->hash (e, h->aux) & (h->bucket_cnt - 1);
lib/kernel/hash.c:	return &h->buckets[bucket_idx];
lib/kernel/hash.c:		if (!h->less (hi, e, h->aux) && !h->less (e, hi, h->aux))
lib/kernel/hash.c:/* Returns X with its lowest-order bit set to 1 turned off. */
lib/kernel/hash.c:	return x & (x - 1);
lib/kernel/hash.c:   ideal.  This function can fail because of an out-of-memory
lib/kernel/hash.c:	old_buckets = h->buckets;
lib/kernel/hash.c:	old_bucket_cnt = h->bucket_cnt;
lib/kernel/hash.c:	new_bucket_cnt = h->elem_cnt / BEST_ELEMS_PER_BUCKET;
lib/kernel/hash.c:	h->buckets = new_buckets;
lib/kernel/hash.c:	h->bucket_cnt = new_bucket_cnt;
lib/kernel/hash.c:	h->elem_cnt++;
lib/kernel/hash.c:	list_push_front (bucket, &e->list_elem);
lib/kernel/hash.c:	h->elem_cnt--;
lib/kernel/hash.c:	list_remove (&e->list_elem);
lib/kernel/debug.c:   function name, plus a user-specific message. */
lib/kernel/bitmap.c:	int last_bits = b->bit_cnt % ELEM_BITS;
lib/kernel/bitmap.c:	return last_bits ? ((elem_type) 1 << last_bits) - 1 : (elem_type) -1;
lib/kernel/bitmap.c:		b->bit_cnt = bit_cnt;
lib/kernel/bitmap.c:		b->bits = malloc (byte_cnt (bit_cnt));
lib/kernel/bitmap.c:		if (b->bits != NULL || bit_cnt == 0) {
lib/kernel/bitmap.c:	b->bit_cnt = bit_cnt;
lib/kernel/bitmap.c:	b->bits = (elem_type *) (b + 1);
lib/kernel/bitmap.c:		free (b->bits);
lib/kernel/bitmap.c:	return b->bit_cnt;
lib/kernel/bitmap.c:	ASSERT (idx < b->bit_cnt);
lib/kernel/bitmap.c:	/* This is equivalent to `b->bits[idx] |= mask' except that it
lib/kernel/bitmap.c:	   the description of the OR instruction in [IA32-v2b]. */
lib/kernel/bitmap.c:	asm ("lock orq %1, %0" : "=m" (b->bits[idx]) : "r" (mask) : "cc");
lib/kernel/bitmap.c:	/* This is equivalent to `b->bits[idx] &= ~mask' except that it
lib/kernel/bitmap.c:	   the description of the AND instruction in [IA32-v2a]. */
lib/kernel/bitmap.c:	asm ("lock andq %1, %0" : "=m" (b->bits[idx]) : "r" (~mask) : "cc");
lib/kernel/bitmap.c:	/* This is equivalent to `b->bits[idx] ^= mask' except that it
lib/kernel/bitmap.c:	   the description of the XOR instruction in [IA32-v2b]. */
lib/kernel/bitmap.c:	asm ("lock xorq %1, %0" : "=m" (b->bits[idx]) : "r" (mask) : "cc");
lib/kernel/bitmap.c:	ASSERT (idx < b->bit_cnt);
lib/kernel/bitmap.c:	return (b->bits[elem_idx (idx)] & bit_mask (idx)) != 0;
lib/kernel/bitmap.c:	ASSERT (start <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start + cnt <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start + cnt <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start + cnt <= b->bit_cnt);
lib/kernel/bitmap.c:	ASSERT (start <= b->bit_cnt);
lib/kernel/bitmap.c:	if (cnt <= b->bit_cnt) {
lib/kernel/bitmap.c:		size_t last = b->bit_cnt - cnt;
lib/kernel/bitmap.c:	return byte_cnt (b->bit_cnt);
lib/kernel/bitmap.c:	if (b->bit_cnt > 0) {
lib/kernel/bitmap.c:		off_t size = byte_cnt (b->bit_cnt);
lib/kernel/bitmap.c:		success = file_read_at (file, b->bits, size, 0) == size;
lib/kernel/bitmap.c:		b->bits[elem_cnt (b->bit_cnt) - 1] &= last_mask (b);
lib/kernel/bitmap.c:	off_t size = byte_cnt (b->bit_cnt);
lib/kernel/bitmap.c:	return file_write_at (file, b->bits, size, 0) == size;
lib/kernel/bitmap.c:	hex_dump (0, b->bits, byte_cnt (b->bit_cnt), false);
lib/kernel/console.c:   printf()             - palloc() tries to grab the lock again
lib/kernel/console.c:   schedule_tail()      - another thread dying as we switch threads
lib/kernel/console.c:   intr_handler()       - timer interrupt
lib/kernel/console.c:   sys_write()          - one process writing to the console
lib/kernel/console.c:			console_lock_depth--;
lib/kernel/console.c:/* Writes string S to the console, followed by a new-line
lib/kernel/console.c:	while (n-- > 0)
lib/kernel/targets.mk:lib/kernel_SRC += lib/kernel/list.c	# Doubly-linked lists.
lib/kernel/list.c:   +------+     +------+
lib/kernel/list.c:   <---| head |<--->| tail |--->
lib/kernel/list.c:   +------+     +------+
lib/kernel/list.c:   +------+     +-------+     +-------+     +------+
lib/kernel/list.c:   <---| head |<--->|   1   |<--->|   2   |<--->| tail |<--->
lib/kernel/list.c:   +------+     +-------+     +-------+     +------+
lib/kernel/list.c:	return elem != NULL && elem->prev == NULL && elem->next != NULL;
lib/kernel/list.c:	return elem != NULL && elem->prev != NULL && elem->next != NULL;
lib/kernel/list.c:	return elem != NULL && elem->prev != NULL && elem->next == NULL;
lib/kernel/list.c:	list->head.prev = NULL;
lib/kernel/list.c:	list->head.next = &list->tail;
lib/kernel/list.c:	list->tail.prev = &list->head;
lib/kernel/list.c:	list->tail.next = NULL;
lib/kernel/list.c:	return list->head.next;
lib/kernel/list.c:	return elem->next;
lib/kernel/list.c:	return &list->tail;
lib/kernel/list.c:	return list->tail.prev;
lib/kernel/list.c:	return elem->prev;
lib/kernel/list.c:	return &list->head;
lib/kernel/list.c:	return &list->head;
lib/kernel/list.c:	return &list->tail;
lib/kernel/list.c:	elem->prev = before->prev;
lib/kernel/list.c:	elem->next = before;
lib/kernel/list.c:	before->prev->next = elem;
lib/kernel/list.c:	before->prev = elem;
lib/kernel/list.c:	first->prev->next = last->next;
lib/kernel/list.c:	last->next->prev = first->prev;
lib/kernel/list.c:	first->prev = before->prev;
lib/kernel/list.c:	last->next = before;
lib/kernel/list.c:	before->prev->next = first;
lib/kernel/list.c:	before->prev = last;
lib/kernel/list.c:	elem->prev->next = elem->next;
lib/kernel/list.c:	elem->next->prev = elem->prev;
lib/kernel/list.c:	return elem->next;
lib/kernel/list.c:	return list->head.next;
lib/kernel/list.c:	return list->tail.prev;
lib/kernel/list.c:		for (e = list_begin (list); e != list_end (list); e = e->prev)
lib/kernel/list.c:			swap (&e->prev, &e->next);
lib/kernel/list.c:		swap (&list->head.next, &list->tail.prev);
lib/kernel/list.c:		swap (&list->head.next->prev, &list->tail.prev->next);
lib/kernel/list.c:   A through B (exclusive) must form a non-empty range. */
lib/kernel/list.c:   given auxiliary data AUX.  If DUPLICATES is non-null, then the
lib/stdlib.c:  else if (*s == '-')
lib/stdlib.c:    value = value * 10 - (*s - '0');
lib/stdlib.c:    value = -value;
lib/stdlib.c:   and B, respectively, it must return a strcmp()-type result,
lib/stdlib.c:/* Swaps elements with 1-based indexes A_IDX and B_IDX in ARRAY
lib/stdlib.c:  unsigned char *a = array + (a_idx - 1) * size;
lib/stdlib.c:  unsigned char *b = array + (b_idx - 1) * size;
lib/stdlib.c:/* Compares elements with 1-based indexes A_IDX and B_IDX in
lib/stdlib.c:   strcmp()-type result. */
lib/stdlib.c:  return compare (array + (a_idx - 1) * size, array + (b_idx - 1) * size, aux);
lib/stdlib.c:/* "Float down" the element with 1-based index I in ARRAY of CNT
lib/stdlib.c:   respectively, it must return a strcmp()-type result, i.e. less
lib/stdlib.c:  for (i = cnt / 2; i > 0; i--)
lib/stdlib.c:  for (i = cnt; i > 1; i--) 
lib/stdlib.c:      heapify (array, 1, i - 1, size, compare, aux); 
lib/stdlib.c:   strcmp()-type result, i.e. less than zero if A < B, zero if A
lib/stdlib.c:   respectively, it must return a strcmp()-type result, i.e. less
lib/stdlib.c:      size_t range = (last - first) / size;
lib/arithmetic.c:/* On x86, division of one 64-bit integer by another cannot be
lib/arithmetic.c:   implements 64-bit division and remainder operations through
lib/arithmetic.c:   Some x86-64 machines, however, have a compiler and utilities
lib/arithmetic.c:   that can generate 32-bit x86 code without having any of the
lib/arithmetic.c:   64-bit division routines, which are the only routines from
lib/arithmetic.c:   Pintos is completely self-contained, then that makes it that
lib/arithmetic.c:/* Uses x86 DIVL instruction to divide 64-bit N by 32-bit D to
lib/arithmetic.c:   yield a 32-bit quotient.  Returns the quotient.
lib/arithmetic.c:/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
lib/arithmetic.c:		   [n/d] = [n/d] - T + T
lib/arithmetic.c:		   = [n/d - T] + T                         by (1) below
lib/arithmetic.c:		   = [(b*n1 + n0)/d - T] + T               by definition of n
lib/arithmetic.c:		   = [(b*n1 + n0)/d - dT/d] + T
lib/arithmetic.c:		   = [(b(n1 - d[n1/d]) + n0)/d] + T
lib/arithmetic.c:		   respective maximum values of d - 1 and b - 1:
lib/arithmetic.c:		   [(b(d - 1) + (b - 1))/d] < b
lib/arithmetic.c:		   <=> [(bd - 1)/d] < b
lib/arithmetic.c:		   <=> [b - 1/d] < b
lib/arithmetic.c:			uint64_t q = divl (n >> 1, (d << s) >> 32) >> (31 - s);
lib/arithmetic.c:			return n - (q - 1) * d < d ? q - 1 : q;
lib/arithmetic.c:/* Divides unsigned 64-bit N by unsigned 64-bit D and returns the
lib/arithmetic.c:	return n - d * udiv64 (n, d);
lib/arithmetic.c:/* Divides signed 64-bit N by signed 64-bit D and returns the
lib/arithmetic.c:	uint64_t n_abs = n >= 0 ? (uint64_t) n : -(uint64_t) n;
lib/arithmetic.c:	uint64_t d_abs = d >= 0 ? (uint64_t) d : -(uint64_t) d;
lib/arithmetic.c:	return (n < 0) == (d < 0) ? (int64_t) q_abs : -(int64_t) q_abs;
lib/arithmetic.c:/* Divides signed 64-bit N by signed 64-bit D and returns the
lib/arithmetic.c:	return n - d * sdiv64 (n, d);
lib/arithmetic.c:/* Signed 64-bit division. */
lib/arithmetic.c:/* Signed 64-bit remainder. */
lib/arithmetic.c:/* Unsigned 64-bit division. */
lib/arithmetic.c:/* Unsigned 64-bit remainder. */
Makefile.userprog:# -*- makefile -*-
Makefile.userprog:$(PROGS): CPPFLAGS += -I$(SRCDIR)/include/lib/user -I.
Makefile.userprog:$(PROGS): CFLAGS += $(TDEFINE) -fno-stack-protector -Wno-builtin-declaration-mismatch
Makefile.userprog:$(PROGS): LDFLAGS = -nostdlib -static -Wl,-T,$(LDSCRIPT)
Makefile.userprog:lib_SRC += lib/random.c			# Pseudo-random numbers.
Makefile.userprog:	$$(CC) $$(CFLAGS) $$(LDFLAGS) $$($(1)_OBJ) $$(LIB) -o $$@
Makefile.userprog:	rm -f $@
Makefile.userprog:	rm -f $(PROGS) $(PROGS_OBJ) $(PROGS_DEP)
Makefile.userprog:	rm -f $(LIB_DEP) $(LIB_OBJ) lib/user/entry.[do] libc.a 
Makefile.userprog:-include $(LIB_DEP) $(PROGS_DEP)
threads/fixed_point.h:#define INT_MAX ((1 << 31) - 1)
threads/fixed_point.h:#define INT_MIN (-(1 << 31))
threads/fixed_point.h:    return (x >= 0) ? (x + F / 2) / F : (x - F / 2) / F;
threads/fixed_point.h:    return x - y;
threads/fixed_point.h:    return x - n * F;
Binary file threads/fixed_point.h matches
threads/synch.c:/* Copyright (c) 1992-1996 The Regents of the University of California.
threads/synch.c:   - down or "P": wait for the value to become positive, then
threads/synch.c:   - up or "V": increment the value (and wake up one waiting
threads/synch.c:	sema->value = value;
threads/synch.c:	list_init (&sema->waiters);
threads/synch.c:	while (sema->value == 0) {
threads/synch.c:	sema->value--;
threads/synch.c:	if (sema->value > 0)
threads/synch.c:		sema->value--;
threads/synch.c:	if (!list_empty (&sema->waiters)){
threads/synch.c:        list_sort (&sema->waiters, cmp_priority, NULL);
threads/synch.c:		thread_unblock (list_entry (list_pop_front (&sema->waiters),
threads/synch.c:	sema->value++;
threads/synch.c:/* Self-test for semaphores that makes control "ping-pong"
threads/synch.c:	thread_create ("sema-test", PRI_DEFAULT, sema_test_helper, &sema);
threads/synch.c:	lock->holder = NULL;
threads/synch.c:	sema_init (&lock->semaphore, 1);
threads/synch.c:        thread_current()->wait_on_lock = lock;
threads/synch.c:        list_insert_ordered(&lock->holder->donations, &thread_current()->donation_elem, cmp_donation_priority, NULL);
threads/synch.c:	sema_down (&lock->semaphore);
threads/synch.c:        thread_current()->wait_on_lock = NULL;
threads/synch.c:    lock->holder = thread_current ();
threads/synch.c:	success = sema_try_down (&lock->semaphore);
threads/synch.c:		lock->holder = thread_current ();
threads/synch.c:	lock->holder = NULL;
threads/synch.c:	sema_up (&lock->semaphore);
threads/synch.c:	return lock->holder == thread_current ();
threads/synch.c:	list_init (&cond->waiters);
threads/synch.c:   condition variables.  That is, there is a one-to-many mapping
threads/synch.c:    // list_insert_ordered(&cond->waiters, &waiter.elem, cmp_sem_priority, NULL);
threads/synch.c:	list_push_back (&cond->waiters, &waiter.elem);
threads/synch.c:	if (!list_empty (&cond->waiters))
threads/synch.c:        list_sort(&cond->waiters, cmp_sem_priority, NULL);
threads/synch.c:		sema_up (&list_entry (list_pop_front (&cond->waiters),
threads/synch.c:					struct semaphore_elem, elem)->semaphore);
threads/synch.c:	while (!list_empty (&cond->waiters))
threads/synch.c:    struct list_elem *ea = list_begin(&sa->semaphore.waiters);
threads/synch.c:    struct list_elem *eb = list_begin(&sb->semaphore.waiters);
threads/synch.c:    return thread_a->priority > thread_b->priority;
threads/synch.c:    return thread_a->priority > thread_b->priority;
Binary file threads/synch.c matches
Binary file threads/build/kernel.bin matches
threads/build/Makefile:# -*- makefile -*-
threads/build/Makefile:	CPPFLAGS += -DDO_TEST_CONDVAR
threads/build/Makefile:	CPPFLAGS += -DDO_TEST_MLFQS
threads/build/Makefile:os.dsk: CPPFLAGS += -I$(SRCDIR)/lib/kernel
threads/build/Makefile:# Kernel-specific library code.
threads/build/Makefile:threads/kernel.lds.s: CPPFLAGS += -P
threads/build/Makefile:	$(LD) $(LDFLAGS) -T $< -o $@ $(OBJECTS)
threads/build/Makefile:	$(OBJCOPY) -O binary -R .note -R .comment -S $< $@.tmp
threads/build/Makefile:	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) -DKERNEL_LOAD_PAGES=`perl -e 'print +(-s "kernel.bin") / 4096;'`
threads/build/Makefile:	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7c00 --oformat binary -o $@ $<
threads/build/Makefile:	rm -f $(OBJECTS) $(DEPENDS)
threads/build/Makefile:	rm -f threads/loader.o threads/kernel.lds.s threads/loader.d
threads/build/Makefile:	rm -f kernel.o kernel.lds.s
threads/build/Makefile:	rm -f kernel.bin loader.bin os.dsk
threads/build/Makefile:	rm -f bochsout.txt bochsrc.txt
threads/build/Makefile:	rm -f results grade
threads/build/Makefile:-include $(DEPENDS)
threads/build/tests/threads/alarm-negative.output:Kernel command line: -q run alarm-negative
threads/build/tests/threads/alarm-negative.output:Executing 'alarm-negative':
threads/build/tests/threads/alarm-negative.output:(alarm-negative) begin
threads/build/tests/threads/alarm-negative.output:(alarm-negative) PASS
threads/build/tests/threads/alarm-negative.output:(alarm-negative) end
threads/build/tests/threads/alarm-negative.output:Execution of 'alarm-negative' complete.
threads/build/tests/threads/priority-change.d:tests/threads/priority-change.o: ../../tests/threads/priority-change.c \
Binary file threads/build/tests/threads/priority-donate-one.o matches
threads/build/tests/threads/alarm-simultaneous.d:tests/threads/alarm-simultaneous.o: \
threads/build/tests/threads/alarm-simultaneous.d: ../../tests/threads/alarm-simultaneous.c ../../include/lib/stdio.h \
threads/build/tests/threads/alarm-simultaneous.output:Kernel command line: -q run alarm-simultaneous
threads/build/tests/threads/alarm-simultaneous.output:Executing 'alarm-simultaneous':
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) begin
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) Creating 3 threads to sleep 5 times each.
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) Each thread sleeps 10 ticks each time.
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) Within an iteration, all threads should wake up on the same tick.
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 0, thread 0: woke up after 10 ticks
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 0, thread 1: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 0, thread 2: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 1, thread 0: woke up 10 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 1, thread 1: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 1, thread 2: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 2, thread 0: woke up 10 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 2, thread 1: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 2, thread 2: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 3, thread 0: woke up 10 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 3, thread 1: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 3, thread 2: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 4, thread 0: woke up 10 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 4, thread 1: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) iteration 4, thread 2: woke up 0 ticks later
threads/build/tests/threads/alarm-simultaneous.output:(alarm-simultaneous) end
threads/build/tests/threads/alarm-simultaneous.output:Execution of 'alarm-simultaneous' complete.
Binary file threads/build/tests/threads/priority-donate-lower.o matches
threads/build/tests/threads/priority-donate-one.output:Kernel command line: -q run priority-donate-one
threads/build/tests/threads/priority-donate-one.output:Executing 'priority-donate-one':
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) begin
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) This thread should have priority 32.  Actual priority: 32.
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) This thread should have priority 33.  Actual priority: 33.
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) acquire2: got the lock
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) acquire2: done
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) acquire1: got the lock
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) acquire1: done
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) acquire2, acquire1 must already have finished, in that order.
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) This should be the last line before finishing this test.
threads/build/tests/threads/priority-donate-one.output:(priority-donate-one) end
threads/build/tests/threads/priority-donate-one.output:Execution of 'priority-donate-one' complete.
threads/build/tests/threads/priority-sema.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/alarm-zero.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-nest.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/alarm-zero.o matches
threads/build/tests/threads/priority-donate-multiple.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/alarm-multiple.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-sema.output:Kernel command line: -q run priority-sema
threads/build/tests/threads/priority-sema.output:Executing 'priority-sema':
threads/build/tests/threads/priority-sema.output:(priority-sema) begin
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 30 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 29 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 28 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 27 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 26 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 25 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 24 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 23 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 22 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) Thread priority 21 woke up.
threads/build/tests/threads/priority-sema.output:(priority-sema) Back in main thread.
threads/build/tests/threads/priority-sema.output:(priority-sema) end
threads/build/tests/threads/priority-sema.output:Execution of 'priority-sema' complete.
threads/build/tests/threads/alarm-priority.output:Kernel command line: -q run alarm-priority
threads/build/tests/threads/alarm-priority.output:Executing 'alarm-priority':
threads/build/tests/threads/alarm-priority.output:(alarm-priority) begin
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 30 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 29 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 28 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 27 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 26 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 25 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 24 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 23 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 22 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) Thread priority 21 woke up.
threads/build/tests/threads/alarm-priority.output:(alarm-priority) end
threads/build/tests/threads/alarm-priority.output:Execution of 'alarm-priority' complete.
threads/build/tests/threads/priority-donate-nest.output:Kernel command line: -q run priority-donate-nest
threads/build/tests/threads/priority-donate-nest.output:Executing 'priority-donate-nest':
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) begin
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Low thread should have priority 32.  Actual priority: 32.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Low thread should have priority 33.  Actual priority: 33.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Medium thread should have priority 33.  Actual priority: 33.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Medium thread got the lock.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) High thread got the lock.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) High thread finished.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) High thread should have just finished.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Middle thread finished.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Medium thread should just have finished.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) Low thread should have priority 31.  Actual priority: 31.
threads/build/tests/threads/priority-donate-nest.output:(priority-donate-nest) end
threads/build/tests/threads/priority-donate-nest.output:Execution of 'priority-donate-nest' complete.
threads/build/tests/threads/priority-donate-multiple2.d:tests/threads/priority-donate-multiple2.o: \
threads/build/tests/threads/priority-donate-multiple2.d: ../../tests/threads/priority-donate-multiple2.c \
threads/build/tests/threads/priority-donate-one.d:tests/threads/priority-donate-one.o: \
threads/build/tests/threads/priority-donate-one.d: ../../tests/threads/priority-donate-one.c ../../include/lib/stdio.h \
threads/build/tests/threads/alarm-zero.d:tests/threads/alarm-zero.o: ../../tests/threads/alarm-zero.c \
threads/build/tests/threads/priority-fifo.d:tests/threads/priority-fifo.o: ../../tests/threads/priority-fifo.c \
Binary file threads/build/tests/threads/priority-donate-nest.o matches
threads/build/tests/threads/priority-donate-nest.d:tests/threads/priority-donate-nest.o: \
threads/build/tests/threads/priority-donate-nest.d: ../../tests/threads/priority-donate-nest.c ../../include/lib/stdio.h \
threads/build/tests/threads/priority-donate-multiple2.output:Kernel command line: -q run priority-donate-multiple2
threads/build/tests/threads/priority-donate-multiple2.output:Executing 'priority-donate-multiple2':
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) begin
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Main thread should have priority 34.  Actual priority: 34.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 36.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Main thread should have priority 36.  Actual priority: 36.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Thread b acquired lock b.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Thread b finished.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Thread a acquired lock a.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Thread a finished.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Thread c finished.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Threads b, a, c should have just finished, in that order.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) Main thread should have priority 31.  Actual priority: 31.
threads/build/tests/threads/priority-donate-multiple2.output:(priority-donate-multiple2) end
threads/build/tests/threads/priority-donate-multiple2.output:Execution of 'priority-donate-multiple2' complete.
Binary file threads/build/tests/threads/priority-donate-chain.o matches
threads/build/tests/threads/mlfqs/mlfqs-load-60.d:tests/threads/mlfqs/mlfqs-load-60.o: \
threads/build/tests/threads/mlfqs/mlfqs-load-60.d: ../../tests/threads/mlfqs/mlfqs-load-60.c ../../include/lib/stdio.h \
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:Kernel command line: -q -mlfqs run mlfqs-fair-20
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:Executing 'mlfqs-fair-20':
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) begin
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Starting 20 threads...
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Starting threads took 1 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Sleeping 40 seconds to let threads run, please wait...
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 0 received 153 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 1 received 153 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 2 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 3 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 4 received 153 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 5 received 153 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 6 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 7 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 8 received 153 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 9 received 148 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 10 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 11 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 12 received 148 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 13 received 148 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 14 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 15 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 16 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 17 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 18 received 148 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) Thread 19 received 149 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:(mlfqs-fair-20) end
threads/build/tests/threads/mlfqs/mlfqs-fair-20.output:Execution of 'mlfqs-fair-20' complete.
Binary file threads/build/tests/threads/mlfqs/mlfqs-fair.o matches
threads/build/tests/threads/mlfqs/mlfqs-block.output:Kernel command line: -q -mlfqs run mlfqs-block
threads/build/tests/threads/mlfqs/mlfqs-block.output:Executing 'mlfqs-block':
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) begin
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Main thread acquiring lock.
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Main thread creating block thread, sleeping 25 seconds...
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Block thread spinning for 20 seconds...
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Block thread acquiring lock...
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Main thread spinning for 5 seconds...
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Main thread releasing lock.
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) ...got it.
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) Block thread should have already acquired lock.
threads/build/tests/threads/mlfqs/mlfqs-block.output:(mlfqs-block) end
threads/build/tests/threads/mlfqs/mlfqs-block.output:Execution of 'mlfqs-block' complete.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:Kernel command line: -q -mlfqs run mlfqs-load-avg
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:Executing 'mlfqs-load-avg':
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) begin
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) Starting 60 load threads...
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) Starting threads took 0 seconds.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 0 seconds, load average=0.00.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 2 seconds, load average=0.05.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 4 seconds, load average=0.16.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 6 seconds, load average=0.34.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 8 seconds, load average=0.58.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 10 seconds, load average=0.87.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 12 seconds, load average=1.22.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 14 seconds, load average=1.63.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 16 seconds, load average=2.09.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 18 seconds, load average=2.60.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 20 seconds, load average=3.16.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 22 seconds, load average=3.76.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 24 seconds, load average=4.42.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 26 seconds, load average=5.11.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 28 seconds, load average=5.85.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 30 seconds, load average=6.63.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 32 seconds, load average=7.46.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 34 seconds, load average=8.32.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 36 seconds, load average=9.22.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 38 seconds, load average=10.15.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 40 seconds, load average=11.12.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 42 seconds, load average=12.13.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 44 seconds, load average=13.16.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 46 seconds, load average=14.23.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 48 seconds, load average=15.33.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 50 seconds, load average=16.46.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 52 seconds, load average=17.62.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 54 seconds, load average=18.81.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 56 seconds, load average=20.02.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 58 seconds, load average=21.26.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 60 seconds, load average=22.52.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 62 seconds, load average=23.74.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 64 seconds, load average=24.89.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 66 seconds, load average=25.92.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 68 seconds, load average=26.82.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 70 seconds, load average=27.66.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 72 seconds, load average=28.40.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 74 seconds, load average=29.03.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 76 seconds, load average=29.56.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 78 seconds, load average=30.02.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 80 seconds, load average=30.42.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 82 seconds, load average=30.70.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 84 seconds, load average=30.92.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 86 seconds, load average=31.04.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 88 seconds, load average=31.12.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 90 seconds, load average=31.12.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 92 seconds, load average=31.03.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 94 seconds, load average=30.92.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 96 seconds, load average=30.72.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 98 seconds, load average=30.45.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 100 seconds, load average=30.14.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 102 seconds, load average=29.75.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 104 seconds, load average=29.31.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 106 seconds, load average=28.82.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 108 seconds, load average=28.28.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 110 seconds, load average=27.69.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 112 seconds, load average=27.06.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 114 seconds, load average=26.38.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 116 seconds, load average=25.66.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 118 seconds, load average=24.89.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 120 seconds, load average=24.08.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 122 seconds, load average=23.29.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 124 seconds, load average=22.52.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 126 seconds, load average=21.77.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 128 seconds, load average=21.05.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 130 seconds, load average=20.36.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 132 seconds, load average=19.69.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 134 seconds, load average=19.03.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 136 seconds, load average=18.41.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 138 seconds, load average=17.80.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 140 seconds, load average=17.21.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 142 seconds, load average=16.64.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 144 seconds, load average=16.09.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 146 seconds, load average=15.56.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 148 seconds, load average=15.04.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 150 seconds, load average=14.55.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 152 seconds, load average=14.07.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 154 seconds, load average=13.60.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 156 seconds, load average=13.15.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 158 seconds, load average=12.72.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 160 seconds, load average=12.30.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 162 seconds, load average=11.89.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 164 seconds, load average=11.50.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 166 seconds, load average=11.12.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 168 seconds, load average=10.75.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 170 seconds, load average=10.39.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 172 seconds, load average=10.05.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 174 seconds, load average=9.72.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 176 seconds, load average=9.40.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) After 178 seconds, load average=9.09.
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:(mlfqs-load-avg) end
threads/build/tests/threads/mlfqs/mlfqs-load-avg.output:Execution of 'mlfqs-load-avg' complete.
Binary file threads/build/tests/threads/mlfqs/mlfqs-recent-1.o matches
Binary file threads/build/tests/threads/mlfqs/mlfqs-block.o matches
threads/build/tests/threads/mlfqs/mlfqs-load-60.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-fair-20.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-load-avg.d:tests/threads/mlfqs/mlfqs-load-avg.o: \
threads/build/tests/threads/mlfqs/mlfqs-load-avg.d: ../../tests/threads/mlfqs/mlfqs-load-avg.c ../../include/lib/stdio.h \
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:Kernel command line: -q -mlfqs run mlfqs-recent-1
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:Executing 'mlfqs-recent-1':
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) begin
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) Sleeping 10 seconds to allow recent_cpu to decay, please wait...
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 2 seconds, recent_cpu is 7.39, load_avg is 0.03.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 4 seconds, recent_cpu is 13.59, load_avg is 0.06.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 6 seconds, recent_cpu is 19.59, load_avg is 0.10.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 8 seconds, recent_cpu is 25.39, load_avg is 0.13.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 10 seconds, recent_cpu is 31.02, load_avg is 0.15.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 12 seconds, recent_cpu is 36.47, load_avg is 0.18.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 14 seconds, recent_cpu is 41.76, load_avg is 0.21.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 16 seconds, recent_cpu is 46.87, load_avg is 0.24.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 18 seconds, recent_cpu is 51.82, load_avg is 0.26.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 20 seconds, recent_cpu is 56.62, load_avg is 0.28.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 22 seconds, recent_cpu is 61.28, load_avg is 0.31.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 24 seconds, recent_cpu is 65.77, load_avg is 0.33.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 26 seconds, recent_cpu is 70.13, load_avg is 0.35.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 28 seconds, recent_cpu is 74.35, load_avg is 0.37.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 30 seconds, recent_cpu is 78.42, load_avg is 0.40.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 32 seconds, recent_cpu is 82.39, load_avg is 0.42.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 34 seconds, recent_cpu is 86.23, load_avg is 0.43.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 36 seconds, recent_cpu is 89.93, load_avg is 0.45.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 38 seconds, recent_cpu is 93.52, load_avg is 0.47.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 40 seconds, recent_cpu is 97.00, load_avg is 0.49.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 42 seconds, recent_cpu is 100.37, load_avg is 0.51.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 44 seconds, recent_cpu is 103.63, load_avg is 0.52.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 46 seconds, recent_cpu is 106.79, load_avg is 0.54.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 48 seconds, recent_cpu is 109.84, load_avg is 0.55.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 50 seconds, recent_cpu is 112.80, load_avg is 0.57.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 52 seconds, recent_cpu is 115.67, load_avg is 0.58.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 54 seconds, recent_cpu is 118.45, load_avg is 0.60.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 56 seconds, recent_cpu is 121.14, load_avg is 0.61.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 58 seconds, recent_cpu is 123.72, load_avg is 0.62.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 60 seconds, recent_cpu is 126.24, load_avg is 0.63.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 62 seconds, recent_cpu is 128.66, load_avg is 0.65.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 64 seconds, recent_cpu is 131.01, load_avg is 0.66.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 66 seconds, recent_cpu is 133.29, load_avg is 0.67.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 68 seconds, recent_cpu is 135.49, load_avg is 0.68.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 70 seconds, recent_cpu is 137.62, load_avg is 0.69.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 72 seconds, recent_cpu is 139.67, load_avg is 0.70.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 74 seconds, recent_cpu is 141.66, load_avg is 0.71.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 76 seconds, recent_cpu is 143.61, load_avg is 0.72.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 78 seconds, recent_cpu is 145.47, load_avg is 0.73.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 80 seconds, recent_cpu is 147.28, load_avg is 0.74.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 82 seconds, recent_cpu is 149.02, load_avg is 0.75.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 84 seconds, recent_cpu is 150.71, load_avg is 0.76.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 86 seconds, recent_cpu is 152.34, load_avg is 0.76.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 88 seconds, recent_cpu is 153.92, load_avg is 0.77.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 90 seconds, recent_cpu is 155.45, load_avg is 0.78.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 92 seconds, recent_cpu is 156.93, load_avg is 0.79.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 94 seconds, recent_cpu is 158.36, load_avg is 0.79.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 96 seconds, recent_cpu is 159.75, load_avg is 0.80.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 98 seconds, recent_cpu is 161.08, load_avg is 0.81.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 100 seconds, recent_cpu is 162.39, load_avg is 0.81.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 102 seconds, recent_cpu is 163.65, load_avg is 0.82.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 104 seconds, recent_cpu is 164.86, load_avg is 0.82.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 106 seconds, recent_cpu is 166.02, load_avg is 0.83.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 108 seconds, recent_cpu is 167.16, load_avg is 0.84.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 110 seconds, recent_cpu is 168.26, load_avg is 0.84.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 112 seconds, recent_cpu is 169.33, load_avg is 0.85.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 114 seconds, recent_cpu is 170.36, load_avg is 0.85.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 116 seconds, recent_cpu is 171.36, load_avg is 0.86.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 118 seconds, recent_cpu is 172.31, load_avg is 0.86.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 120 seconds, recent_cpu is 173.26, load_avg is 0.87.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 122 seconds, recent_cpu is 174.15, load_avg is 0.87.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 124 seconds, recent_cpu is 175.01, load_avg is 0.87.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 126 seconds, recent_cpu is 175.86, load_avg is 0.88.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 128 seconds, recent_cpu is 176.68, load_avg is 0.88.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 130 seconds, recent_cpu is 177.45, load_avg is 0.89.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 132 seconds, recent_cpu is 178.21, load_avg is 0.89.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 134 seconds, recent_cpu is 178.95, load_avg is 0.89.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 136 seconds, recent_cpu is 179.67, load_avg is 0.90.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 138 seconds, recent_cpu is 180.36, load_avg is 0.90.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 140 seconds, recent_cpu is 181.03, load_avg is 0.90.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 142 seconds, recent_cpu is 181.68, load_avg is 0.91.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 144 seconds, recent_cpu is 182.30, load_avg is 0.91.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 146 seconds, recent_cpu is 182.89, load_avg is 0.91.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 148 seconds, recent_cpu is 183.48, load_avg is 0.92.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 150 seconds, recent_cpu is 184.04, load_avg is 0.92.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 152 seconds, recent_cpu is 184.59, load_avg is 0.92.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 154 seconds, recent_cpu is 185.11, load_avg is 0.92.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 156 seconds, recent_cpu is 185.62, load_avg is 0.93.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 158 seconds, recent_cpu is 186.12, load_avg is 0.93.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 160 seconds, recent_cpu is 186.59, load_avg is 0.93.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 162 seconds, recent_cpu is 187.06, load_avg is 0.93.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 164 seconds, recent_cpu is 187.51, load_avg is 0.93.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 166 seconds, recent_cpu is 187.94, load_avg is 0.94.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 168 seconds, recent_cpu is 188.35, load_avg is 0.94.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 170 seconds, recent_cpu is 188.76, load_avg is 0.94.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 172 seconds, recent_cpu is 189.15, load_avg is 0.94.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 174 seconds, recent_cpu is 189.52, load_avg is 0.94.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 176 seconds, recent_cpu is 189.88, load_avg is 0.95.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 178 seconds, recent_cpu is 190.24, load_avg is 0.95.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) After 180 seconds, recent_cpu is 190.57, load_avg is 0.95.
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:(mlfqs-recent-1) end
threads/build/tests/threads/mlfqs/mlfqs-recent-1.output:Execution of 'mlfqs-recent-1' complete.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:Kernel command line: -q -mlfqs run mlfqs-load-60
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:Executing 'mlfqs-load-60':
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) begin
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) Starting 60 niced load threads...
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) Starting threads took 0 seconds.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 0 seconds, load average=0.00.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 2 seconds, load average=1.98.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 4 seconds, load average=3.90.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 6 seconds, load average=5.76.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 8 seconds, load average=7.55.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 10 seconds, load average=9.28.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 12 seconds, load average=10.96.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 14 seconds, load average=12.58.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 16 seconds, load average=14.15.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 18 seconds, load average=15.66.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 20 seconds, load average=17.13.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 22 seconds, load average=18.55.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 24 seconds, load average=19.92.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 26 seconds, load average=21.24.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 28 seconds, load average=22.52.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 30 seconds, load average=23.76.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 32 seconds, load average=24.96.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 34 seconds, load average=26.12.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 36 seconds, load average=27.24.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 38 seconds, load average=28.32.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 40 seconds, load average=29.37.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 42 seconds, load average=30.38.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 44 seconds, load average=31.36.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 46 seconds, load average=32.30.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 48 seconds, load average=33.22.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 50 seconds, load average=34.11.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 52 seconds, load average=34.96.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 54 seconds, load average=35.79.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 56 seconds, load average=36.59.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 58 seconds, load average=37.36.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 60 seconds, load average=38.11.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 62 seconds, load average=36.85.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 64 seconds, load average=35.63.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 66 seconds, load average=34.46.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 68 seconds, load average=33.32.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 70 seconds, load average=32.21.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 72 seconds, load average=31.15.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 74 seconds, load average=30.12.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 76 seconds, load average=29.12.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 78 seconds, load average=28.16.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 80 seconds, load average=27.23.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 82 seconds, load average=26.33.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 84 seconds, load average=25.46.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 86 seconds, load average=24.62.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 88 seconds, load average=23.80.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 90 seconds, load average=23.02.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 92 seconds, load average=22.26.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 94 seconds, load average=21.52.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 96 seconds, load average=20.81.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 98 seconds, load average=20.12.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 100 seconds, load average=19.46.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 102 seconds, load average=18.81.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 104 seconds, load average=18.19.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 106 seconds, load average=17.59.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 108 seconds, load average=17.01.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 110 seconds, load average=16.45.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 112 seconds, load average=15.90.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 114 seconds, load average=15.38.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 116 seconds, load average=14.87.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 118 seconds, load average=14.38.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 120 seconds, load average=13.90.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 122 seconds, load average=13.44.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 124 seconds, load average=13.00.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 126 seconds, load average=12.57.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 128 seconds, load average=12.15.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 130 seconds, load average=11.75.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 132 seconds, load average=11.36.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 134 seconds, load average=10.99.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 136 seconds, load average=10.62.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 138 seconds, load average=10.27.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 140 seconds, load average=9.93.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 142 seconds, load average=9.60.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 144 seconds, load average=9.29.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 146 seconds, load average=8.98.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 148 seconds, load average=8.68.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 150 seconds, load average=8.40.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 152 seconds, load average=8.12.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 154 seconds, load average=7.85.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 156 seconds, load average=7.59.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 158 seconds, load average=7.34.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 160 seconds, load average=7.10.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 162 seconds, load average=6.86.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 164 seconds, load average=6.63.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 166 seconds, load average=6.42.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 168 seconds, load average=6.20.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 170 seconds, load average=6.00.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 172 seconds, load average=5.80.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 174 seconds, load average=5.61.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 176 seconds, load average=5.42.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) After 178 seconds, load average=5.24.
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:(mlfqs-load-60) end
threads/build/tests/threads/mlfqs/mlfqs-load-60.output:Execution of 'mlfqs-load-60' complete.
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:Kernel command line: -q -mlfqs run mlfqs-nice-2
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:Executing 'mlfqs-nice-2':
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) begin
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) Starting 2 threads...
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) Starting threads took 1 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) Sleeping 40 seconds to let threads run, please wait...
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) Thread 0 received 1929 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) Thread 1 received 1072 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:(mlfqs-nice-2) end
threads/build/tests/threads/mlfqs/mlfqs-nice-2.output:Execution of 'mlfqs-nice-2' complete.
threads/build/tests/threads/mlfqs/mlfqs-fair-2.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:Kernel command line: -q -mlfqs run mlfqs-fair-2
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:Executing 'mlfqs-fair-2':
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) begin
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) Starting 2 threads...
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) Starting threads took 1 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) Sleeping 40 seconds to let threads run, please wait...
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) Thread 0 received 1501 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) Thread 1 received 1501 ticks.
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:(mlfqs-fair-2) end
threads/build/tests/threads/mlfqs/mlfqs-fair-2.output:Execution of 'mlfqs-fair-2' complete.
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:Kernel command line: -q -mlfqs run mlfqs-load-1
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:Executing 'mlfqs-load-1':
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) begin
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) spinning for up to 45 seconds, please wait...
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) load average rose to 0.5 after 41 seconds
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) sleeping for another 10 seconds, please wait...
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) load average fell back below 0.5 (to 0.43)
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) PASS
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:(mlfqs-load-1) end
threads/build/tests/threads/mlfqs/mlfqs-load-1.output:Execution of 'mlfqs-load-1' complete.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:Kernel command line: -q -mlfqs run mlfqs-nice-10
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:Executing 'mlfqs-nice-10':
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) begin
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Starting 10 threads...
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Starting threads took 1 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Sleeping 40 seconds to let threads run, please wait...
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 0 received 680 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 1 received 593 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 2 received 504 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 3 received 400 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 4 received 312 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 5 received 225 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 6 received 152 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 7 received 88 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 8 received 41 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) Thread 9 received 8 ticks.
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:(mlfqs-nice-10) end
threads/build/tests/threads/mlfqs/mlfqs-nice-10.output:Execution of 'mlfqs-nice-10' complete.
Binary file threads/build/tests/threads/mlfqs/mlfqs-load-1.o matches
threads/build/tests/threads/mlfqs/mlfqs-recent-1.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-block.d:tests/threads/mlfqs/mlfqs-block.o: \
threads/build/tests/threads/mlfqs/mlfqs-block.d: ../../tests/threads/mlfqs/mlfqs-block.c ../../include/lib/stdio.h \
threads/build/tests/threads/mlfqs/mlfqs-recent-1.d:tests/threads/mlfqs/mlfqs-recent-1.o: \
threads/build/tests/threads/mlfqs/mlfqs-recent-1.d: ../../tests/threads/mlfqs/mlfqs-recent-1.c ../../include/lib/stdio.h \
Binary file threads/build/tests/threads/mlfqs/mlfqs-load-avg.o matches
threads/build/tests/threads/mlfqs/mlfqs-load-1.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-nice-2.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/mlfqs/mlfqs-load-60.o matches
threads/build/tests/threads/mlfqs/mlfqs-nice-10.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-block.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/mlfqs/mlfqs-fair.d:tests/threads/mlfqs/mlfqs-fair.o: ../../tests/threads/mlfqs/mlfqs-fair.c \
threads/build/tests/threads/mlfqs/mlfqs-load-1.d:tests/threads/mlfqs/mlfqs-load-1.o: \
threads/build/tests/threads/mlfqs/mlfqs-load-1.d: ../../tests/threads/mlfqs/mlfqs-load-1.c ../../include/lib/stdio.h \
threads/build/tests/threads/mlfqs/mlfqs-load-avg.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-lower.d:tests/threads/priority-donate-lower.o: \
threads/build/tests/threads/priority-donate-lower.d: ../../tests/threads/priority-donate-lower.c ../../include/lib/stdio.h \
threads/build/tests/threads/priority-donate-multiple.d:tests/threads/priority-donate-multiple.o: \
threads/build/tests/threads/priority-donate-multiple.d: ../../tests/threads/priority-donate-multiple.c ../../include/lib/stdio.h \
threads/build/tests/threads/priority-donate-sema.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/alarm-single.output:Kernel command line: -q run alarm-single
threads/build/tests/threads/alarm-single.output:Executing 'alarm-single':
threads/build/tests/threads/alarm-single.output:(alarm-single) begin
threads/build/tests/threads/alarm-single.output:(alarm-single) Creating 5 threads to sleep 1 times each.
threads/build/tests/threads/alarm-single.output:(alarm-single) Thread 0 sleeps 10 ticks each time,
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 1 sleeps 20 ticks each time, and so on.
threads/build/tests/threads/alarm-single.output:(alarm-single) If successful, product of iteration count and
threads/build/tests/threads/alarm-single.output:(alarm-single) sleep duration will appear in nondescending order.
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 0: duration=10, iteration=1, product=10
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 1: duration=20, iteration=1, product=20
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 2: duration=30, iteration=1, product=30
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 3: duration=40, iteration=1, product=40
threads/build/tests/threads/alarm-single.output:(alarm-single) thread 4: duration=50, iteration=1, product=50
threads/build/tests/threads/alarm-single.output:(alarm-single) end
threads/build/tests/threads/alarm-single.output:Execution of 'alarm-single' complete.
threads/build/tests/threads/priority-donate-lower.output:Kernel command line: -q run priority-donate-lower
threads/build/tests/threads/priority-donate-lower.output:Executing 'priority-donate-lower':
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) begin
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) Main thread should have priority 41.  Actual priority: 41.
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) Lowering base priority...
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) Main thread should have priority 41.  Actual priority: 41.
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) acquire: got the lock
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) acquire: done
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) acquire must already have finished.
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) Main thread should have priority 21.  Actual priority: 21.
threads/build/tests/threads/priority-donate-lower.output:(priority-donate-lower) end
threads/build/tests/threads/priority-donate-lower.output:Execution of 'priority-donate-lower' complete.
Binary file threads/build/tests/threads/priority-donate-multiple2.o matches
Binary file threads/build/tests/threads/priority-fifo.o matches
threads/build/tests/threads/priority-donate-one.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/priority-sema.o matches
threads/build/tests/threads/alarm-priority.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/priority-preempt.o matches
threads/build/tests/threads/priority-fifo.output:Kernel command line: -q run priority-fifo
threads/build/tests/threads/priority-fifo.output:Executing 'priority-fifo':
threads/build/tests/threads/priority-fifo.output:(priority-fifo) begin
threads/build/tests/threads/priority-fifo.output:(priority-fifo) 16 threads will iterate 16 times in the same order each time.
threads/build/tests/threads/priority-fifo.output:(priority-fifo) If the order varies then there is a bug.
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) iteration: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
threads/build/tests/threads/priority-fifo.output:(priority-fifo) end
threads/build/tests/threads/priority-fifo.output:Execution of 'priority-fifo' complete.
threads/build/tests/threads/priority-donate-sema.d:tests/threads/priority-donate-sema.o: \
threads/build/tests/threads/priority-donate-sema.d: ../../tests/threads/priority-donate-sema.c ../../include/lib/stdio.h \
threads/build/tests/threads/priority-preempt.d:tests/threads/priority-preempt.o: ../../tests/threads/priority-preempt.c \
Binary file threads/build/tests/threads/priority-change.o matches
threads/build/tests/threads/priority-preempt.output:Kernel command line: -q run priority-preempt
threads/build/tests/threads/priority-preempt.output:Executing 'priority-preempt':
threads/build/tests/threads/priority-preempt.output:(priority-preempt) begin
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority iteration 0
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority iteration 1
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority iteration 2
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority iteration 3
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority iteration 4
threads/build/tests/threads/priority-preempt.output:(priority-preempt) Thread high-priority done!
threads/build/tests/threads/priority-preempt.output:(priority-preempt) The high-priority thread should have already completed.
threads/build/tests/threads/priority-preempt.output:(priority-preempt) end
threads/build/tests/threads/priority-preempt.output:Execution of 'priority-preempt' complete.
threads/build/tests/threads/alarm-priority.d:tests/threads/alarm-priority.o: ../../tests/threads/alarm-priority.c \
Binary file threads/build/tests/threads/tests.o matches
threads/build/tests/threads/priority-change.output:Kernel command line: -q run priority-change
threads/build/tests/threads/priority-change.output:Executing 'priority-change':
threads/build/tests/threads/priority-change.output:(priority-change) begin
threads/build/tests/threads/priority-change.output:(priority-change) Creating a high-priority thread 2.
threads/build/tests/threads/priority-change.output:(priority-change) Thread 2 now lowering priority.
threads/build/tests/threads/priority-change.output:(priority-change) Thread 2 should have just lowered its priority.
threads/build/tests/threads/priority-change.output:(priority-change) Thread 2 exiting.
threads/build/tests/threads/priority-change.output:(priority-change) Thread 2 should have just exited.
threads/build/tests/threads/priority-change.output:(priority-change) end
threads/build/tests/threads/priority-change.output:Execution of 'priority-change' complete.
threads/build/tests/threads/condvar/priority-condvar.d:tests/threads/condvar/priority-condvar.o: \
threads/build/tests/threads/condvar/priority-condvar.d: ../../tests/threads/condvar/priority-condvar.c ../../include/lib/stdio.h \
threads/build/tests/threads/condvar/priority-condvar.output:Kernel command line: -q run priority-condvar
threads/build/tests/threads/condvar/priority-condvar.output:Executing 'priority-condvar':
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) begin
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 23 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 22 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 21 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 30 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 29 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 28 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 27 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 26 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 25 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 24 starting.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 30 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 29 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 28 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 27 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 26 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 25 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 24 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 23 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 22 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Signaling...
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) Thread priority 21 woke up.
threads/build/tests/threads/condvar/priority-condvar.output:(priority-condvar) end
threads/build/tests/threads/condvar/priority-condvar.output:Execution of 'priority-condvar' complete.
threads/build/tests/threads/condvar/priority-condvar.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/condvar/priority-condvar.o matches
threads/build/tests/threads/alarm-wait.d:tests/threads/alarm-wait.o: ../../tests/threads/alarm-wait.c \
Binary file threads/build/tests/threads/alarm-simultaneous.o matches
Binary file threads/build/tests/threads/priority-donate-multiple.o matches
threads/build/tests/threads/alarm-multiple.output:Kernel command line: -q run alarm-multiple
threads/build/tests/threads/alarm-multiple.output:Executing 'alarm-multiple':
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) begin
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) Creating 5 threads to sleep 7 times each.
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) Thread 0 sleeps 10 ticks each time,
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1 sleeps 20 ticks each time, and so on.
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) If successful, product of iteration count and
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) sleep duration will appear in nondescending order.
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=1, product=10
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=1, product=20
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=2, product=20
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=1, product=30
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=3, product=30
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=1, product=40
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=2, product=40
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=4, product=40
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=1, product=50
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=5, product=50
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=2, product=60
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=3, product=60
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=6, product=60
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 0: duration=10, iteration=7, product=70
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=2, product=80
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=4, product=80
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=3, product=90
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=2, product=100
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=5, product=100
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=3, product=120
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=4, product=120
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=6, product=120
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 1: duration=20, iteration=7, product=140
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=3, product=150
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=5, product=150
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=4, product=160
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=6, product=180
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=4, product=200
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=5, product=200
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 2: duration=30, iteration=7, product=210
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=6, product=240
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=5, product=250
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 3: duration=40, iteration=7, product=280
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=6, product=300
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) thread 4: duration=50, iteration=7, product=350
threads/build/tests/threads/alarm-multiple.output:(alarm-multiple) end
threads/build/tests/threads/alarm-multiple.output:Execution of 'alarm-multiple' complete.
threads/build/tests/threads/priority-donate-multiple.output:Kernel command line: -q run priority-donate-multiple
threads/build/tests/threads/priority-donate-multiple.output:Executing 'priority-donate-multiple':
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) begin
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Main thread should have priority 32.  Actual priority: 32.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Main thread should have priority 33.  Actual priority: 33.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread b acquired lock b.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread b finished.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread b should have just finished.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Main thread should have priority 32.  Actual priority: 32.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread a acquired lock a.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread a finished.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Thread a should have just finished.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) Main thread should have priority 31.  Actual priority: 31.
threads/build/tests/threads/priority-donate-multiple.output:(priority-donate-multiple) end
threads/build/tests/threads/priority-donate-multiple.output:Execution of 'priority-donate-multiple' complete.
threads/build/tests/threads/priority-change.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/alarm-negative.d:tests/threads/alarm-negative.o: ../../tests/threads/alarm-negative.c \
threads/build/tests/threads/alarm-negative.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-fifo.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-chain.d:tests/threads/priority-donate-chain.o: \
threads/build/tests/threads/priority-donate-chain.d: ../../tests/threads/priority-donate-chain.c ../../include/lib/stdio.h \
threads/build/tests/threads/alarm-single.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-multiple2.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-sema.d:tests/threads/priority-sema.o: ../../tests/threads/priority-sema.c \
Binary file threads/build/tests/threads/alarm-priority.o matches
Binary file threads/build/tests/threads/alarm-wait.o matches
threads/build/tests/threads/priority-donate-lower.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-chain.output:Kernel command line: -q run priority-donate-chain
threads/build/tests/threads/priority-donate-chain.output:Executing 'priority-donate-chain':
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) begin
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main got lock.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 3.  Actual priority: 3.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 6.  Actual priority: 6.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 9.  Actual priority: 9.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 12.  Actual priority: 12.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 15.  Actual priority: 15.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 18.  Actual priority: 18.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main should have priority 21.  Actual priority: 21.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 1 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 1 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 2 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 2 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 3 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 3 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 4 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 4 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 5 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 5 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 6 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 6 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 7 got lock
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 7 should have priority 21. Actual priority: 21
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 7 finishing with priority 21.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 7 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 6 finishing with priority 18.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 6 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 5 finishing with priority 15.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 5 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 4 finishing with priority 12.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 4 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 3 finishing with priority 9.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 3 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 2 finishing with priority 6.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 2 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) thread 1 finishing with priority 3.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) interloper 1 finished.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) main finishing with priority 0.
threads/build/tests/threads/priority-donate-chain.output:(priority-donate-chain) end
threads/build/tests/threads/priority-donate-chain.output:Execution of 'priority-donate-chain' complete.
Binary file threads/build/tests/threads/priority-donate-sema.o matches
threads/build/tests/threads/priority-donate-sema.output:Kernel command line: -q run priority-donate-sema
threads/build/tests/threads/priority-donate-sema.output:Executing 'priority-donate-sema':
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) begin
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread L acquired lock.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread L downed semaphore.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread H acquired lock.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread H finished.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread M finished.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Thread L finished.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) Main thread finished.
threads/build/tests/threads/priority-donate-sema.output:(priority-donate-sema) end
threads/build/tests/threads/priority-donate-sema.output:Execution of 'priority-donate-sema' complete.
threads/build/tests/threads/alarm-simultaneous.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/alarm-zero.output:Kernel command line: -q run alarm-zero
threads/build/tests/threads/alarm-zero.output:Executing 'alarm-zero':
threads/build/tests/threads/alarm-zero.output:(alarm-zero) begin
threads/build/tests/threads/alarm-zero.output:(alarm-zero) PASS
threads/build/tests/threads/alarm-zero.output:(alarm-zero) end
threads/build/tests/threads/alarm-zero.output:Execution of 'alarm-zero' complete.
threads/build/tests/threads/priority-preempt.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
threads/build/tests/threads/priority-donate-chain.errors:qemu-system-x86_64: warning: TCG doesn't support requested feature: CPUID.01H:ECX.vmx [bit 5]
Binary file threads/build/tests/threads/alarm-negative.o matches
threads/build/results:pass tests/threads/alarm-single
threads/build/results:pass tests/threads/alarm-multiple
threads/build/results:pass tests/threads/alarm-simultaneous
threads/build/results:pass tests/threads/alarm-priority
threads/build/results:pass tests/threads/alarm-zero
threads/build/results:pass tests/threads/alarm-negative
threads/build/results:pass tests/threads/priority-change
threads/build/results:pass tests/threads/priority-donate-one
threads/build/results:pass tests/threads/priority-donate-multiple
threads/build/results:pass tests/threads/priority-donate-multiple2
threads/build/results:pass tests/threads/priority-donate-nest
threads/build/results:pass tests/threads/priority-donate-sema
threads/build/results:pass tests/threads/priority-donate-lower
threads/build/results:pass tests/threads/priority-fifo
threads/build/results:pass tests/threads/priority-preempt
threads/build/results:pass tests/threads/priority-sema
threads/build/results:pass tests/threads/priority-donate-chain
threads/build/results:pass tests/threads/condvar/priority-condvar
threads/build/results:pass tests/threads/mlfqs/mlfqs-load-1
threads/build/results:pass tests/threads/mlfqs/mlfqs-load-60
threads/build/results:pass tests/threads/mlfqs/mlfqs-load-avg
threads/build/results:pass tests/threads/mlfqs/mlfqs-recent-1
threads/build/results:pass tests/threads/mlfqs/mlfqs-fair-2
threads/build/results:pass tests/threads/mlfqs/mlfqs-fair-20
threads/build/results:pass tests/threads/mlfqs/mlfqs-nice-2
threads/build/results:pass tests/threads/mlfqs/mlfqs-nice-10
threads/build/results:pass tests/threads/mlfqs/mlfqs-block
Binary file threads/build/lib/stdlib.o matches
Binary file threads/build/lib/random.o matches
Binary file threads/build/lib/string.o matches
Binary file threads/build/lib/stdio.o matches
Binary file threads/build/lib/debug.o matches
Binary file threads/build/lib/kernel/hash.o matches
Binary file threads/build/lib/kernel/console.o matches
Binary file threads/build/lib/kernel/list.o matches
Binary file threads/build/lib/kernel/debug.o matches
Binary file threads/build/lib/kernel/bitmap.o matches
Binary file threads/build/lib/arithmetic.o matches
Binary file threads/build/kernel.o matches
threads/build/threads/kernel.lds.s:OUTPUT_FORMAT("elf64-x86-64")
threads/build/threads/kernel.lds.s:OUTPUT_ARCH(i386:x86-64)
threads/build/threads/kernel.lds.s:  *(.eh_frame .note.GNU-stack .stab)
threads/build/threads/intr-stubs.d:threads/intr-stubs.o: ../../threads/intr-stubs.S \
Binary file threads/build/threads/start.o matches
Binary file threads/build/threads/synch.o matches
Binary file threads/build/threads/interrupt.o matches
Binary file threads/build/threads/malloc.o matches
Binary file threads/build/threads/init.o matches
Binary file threads/build/threads/thread.o matches
threads/build/threads/interrupt.d: ../../include/threads/intr-stubs.h ../../include/threads/io.h \
Binary file threads/build/threads/intr-stubs.o matches
Binary file threads/build/threads/palloc.o matches
threads/build/threads/thread.d: ../../include/threads/intr-stubs.h ../../include/threads/palloc.h \
Binary file threads/build/threads/loader.o matches
Binary file threads/build/threads/mmu.o matches
Binary file threads/build/devices/disk.o matches
Binary file threads/build/devices/vga.o matches
Binary file threads/build/devices/timer.o matches
Binary file threads/build/devices/kbd.o matches
Binary file threads/build/devices/input.o matches
Binary file threads/build/devices/intq.o matches
Binary file threads/build/devices/serial.o matches
Binary file threads/build/os.dsk matches
threads/mmu.c: * otherwise it is read-only.
threads/interrupt.c:#include "threads/intr-stubs.h"
threads/interrupt.c:   or lower-numbered ring.  In practice, DPL==3 allows user mode
threads/interrupt.c:   [IA32-v3a] section 5.12.1.2 "Flag Usage By Exception- or
threads/interrupt.c:   Interrupt-Handler Procedure" for discussion. */
threads/interrupt.c:   the CPU.  See [IA32-v3a] sections 5.10 "Interrupt Descriptor
threads/interrupt.c:   Exception- or Interrupt-Handler Procedure". */
threads/interrupt.c:	.size = sizeof(idt) - 1,
threads/interrupt.c:   pre-empted.  Handlers for external interrupts also may not
threads/interrupt.c:	   value off the stack into `flags'.  See [IA32-v2b] "PUSHF"
threads/interrupt.c:	   and "POP" and [IA32-v3a] 5.8.1 "Masking Maskable Hardware
threads/interrupt.c:	   See [IA32-v2b] "STI" and [IA32-v3a] 5.8.1 "Masking Maskable
threads/interrupt.c:	   See [IA32-v2b] "CLI" and [IA32-v3a] 5.8.1 "Masking Maskable
threads/interrupt.c:	intr_names[14] = "#PF Page-Fault Exception";
threads/interrupt.c:	intr_names[16] = "#MF x87 FPU Floating-Point Error";
threads/interrupt.c:	intr_names[18] = "#MC Machine-Check Exception";
threads/interrupt.c:	intr_names[19] = "#XF SIMD Floating-Point Exception";
threads/interrupt.c:   the DPL or lower-numbered ring.  In practice, DPL==3 allows
threads/interrupt.c:   [IA32-v3a] sections 4.5 "Privilege Levels" and 4.8.1.1
threads/interrupt.c:	outb (0x21, 0x20); /* ICW2: line IR0...7 -> irq 0x20...0x27. */
threads/interrupt.c:	outb (0x21, 0x01); /* ICW4: 8086 mode, normal EOI, non-buffered. */
threads/interrupt.c:	outb (0xa1, 0x28); /* ICW2: line IR0...7 -> irq 0x28...0x2f. */
threads/interrupt.c:	outb (0xa1, 0x01); /* ICW4: 8086 mode, normal EOI, non-buffered. */
threads/interrupt.c:/* Sends an end-of-interrupt signal to the PIC for the given IRQ.
threads/interrupt.c:   intr-stubs.S.  FRAME describes the interrupt and the
threads/interrupt.c:	external = frame->vec_no >= 0x20 && frame->vec_no < 0x30;
threads/interrupt.c:	handler = intr_handlers[frame->vec_no];
threads/interrupt.c:	else if (frame->vec_no == 0x27 || frame->vec_no == 0x2f) {
threads/interrupt.c:		pic_end_of_interrupt (frame->vec_no);
threads/interrupt.c:	   See [IA32-v2a] "MOV--Move to/from Control Registers" and
threads/interrupt.c:	   [IA32-v3a] 5.14 "Interrupt 14--Page Fault Exception
threads/interrupt.c:			f->vec_no, intr_names[f->vec_no], f->rip);
threads/interrupt.c:	printf (" cr2=%016llx error=%16llx\n", cr2, f->error_code);
threads/interrupt.c:			f->R.rax, f->R.rbx, f->R.rcx, f->R.rdx);
threads/interrupt.c:			f->rsp, f->R.rbp, f->R.rsi, f->R.rdi);
threads/interrupt.c:			f->rip, f->R.r8, f->R.r9, f->R.r10);
threads/interrupt.c:			f->R.r11, f->R.r12, f->R.r13, f->R.r14);
threads/interrupt.c:	printf ("r15 %016llx rflags %08llx\n", f->R.r15, f->eflags);
threads/interrupt.c:			f->es, f->ds, f->cs, f->ss);
threads/malloc.c:   But if the arena that the block was in now has no in-use
threads/malloc.c:		d->block_size = block_size;
threads/malloc.c:		d->blocks_per_arena = (PGSIZE - sizeof (struct arena)) / block_size;
threads/malloc.c:		list_init (&d->free_list);
threads/malloc.c:		lock_init (&d->lock);
threads/malloc.c:	/* Find the smallest descriptor that satisfies a SIZE-byte
threads/malloc.c:		if (d->block_size >= size)
threads/malloc.c:		a->magic = ARENA_MAGIC;
threads/malloc.c:		a->desc = NULL;
threads/malloc.c:		a->free_cnt = page_cnt;
threads/malloc.c:	lock_acquire (&d->lock);
threads/malloc.c:	if (list_empty (&d->free_list)) {
threads/malloc.c:			lock_release (&d->lock);
threads/malloc.c:		a->magic = ARENA_MAGIC;
threads/malloc.c:		a->desc = d;
threads/malloc.c:		a->free_cnt = d->blocks_per_arena;
threads/malloc.c:		for (i = 0; i < d->blocks_per_arena; i++) {
threads/malloc.c:			list_push_back (&d->free_list, &b->free_elem);
threads/malloc.c:	b = list_entry (list_pop_front (&d->free_list), struct block, free_elem);
threads/malloc.c:	a->free_cnt--;
threads/malloc.c:	lock_release (&d->lock);
threads/malloc.c:	struct desc *d = a->desc;
threads/malloc.c:	return d != NULL ? d->block_size : PGSIZE * a->free_cnt - pg_ofs (block);
threads/malloc.c:		struct desc *d = a->desc;
threads/malloc.c:			/* Clear the block to help detect use-after-free bugs. */
threads/malloc.c:			memset (b, 0xcc, d->block_size);
threads/malloc.c:			lock_acquire (&d->lock);
threads/malloc.c:			list_push_front (&d->free_list, &b->free_elem);
threads/malloc.c:			if (++a->free_cnt >= d->blocks_per_arena) {
threads/malloc.c:				ASSERT (a->free_cnt == d->blocks_per_arena);
threads/malloc.c:				for (i = 0; i < d->blocks_per_arena; i++) {
threads/malloc.c:					list_remove (&b->free_elem);
threads/malloc.c:			lock_release (&d->lock);
threads/malloc.c:			palloc_free_multiple (a, a->free_cnt);
threads/malloc.c:	ASSERT (a->magic == ARENA_MAGIC);
threads/malloc.c:	ASSERT (a->desc == NULL
threads/malloc.c:			|| (pg_ofs (b) - sizeof *a) % a->desc->block_size == 0);
threads/malloc.c:	ASSERT (a->desc != NULL || pg_ofs (b) == sizeof *a);
threads/malloc.c:/* Returns the (IDX - 1)'th block within arena A. */
threads/malloc.c:	ASSERT (a->magic == ARENA_MAGIC);
threads/malloc.c:	ASSERT (idx < a->desc->blocks_per_arena);
threads/malloc.c:			+ idx * a->desc->block_size);
threads/palloc.c:/* Page allocator.  Hands out memory in page-size (or
threads/palloc.c:   page-multiple) chunks.  See malloc.h for an allocator that
threads/palloc.c:	struct e820_entry *entries = ptov (mb_info->mmap_base);
threads/palloc.c:	for (i = 0; i < mb_info->mmap_len / sizeof (struct e820_entry); i++) {
threads/palloc.c:		if (entry->type == ACPI_RECLAIMABLE || entry->type == USABLE) {
threads/palloc.c:			uint64_t start = APPEND_HILO (entry->mem_hi, entry->mem_lo);
threads/palloc.c:			uint64_t size = APPEND_HILO (entry->len_hi, entry->len_lo);
threads/palloc.c:			printf("%llx ~ %llx %d\n", start, end, entry->type);
threads/palloc.c:			if (area->size == 0) {
threads/palloc.c:				if (area->start > start)
threads/palloc.c:					area->start = start;
threads/palloc.c:				if (area->end < end)
threads/palloc.c:					area->end = end;
threads/palloc.c:				area->size += size;
threads/palloc.c:	uint64_t total_pages = (base_mem->size + ext_mem->size) / PGSIZE;
threads/palloc.c:	uint64_t kern_pages = total_pages - user_pages;
threads/palloc.c:	struct e820_entry *entries = ptov (mb_info->mmap_base);
threads/palloc.c:	for (i = 0; i < mb_info->mmap_len / sizeof (struct e820_entry); i++) {
threads/palloc.c:		if (entry->type == ACPI_RECLAIMABLE || entry->type == USABLE) {
threads/palloc.c:			start = (uint64_t) ptov (APPEND_HILO (entry->mem_hi, entry->mem_lo));
threads/palloc.c:			size = APPEND_HILO (entry->len_hi, entry->len_lo);
threads/palloc.c:						rem -= size_in_pg;
threads/palloc.c:						rem = user_pages - size_in_pg + rem;
threads/palloc.c:						rem -= size_in_pg;
threads/palloc.c:	for (i = 0; i < mb_info->mmap_len / sizeof (struct e820_entry); i++) {
threads/palloc.c:		if (entry->type == ACPI_RECLAIMABLE || entry->type == USABLE) {
threads/palloc.c:				ptov (APPEND_HILO (entry->mem_hi, entry->mem_lo));
threads/palloc.c:			uint64_t size = APPEND_HILO (entry->len_hi, entry->len_lo);
threads/palloc.c:			pool_end = pool->base + bitmap_size (pool->used_map) * PGSIZE;
threads/palloc.c:			page_idx = pg_no (start) - pg_no (pool->base);
threads/palloc.c:				page_cnt = ((uint64_t) pool_end - start) / PGSIZE;
threads/palloc.c:				bitmap_set_multiple (pool->used_map, page_idx, page_cnt, false);
threads/palloc.c:				page_cnt = ((uint64_t) end - start) / PGSIZE;
threads/palloc.c:				bitmap_set_multiple (pool->used_map, page_idx, page_cnt, false);
threads/palloc.c:	lock_acquire (&pool->lock);
threads/palloc.c:	size_t page_idx = bitmap_scan_and_flip (pool->used_map, 0, page_cnt, false);
threads/palloc.c:	lock_release (&pool->lock);
threads/palloc.c:		pages = pool->base + PGSIZE * page_idx;
threads/palloc.c:	page_idx = pg_no (pages) - pg_no (pool->base);
threads/palloc.c:	ASSERT (bitmap_all (pool->used_map, page_idx, page_cnt));
threads/palloc.c:	bitmap_set_multiple (pool->used_map, page_idx, page_cnt, false);
threads/palloc.c:	uint64_t pgcnt = (end - start) / PGSIZE;
threads/palloc.c:	lock_init(&p->lock);
threads/palloc.c:	p->used_map = bitmap_create_in_buf (pgcnt, *bm_base, bm_pages);
threads/palloc.c:	p->base = (void *) start;
threads/palloc.c:	bitmap_set_all(p->used_map, true);
threads/palloc.c:	size_t start_page = pg_no (pool->base);
threads/palloc.c:	size_t end_page = start_page + bitmap_size (pool->used_map);
threads/targets.mk:threads_SRC += threads/intr-stubs.S	# Interrupt stubs.
threads/kernel.lds.S:OUTPUT_FORMAT("elf64-x86-64")
threads/kernel.lds.S:OUTPUT_ARCH(i386:x86-64)
threads/kernel.lds.S:  /* Kernel starts with code, followed by read-only data and writable data. */
threads/kernel.lds.S:  /* BSS (zero-initialized data) is after everything else. */
threads/kernel.lds.S:		*(.eh_frame .note.GNU-stack .stab)
threads/loader.S:#### 0x7c00-0x7e00 (512 bytes).  Then it jumps to the beginning of it,
threads/loader.S:#### in real mode.  This code switches into protected mode (32-bit
threads/loader.S:#define CR0_EM 0x00000004      /* (Floating-point) Emulation. */
threads/loader.S:#define CR0_WP 0x00010000      /* Write-Protect enable in kernel mode. */
threads/loader.S:# Code runs in real mode, which is a 16-bit segment.
threads/loader.S:	mov %ecx, -4(%edi)
threads/loader.S:	mov %ecx, -4(%edi)
threads/loader.S:#       write-protect bits in page tables (!).
threads/loader.S:#    EM (Emulation): forces floating-point instructions to trap.
threads/loader.S:# We're now in protected mode in a 16-bit segment.  The CPU still has
threads/loader.S:# the real-mode code segment cached in %cs's segment descriptor.  We
threads/loader.S:# Because we're not in a 32-bit segment the data32 prefix is needed to
threads/loader.S:# jump to a 32-bit offset.
threads/loader.S:# We're now in protected mode in a 32-bit segment.
threads/loader.S:	.word	0x17			# sizeof (gdt) - 1
threads/loader.S:#### Command-line arguments and their count.
threads/loader.S:	.org LOADER_ARG_CNT - LOADER_BASE
threads/loader.S:	.org LOADER_ARGS - LOADER_BASE
threads/loader.S:#### Boot-sector signature.
threads/loader.S:	.org LOADER_SIG - LOADER_BASE
threads/start.S:#define RELOC(x) (x - LOADER_KERN_BASE)
threads/start.S:	mov $(entry_64 - LOADER_KERN_BASE), %eax
threads/init.c:/* Page-map-level-4 with kernel mappings only. */
threads/init.c:/* -f: Format the file system? */
threads/init.c:/* -q: Power off after kernel tasks complete? */
threads/init.c:	memset (&_start_bss, 0, &_end_bss - &_start_bss);
threads/init.c:   an argv-like array. */
threads/init.c:		p += strnlen (p, end - p) + 1;
threads/init.c:   and returns the first non-option argument. */
threads/init.c:	for (; *argv != NULL && **argv == '-'; argv++) {
threads/init.c:		if (!strcmp (name, "-h"))
threads/init.c:		else if (!strcmp (name, "-q"))
threads/init.c:		else if (!strcmp (name, "-f"))
threads/init.c:		else if (!strcmp (name, "-rs"))
threads/init.c:		else if (!strcmp (name, "-mlfqs"))
threads/init.c:		else if (!strcmp (name, "-ul"))
threads/init.c:		else if (!strcmp (name, "-threads-tests"))
threads/init.c:			PANIC ("unknown option `%s' (use -h for help)", name);
threads/init.c:			if (a->name == NULL)
threads/init.c:				PANIC ("unknown action `%s' (use -h for help)", *argv);
threads/init.c:			else if (!strcmp (*argv, a->name))
threads/init.c:		for (i = 1; i < a->argc; i++)
threads/init.c:				PANIC ("action `%s' requires %d argument(s)", *argv, a->argc - 1);
threads/init.c:		a->function (argv);
threads/init.c:		argv += a->argc;
threads/init.c:			"Use these actions indirectly via `pintos' -g and -p options:\n"
threads/init.c:			"  -h                 Print this help message and power off.\n"
threads/init.c:			"  -q                 Power off VM after actions or on panic.\n"
threads/init.c:			"  -f                 Format file system disk during startup.\n"
threads/init.c:			"  -rs=SEED           Set random number seed to SEED.\n"
threads/init.c:			"  -mlfqs             Use multi-level feedback queue scheduler.\n"
threads/init.c:			"  -ul=COUNT          Limit user memory to COUNT pages.\n"
threads/thread.c:#include "threads/intr-stubs.h"
threads/thread.c:/* If false (default), use round-robin scheduler.
threads/thread.c:   If true, use multi-level feedback queue scheduler.
threads/thread.c:   Controlled by kernel command-line option "-o mlfqs". */
threads/thread.c:#define is_thread(t) ((t) != NULL && (t)->magic == THREAD_MAGIC)
threads/thread.c:        .size = sizeof(gdt) - 1,
threads/thread.c:    initial_thread->status = THREAD_RUNNING;
threads/thread.c:    initial_thread->tid = allocate_tid();
threads/thread.c:    else if (t->pml4 != NULL)
threads/thread.c:   Priority scheduling is the goal of Problem 1-3. */
threads/thread.c:    tid = t->tid = allocate_tid();
threads/thread.c:    t->tf.rip = (uintptr_t)kernel_thread;
threads/thread.c:    t->tf.R.rdi = (uint64_t)function;
threads/thread.c:    t->tf.R.rsi = (uint64_t)aux;
threads/thread.c:    t->tf.ds = SEL_KDSEG;
threads/thread.c:    t->tf.es = SEL_KDSEG;
threads/thread.c:    t->tf.ss = SEL_KDSEG;
threads/thread.c:    t->tf.cs = SEL_KCSEG;
threads/thread.c:    t->tf.eflags = FLAG_IF;
threads/thread.c:    t->fd_table = palloc_get_page(PAL_ZERO);
threads/thread.c:        t->parent = thread_current();
threads/thread.c:        list_push_back(&thread_current()->child_list, &t->childelem);
threads/thread.c:    thread_current()->status = THREAD_BLOCKED;
threads/thread.c:/* Transitions a blocked thread T to the ready-to-run state.
threads/thread.c:    ASSERT(t->status == THREAD_BLOCKED);
threads/thread.c:    list_insert_ordered(&ready_list, &t->elem, cmp_priority, NULL);
threads/thread.c:    t->status = THREAD_READY;
threads/thread.c:    return thread_current()->name;
threads/thread.c:    ASSERT(t->status == THREAD_RUNNING);
threads/thread.c:    return thread_current()->tid;
threads/thread.c:    sema_up(&thread_current()->exit_semaphore);
threads/thread.c:    curr->wakeup_tick = ticks;
threads/thread.c:    list_push_back(&sleep_list, &curr->elem);
threads/thread.c:        if (ticks >= target_thread->wakeup_tick) {
threads/thread.c:            update_next_tick_to_awake(target_thread->wakeup_tick);
threads/thread.c:        list_insert_ordered(&ready_list, &curr->elem, cmp_priority, NULL);
threads/thread.c:    thread_current()->priority = new_priority;
threads/thread.c:    thread_current()->init_priority = new_priority;
threads/thread.c:    if (thread_current()->wait_on_lock != NULL) {
threads/thread.c:    return thread_current()->priority;
threads/thread.c:    curr->nice = nice;
threads/thread.c:    int NICE = curr->nice;
threads/thread.c:    int int_recent_cpu = fp_to_int_round(thread_current()->recent_cpu * 100);
threads/thread.c:        /* Re-enable interrupts and wait for the next one.
threads/thread.c:		   between re-enabling interrupts and waiting for the next
threads/thread.c:		   See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3a]
threads/thread.c:    t->status = THREAD_BLOCKED;
threads/thread.c:    t->max_fd = 2;
threads/thread.c:    //     t->fd_table[i] = NULL;
threads/thread.c:    strlcpy(t->name, name, sizeof t->name);
threads/thread.c:    t->tf.rsp = (uint64_t)t + PGSIZE - sizeof(void *);
threads/thread.c:    t->priority = priority;
threads/thread.c:    t->init_priority = priority;
threads/thread.c:    t->wait_on_lock = NULL;
threads/thread.c:    list_init(&t->donations);
threads/thread.c:    t->nice = NICE_DEFAULT;
threads/thread.c:    t->recent_cpu = RECENT_CPU_DEFAULT;
threads/thread.c:    t->magic = THREAD_MAGIC;
threads/thread.c:    t->parent = NULL;
threads/thread.c:    t->child_exit_status = NULL;
threads/thread.c:    t->child_load_status = NULL;
threads/thread.c:    t->child_fork_status = NULL;
threads/thread.c:    t->current_file = NULL;
threads/thread.c:    t->child_exit_status = 0;
threads/thread.c:    sema_init(&t->exit_semaphore, 0);
threads/thread.c:    sema_init(&t->load_semaphore, 0);
threads/thread.c:    sema_init(&t->fork_semaphore, 0);
threads/thread.c:    list_push_back(&all_list, &t->allelem);
threads/thread.c:    list_init(&t->child_list);
threads/thread.c:    uint64_t tf_cur = (uint64_t)&running_thread()->tf;
threads/thread.c:    uint64_t tf = (uint64_t)&th->tf;
threads/thread.c:        "addq $(out_iret -  __next), %%rbx\n"
threads/thread.c:    ASSERT(thread_current()->status == THREAD_RUNNING);
threads/thread.c:    // 즉, palloc_free_page(cp) < remove_child_process(child_thread) < process_wait <- wait
threads/thread.c:        list_remove(&thread_current()->allelem);
threads/thread.c:    thread_current()->status = status;
threads/thread.c:    ASSERT(curr->status != THREAD_RUNNING);
threads/thread.c:    next->status = THREAD_RUNNING;
threads/thread.c:        // if (curr && curr->status == THREAD_DYING && curr != initial_thread && !is_thread(curr->parent)) {
threads/thread.c:        //     list_push_back(&destruction_req, &curr->elem);
threads/thread.c:        // if (curr && curr->status == THREAD_DYING && curr != initial_thread && curr->parent->status == THREAD_DYING) {
threads/thread.c:        // if (curr && curr->status == THREAD_DYING && curr != initial_thread) {
threads/thread.c:        //     list_push_back(&destruction_req, &curr->elem);
threads/thread.c:    if (!list_empty(&ready_list) && curr->priority < first_thread->priority) {
threads/thread.c:    return thread_a->priority > thread_b->priority;
threads/thread.c:    struct thread *lock_holder = thread_current()->wait_on_lock->holder;
threads/thread.c:        lock_holder->priority = thread_current()->priority;
threads/thread.c:        if (lock_holder->wait_on_lock != NULL) {
threads/thread.c:            lock_holder = lock_holder->wait_on_lock->holder;
threads/thread.c:    if (!list_empty(&thread_current()->donations)) {
threads/thread.c:        struct list_elem *target_element = list_begin(&thread_current()->donations);
threads/thread.c:        while (target_element != list_end(&thread_current()->donations)) {
threads/thread.c:            if (target_thread->wait_on_lock == lock) {
threads/thread.c:    thread_current()->priority = thread_current()->init_priority;
threads/thread.c:    if (!list_empty(&thread_current()->donations)) {
threads/thread.c:        struct list_elem *target_element = list_max(&thread_current()->donations, cmp_donation_priority, NULL);
threads/thread.c:        if (target_thread->priority > thread_current()->priority) {
threads/thread.c:            thread_current()->priority = target_thread->priority;
threads/thread.c:    t->priority = fp_to_int(sub_mixed(sub_fp(int_to_fp(PRI_MAX), (t->recent_cpu / 4)), t->nice * 2));
threads/thread.c:    t->recent_cpu = add_mixed(mult_fp(coef, t->recent_cpu), t->nice);
threads/thread.c:    curr->recent_cpu = add_mixed(curr->recent_cpu, 1);
threads/thread.c:        if (t->status != THREAD_DYING) {
threads/Make.vars:# -*- makefile -*-
Makefile.build:# -*- makefile -*-
Makefile.build:	CPPFLAGS += -DDO_TEST_CONDVAR
Makefile.build:	CPPFLAGS += -DDO_TEST_MLFQS
Makefile.build:os.dsk: CPPFLAGS += -I$(SRCDIR)/lib/kernel
Makefile.build:# Kernel-specific library code.
Makefile.build:threads/kernel.lds.s: CPPFLAGS += -P
Makefile.build:	$(LD) $(LDFLAGS) -T $< -o $@ $(OBJECTS)
Makefile.build:	$(OBJCOPY) -O binary -R .note -R .comment -S $< $@.tmp
Makefile.build:	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) -DKERNEL_LOAD_PAGES=`perl -e 'print +(-s "kernel.bin") / 4096;'`
Makefile.build:	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7c00 --oformat binary -o $@ $<
Makefile.build:	rm -f $(OBJECTS) $(DEPENDS)
Makefile.build:	rm -f threads/loader.o threads/kernel.lds.s threads/loader.d
Makefile.build:	rm -f kernel.o kernel.lds.s
Makefile.build:	rm -f kernel.bin loader.bin os.dsk
Makefile.build:	rm -f bochsout.txt bochsrc.txt
Makefile.build:	rm -f results grade
Makefile.build:-include $(DEPENDS)
devices/disk.c:   controller.  It attempts to comply to [ATA-3]. */
devices/disk.c:#define reg_data(CHANNEL) ((CHANNEL)->reg_base + 0)     /* Data. */
devices/disk.c:#define reg_error(CHANNEL) ((CHANNEL)->reg_base + 1)    /* Error. */
devices/disk.c:#define reg_nsect(CHANNEL) ((CHANNEL)->reg_base + 2)    /* Sector Count. */
devices/disk.c:#define reg_lbal(CHANNEL) ((CHANNEL)->reg_base + 3)     /* LBA 0:7. */
devices/disk.c:#define reg_lbam(CHANNEL) ((CHANNEL)->reg_base + 4)     /* LBA 15:8. */
devices/disk.c:#define reg_lbah(CHANNEL) ((CHANNEL)->reg_base + 5)     /* LBA 23:16. */
devices/disk.c:#define reg_device(CHANNEL) ((CHANNEL)->reg_base + 6)   /* Device/LBA 27:24. */
devices/disk.c:#define reg_status(CHANNEL) ((CHANNEL)->reg_base + 7)   /* Status (r/o). */
devices/disk.c:   (If we supported non-legacy ATA controllers this would not be
devices/disk.c:#define reg_ctl(CHANNEL) ((CHANNEL)->reg_base + 0x206)  /* Control (w/o). */
devices/disk.c:		snprintf (c->name, sizeof c->name, "hd%zu", chan_no);
devices/disk.c:				c->reg_base = 0x1f0;
devices/disk.c:				c->irq = 14 + 0x20;
devices/disk.c:				c->reg_base = 0x170;
devices/disk.c:				c->irq = 15 + 0x20;
devices/disk.c:		lock_init (&c->lock);
devices/disk.c:		c->expecting_interrupt = false;
devices/disk.c:		sema_init (&c->completion_wait, 0);
devices/disk.c:			struct disk *d = &c->devices[dev_no];
devices/disk.c:			snprintf (d->name, sizeof d->name, "%s:%d", c->name, dev_no);
devices/disk.c:			d->channel = c;
devices/disk.c:			d->dev_no = dev_no;
devices/disk.c:			d->is_ata = false;
devices/disk.c:			d->capacity = 0;
devices/disk.c:			d->read_cnt = d->write_cnt = 0;
devices/disk.c:		intr_register_ext (c->irq, interrupt_handler, c->name);
devices/disk.c:		if (check_device_type (&c->devices[0]))
devices/disk.c:			check_device_type (&c->devices[1]);
devices/disk.c:			if (c->devices[dev_no].is_ata)
devices/disk.c:				identify_ata_device (&c->devices[dev_no]);
devices/disk.c:			if (d != NULL && d->is_ata)
devices/disk.c:						d->name, d->read_cnt, d->write_cnt);
devices/disk.c:/* Returns the disk numbered DEV_NO--either 0 or 1 for master or
devices/disk.c:   slave, respectively--within the channel numbered CHAN_NO.
devices/disk.c:0:0 - boot loader, command line args, and operating system kernel
devices/disk.c:0:1 - file system
devices/disk.c:1:0 - scratch
devices/disk.c:1:1 - swap
devices/disk.c:		if (d->is_ata)
devices/disk.c:/* Returns the size of disk D, measured in DISK_SECTOR_SIZE-byte
devices/disk.c:	return d->capacity;
devices/disk.c:   per-disk locking is unneeded. */
devices/disk.c:	c = d->channel;
devices/disk.c:	lock_acquire (&c->lock);
devices/disk.c:	sema_down (&c->completion_wait);
devices/disk.c:		PANIC ("%s: disk read failed, sector=%"PRDSNu, d->name, sec_no);
devices/disk.c:	d->read_cnt++;
devices/disk.c:	lock_release (&c->lock);
devices/disk.c:   per-disk locking is unneeded. */
devices/disk.c:	c = d->channel;
devices/disk.c:	lock_acquire (&c->lock);
devices/disk.c:		PANIC ("%s: disk write failed, sector=%"PRDSNu, d->name, sec_no);
devices/disk.c:	sema_down (&c->completion_wait);
devices/disk.c:	d->write_cnt++;
devices/disk.c:	lock_release (&c->lock);
devices/disk.c:		struct disk *d = &c->devices[dev_no];
devices/disk.c:		select_device (&c->devices[0]);
devices/disk.c:		wait_while_busy (&c->devices[0]);
devices/disk.c:		select_device (&c->devices[1]);
devices/disk.c:		wait_while_busy (&c->devices[1]);
devices/disk.c:	struct channel *c = d->channel;
devices/disk.c:	if ((error != 1 && (error != 0x81 || d->dev_no == 1))
devices/disk.c:		d->is_ata = false;
devices/disk.c:		d->is_ata = (lbam == 0 && lbah == 0) || (lbam == 0x3c && lbah == 0xc3);
devices/disk.c:	struct channel *c = d->channel;
devices/disk.c:	ASSERT (d->is_ata);
devices/disk.c:	sema_down (&c->completion_wait);
devices/disk.c:		d->is_ata = false;
devices/disk.c:	d->capacity = id[60] | ((uint32_t) id[61] << 16);
devices/disk.c:	printf ("%s: detected %'"PRDSNu" sector (", d->name, d->capacity);
devices/disk.c:	if (d->capacity > 1024 / DISK_SECTOR_SIZE * 1024 * 1024)
devices/disk.c:				d->capacity / (1024 / DISK_SECTOR_SIZE * 1024 * 1024));
devices/disk.c:	else if (d->capacity > 1024 / DISK_SECTOR_SIZE * 1024)
devices/disk.c:		printf ("%"PRDSNu" MB", d->capacity / (1024 / DISK_SECTOR_SIZE * 1024));
devices/disk.c:	else if (d->capacity > 1024 / DISK_SECTOR_SIZE)
devices/disk.c:		printf ("%"PRDSNu" kB", d->capacity / (1024 / DISK_SECTOR_SIZE));
devices/disk.c:		printf ("%"PRDSNu" byte", d->capacity * DISK_SECTOR_SIZE);
devices/disk.c:	/* Find the last non-white, non-null character. */
devices/disk.c:	for (; size > 0; size--) {
devices/disk.c:		int c = string[(size - 1) ^ 1];
devices/disk.c:	struct channel *c = d->channel;
devices/disk.c:	ASSERT (sec_no < d->capacity);
devices/disk.c:			DEV_MBS | DEV_LBA | (d->dev_no == 1 ? DEV_DEV : 0) | (sec_no >> 24));
devices/disk.c:	c->expecting_interrupt = true;
devices/disk.c:/* Low-level ATA primitives. */
devices/disk.c:		if ((inb (reg_status (d->channel)) & (STA_BSY | STA_DRQ)) == 0)
devices/disk.c:	printf ("%s: idle timeout\n", d->name);
devices/disk.c:	struct channel *c = d->channel;
devices/disk.c:			printf ("%s: busy, waiting...", d->name);
devices/disk.c:	struct channel *c = d->channel;
devices/disk.c:	if (d->dev_no == 1)
devices/disk.c:		if (f->vec_no == c->irq) {
devices/disk.c:			if (c->expecting_interrupt) {
devices/disk.c:				sema_up (&c->completion_wait);      /* Wake up waiter. */
devices/disk.c:				printf ("%s: unexpected interrupt\n", c->name);
devices/vga.c:				cx--;
devices/vga.c:		cy = ROW_CNT - 1;
devices/vga.c:		memmove (&fb[0], &fb[1], sizeof fb[0] * (ROW_CNT - 1));
devices/vga.c:		clear_row (ROW_CNT - 1);
devices/vga.c:	/* See [FREEVGA] under "Manipulating the Text-mode Cursor". */
devices/vga.c:	/* See [FREEVGA] under "Manipulating the Text-mode Cursor". */
devices/timer.c:	/* Approximate loops_per_tick as the largest power-of-two
devices/timer.c:	return timer_ticks () - then;
devices/timer.c:	while (loops-- > 0)
devices/timer.c:	   ---------------------- = NUM * TIMER_FREQ / DENOM ticks.
devices/timer.c:		/* Otherwise, use a busy-wait loop for more accurate
devices/timer.c:		   sub-tick timing.  We scale the numerator and denominator
devices/kbd.c:	{0x02, "1234567890-="},
devices/kbd.c:				c -= 0x40;
devices/kbd.c:		for (key = shift_keys; key->scancode != 0; key++)
devices/kbd.c:			if (key->scancode == code) {
devices/kbd.c:				*key->state_var = !release;
devices/kbd.c:	for (; k->first_scancode != 0; k++)
devices/kbd.c:		if (scancode >= k->first_scancode
devices/kbd.c:				&& scancode < k->first_scancode + strlen (k->chars)) {
devices/kbd.c:			*c = k->chars[scancode - k->first_scancode];
devices/intq.c:	lock_init (&q->lock);
devices/intq.c:	q->not_full = q->not_empty = NULL;
devices/intq.c:	q->head = q->tail = 0;
devices/intq.c:	return q->head == q->tail;
devices/intq.c:	return next (q->head) == q->tail;
devices/intq.c:		lock_acquire (&q->lock);
devices/intq.c:		wait (q, &q->not_empty);
devices/intq.c:		lock_release (&q->lock);
devices/intq.c:	byte = q->buf[q->tail];
devices/intq.c:	q->tail = next (q->tail);
devices/intq.c:	signal (q, &q->not_full);
devices/intq.c:		lock_acquire (&q->lock);
devices/intq.c:		wait (q, &q->not_full);
devices/intq.c:		lock_release (&q->lock);
devices/intq.c:	q->buf[q->head] = byte;
devices/intq.c:	q->head = next (q->head);
devices/intq.c:	signal (q, &q->not_empty);
devices/intq.c:	ASSERT ((waiter == &q->not_empty && intq_empty (q))
devices/intq.c:			|| (waiter == &q->not_full && intq_full (q)));
devices/intq.c:	ASSERT ((waiter == &q->not_empty && !intq_empty (q))
devices/intq.c:			|| (waiter == &q->not_full && !intq_full (q)));
devices/serial.c:#define RBR_REG (IO_BASE + 0)   /* Receiver Buffer Reg. (read-only). */
devices/serial.c:#define THR_REG (IO_BASE + 0)   /* Transmitter Holding Reg. (write-only). */
devices/serial.c:/* DLAB-insensitive registers. */
devices/serial.c:#define IIR_REG (IO_BASE + 2)   /* Interrupt Identification Reg. (read-only) */
devices/serial.c:#define FCR_REG (IO_BASE + 2)   /* FIFO Control Reg. (write-only). */
devices/serial.c:#define LSR_REG (IO_BASE + 5)   /* Line Status Register (read-only). */
devices/serial.c:   Polling mode busy-waits for the serial port to become free
devices/serial.c:	set_serial (115200);                  /* 115.2 kbps, N-8-1. */
devices/serial.c:/* Initializes the serial port device for queued interrupt-driven
devices/serial.c:   I/O.  With interrupt-driven I/O we don't waste CPU time
devices/serial.c:		/* If we're not set up for interrupt-driven I/O yet,
Makefile.kernel:# -*- makefile -*-
Makefile.kernel:	mkdir -p $@
Makefile.kernel:	rm -rf build
filesys/fat.c:	memcpy (&fat_fs->bs, bounce, sizeof (fat_fs->bs));
filesys/fat.c:	if (fat_fs->bs.magic != FAT_MAGIC)
filesys/fat.c:	fat_fs->fat = calloc (fat_fs->fat_length, sizeof (cluster_t));
filesys/fat.c:	if (fat_fs->fat == NULL)
filesys/fat.c:	uint8_t *buffer = (uint8_t *) fat_fs->fat;
filesys/fat.c:	off_t bytes_left = sizeof (fat_fs->fat);
filesys/fat.c:	const off_t fat_size_in_bytes = fat_fs->fat_length * sizeof (cluster_t);
filesys/fat.c:	for (unsigned i = 0; i < fat_fs->bs.fat_sectors; i++) {
filesys/fat.c:		bytes_left = fat_size_in_bytes - bytes_read;
filesys/fat.c:			disk_read (filesys_disk, fat_fs->bs.fat_start + i,
filesys/fat.c:			disk_read (filesys_disk, fat_fs->bs.fat_start + i, bounce);
filesys/fat.c:	memcpy (bounce, &fat_fs->bs, sizeof (fat_fs->bs));
filesys/fat.c:	uint8_t *buffer = (uint8_t *) fat_fs->fat;
filesys/fat.c:	off_t bytes_left = sizeof (fat_fs->fat);
filesys/fat.c:	const off_t fat_size_in_bytes = fat_fs->fat_length * sizeof (cluster_t);
filesys/fat.c:	for (unsigned i = 0; i < fat_fs->bs.fat_sectors; i++) {
filesys/fat.c:		bytes_left = fat_size_in_bytes - bytes_wrote;
filesys/fat.c:			disk_write (filesys_disk, fat_fs->bs.fat_start + i,
filesys/fat.c:			disk_write (filesys_disk, fat_fs->bs.fat_start + i, bounce);
filesys/fat.c:	fat_fs->fat = calloc (fat_fs->fat_length, sizeof (cluster_t));
filesys/fat.c:	if (fat_fs->fat == NULL)
filesys/fat.c:	    (disk_size (filesys_disk) - 1)
filesys/fat.c:	fat_fs->bs = (struct fat_boot){
filesys/fat.c:/*----------------------------------------------------------------------------*/
filesys/fat.c:/*----------------------------------------------------------------------------*/
filesys/fsutil.c: * string "PUT\0" followed by a 32-bit little-endian integer
filesys/fsutil.c:		size -= chunk_size;
filesys/fsutil.c: * followed by the file's size in bytes as a 32-bit,
filesys/fsutil.c: * little-endian integer.  Subsequent sectors receive the file's
filesys/fsutil.c:		memset (buffer + chunk_size, 0, DISK_SECTOR_SIZE - chunk_size);
filesys/fsutil.c:		size -= chunk_size;
filesys/page_cache.c:	page->operations = &page_cache_op;
filesys/file.c:		file->inode = inode;
filesys/file.c:		file->pos = 0;
filesys/file.c:		file->deny_write = false;
filesys/file.c:	return file_open (inode_reopen (file->inode));
filesys/file.c:	struct file *nfile = file_open (inode_reopen (file->inode));
filesys/file.c:		nfile->pos = file->pos;
filesys/file.c:		if (file->deny_write)
filesys/file.c:		inode_close (file->inode);
filesys/file.c:	return file->inode;
filesys/file.c:	off_t bytes_read = inode_read_at (file->inode, buffer, size, file->pos);
filesys/file.c:	file->pos += bytes_read;
filesys/file.c:	return inode_read_at (file->inode, buffer, size, file_ofs);
filesys/file.c:	off_t bytes_written = inode_write_at (file->inode, buffer, size, file->pos);
filesys/file.c:	file->pos += bytes_written;
filesys/file.c:	return inode_write_at (file->inode, buffer, size, file_ofs);
filesys/file.c:	if (!file->deny_write) {
filesys/file.c:		file->deny_write = true;
filesys/file.c:		inode_deny_write (file->inode);
filesys/file.c:/* Re-enables write operations on FILE's underlying inode.
filesys/file.c:	if (file->deny_write) {
filesys/file.c:		file->deny_write = false;
filesys/file.c:		inode_allow_write (file->inode);
filesys/file.c:	return inode_length (file->inode);
filesys/file.c:	file->pos = new_pos;
filesys/file.c:	return file->pos;
filesys/filesys.c:#include "filesys/free-map.h"
filesys/free-map.c:#include "filesys/free-map.h"
filesys/free-map.c:		PANIC ("bitmap creation failed--disk is too large");
filesys/inode.c:#include "filesys/free-map.h"
filesys/inode.c:/* On-disk inode.
filesys/inode.c:/* In-memory inode. */
filesys/inode.c: * Returns -1 if INODE does not contain data for a byte at offset
filesys/inode.c:	if (pos < inode->data.length)
filesys/inode.c:		return inode->data.start + pos / DISK_SECTOR_SIZE;
filesys/inode.c:		return -1;
filesys/inode.c:		disk_inode->length = length;
filesys/inode.c:		disk_inode->magic = INODE_MAGIC;
filesys/inode.c:		if (free_map_allocate (sectors, &disk_inode->start)) {
filesys/inode.c:					disk_write (filesys_disk, disk_inode->start + i, zeros); 
filesys/inode.c:		if (inode->sector == sector) {
filesys/inode.c:	list_push_front (&open_inodes, &inode->elem);
filesys/inode.c:	inode->sector = sector;
filesys/inode.c:	inode->open_cnt = 1;
filesys/inode.c:	inode->deny_write_cnt = 0;
filesys/inode.c:	inode->removed = false;
filesys/inode.c:	disk_read (filesys_disk, inode->sector, &inode->data);
filesys/inode.c:		inode->open_cnt++;
filesys/inode.c:	return inode->sector;
filesys/inode.c:	if (--inode->open_cnt == 0) {
filesys/inode.c:		list_remove (&inode->elem);
filesys/inode.c:		if (inode->removed) {
filesys/inode.c:			free_map_release (inode->sector, 1);
filesys/inode.c:			free_map_release (inode->data.start,
filesys/inode.c:					bytes_to_sectors (inode->data.length)); 
filesys/inode.c:	inode->removed = true;
filesys/inode.c:		off_t inode_left = inode_length (inode) - offset;
filesys/inode.c:		int sector_left = DISK_SECTOR_SIZE - sector_ofs;
filesys/inode.c:		size -= chunk_size;
filesys/inode.c:	if (inode->deny_write_cnt)
filesys/inode.c:		off_t inode_left = inode_length (inode) - offset;
filesys/inode.c:		int sector_left = DISK_SECTOR_SIZE - sector_ofs;
filesys/inode.c:		size -= chunk_size;
filesys/inode.c:	inode->deny_write_cnt++;
filesys/inode.c:	ASSERT (inode->deny_write_cnt <= inode->open_cnt);
filesys/inode.c:/* Re-enables writes to INODE.
filesys/inode.c:	ASSERT (inode->deny_write_cnt > 0);
filesys/inode.c:	ASSERT (inode->deny_write_cnt <= inode->open_cnt);
filesys/inode.c:	inode->deny_write_cnt--;
filesys/inode.c:	return inode->data.length;
filesys/targets.mk:filesys_SRC += filesys/free-map.c	# Free sector bitmap.
filesys/directory.c:		dir->inode = inode;
filesys/directory.c:		dir->pos = 0;
filesys/directory.c:	return dir_open (inode_reopen (dir->inode));
filesys/directory.c:		inode_close (dir->inode);
filesys/directory.c:	return dir->inode;
filesys/directory.c: * if EP is non-null, and sets *OFSP to the byte offset of the
filesys/directory.c: * directory entry if OFSP is non-null.
filesys/directory.c:	for (ofs = 0; inode_read_at (dir->inode, &e, sizeof e, ofs) == sizeof e;
filesys/directory.c:	 * current end-of-file.
filesys/directory.c:	for (ofs = 0; inode_read_at (dir->inode, &e, sizeof e, ofs) == sizeof e;
filesys/directory.c:	success = inode_write_at (dir->inode, &e, sizeof e, ofs) == sizeof e;
filesys/directory.c:	if (inode_write_at (dir->inode, &e, sizeof e, ofs) != sizeof e)
filesys/directory.c:	while (inode_read_at (dir->inode, &e, sizeof e, dir->pos) == sizeof e) {
filesys/directory.c:		dir->pos += sizeof e;
filesys/Make.vars:# -*- makefile -*-
filesys/Make.vars:os.dsk: DEFINES = -DUSERPROG -DFILESYS -DEFILESYS
filesys/Make.vars:GRADING_FILE = $(SRCDIR)/tests/filesys/Grading.no-vm
filesys/Make.vars:# os.dsk: DEFINES += -DVM
filesys/Make.vars:# GRADING_FILE = $(SRCDIR)/tests/filesys/Grading.with-vm
offset:vm/file.c:	page->operations = &file_ops;
offset:vm/file.c:	struct file_page *file_page = &page->file;
offset:vm/file.c:	struct file_page *file_page UNUSED = &page->file;
offset:vm/file.c:	struct file_page *file_page UNUSED = &page->file;
offset:vm/file.c:	struct file_page *file_page UNUSED = &page->file;
offset:vm/uninit.c: * the handler chain calls uninit_initialize (page->operations.swap_in).
offset:vm/uninit.c:	struct uninit_page *uninit = &page->uninit;
offset:vm/uninit.c:	struct uninit_page *uninit UNUSED = &page->uninit;
offset:vm/vm.c:	int ty = VM_TYPE (page->operations->type);
offset:vm/vm.c:			return VM_TYPE (page->uninit.type);
offset:vm/vm.c:		page->writable = writable; //todo 이거 확인해야함
offset:vm/vm.c:    page->va = pg_round_down(va); //? 이게 가능했던 이유가 뭐였을까?
offset:vm/vm.c:    elem = hash_find(&spt->vm, &page->elem);
offset:vm/vm.c:    if(!hash_insert(&spt->vm, &page->elem)) succ = true;
offset:vm/vm.c:    if(hash_delete(&spt->vm, &page->elem)) succ = true;
offset:vm/vm.c:	page->frame = frame;
offset:vm/vm.c:	if(!pml4_set_page(&thread_current()->pml4, page->va,frame->kva, page->writable));
offset:vm/vm.c:	//! 여기서 page->va는 user virtual address임
offset:vm/anon.c:	page->operations = &anon_ops;
offset:vm/anon.c:	struct anon_page *anon_page = &page->anon;
offset:vm/anon.c:	struct anon_page *anon_page = &page->anon;
offset:vm/anon.c:	struct anon_page *anon_page = &page->anon;
offset:vm/anon.c:	struct anon_page *anon_page = &page->anon;
offset:userprog/process.c:        // palloc_free_page(page->va);
offset:userprog/process.c:    page->va = stack_bottom;
offset:userprog/process.c:    page->writable = true;
offset:userprog/process.c:    page->frame = frame;
offset:userprog/process.c:    install_page(page->va, frame->kva, page->writable);
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) begin
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) init
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 0
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[0] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[0] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 1
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[1] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[1] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 2
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[2] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[2] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 3
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[3] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[3] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 4
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[4] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[4] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 5
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[5] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[5] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 6
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[6] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[6] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 7
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[7] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[7] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 8
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[8] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[8] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 9
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[9] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[9] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 10
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[10] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[10] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 11
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[11] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[11] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 12
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[12] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[12] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 13
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[13] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[13] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 14
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[14] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[14] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) sort chunk 15
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[15] exec
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) child[15] wait success
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) merge
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) verify
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) success, buf_idx=1,032,192
offset:tests/vm/page-merge-seq.ck:(page-merge-seq) end
offset:tests/vm/Make.tests:pt-write-code2 pt-grow-stk-sc page-linear page-parallel page-merge-seq	\
offset:tests/vm/Make.tests:page-merge-par page-merge-stk page-merge-mm page-shuffle mmap-read	\
offset:tests/vm/Make.tests:tests/vm/page-linear_SRC = tests/vm/page-linear.c tests/arc4.c	\
offset:tests/vm/Make.tests:tests/vm/page-parallel_SRC = tests/vm/page-parallel.c tests/lib.c tests/main.c
offset:tests/vm/Make.tests:tests/vm/page-merge-seq_SRC = tests/vm/page-merge-seq.c tests/arc4.c	\
offset:tests/vm/Make.tests:tests/vm/page-merge-par_SRC = tests/vm/page-merge-par.c \
offset:tests/vm/Make.tests:tests/vm/page-merge-stk_SRC = tests/vm/page-merge-stk.c \
offset:tests/vm/Make.tests:tests/vm/page-merge-mm_SRC = tests/vm/page-merge-mm.c \
offset:tests/vm/Make.tests:tests/vm/page-shuffle_SRC = tests/vm/page-shuffle.c tests/arc4.c	\
offset:tests/vm/Make.tests:tests/vm/page-parallel_PUTFILES = tests/vm/child-linear
offset:tests/vm/Make.tests:tests/vm/page-merge-seq_PUTFILES = tests/vm/child-sort
offset:tests/vm/Make.tests:tests/vm/page-merge-par_PUTFILES = tests/vm/child-sort
offset:tests/vm/Make.tests:tests/vm/page-merge-stk_PUTFILES = tests/vm/child-qsort
offset:tests/vm/Make.tests:tests/vm/page-merge-mm_PUTFILES = tests/vm/child-qsort-mm
offset:tests/vm/Make.tests:tests/vm/page-linear.output: TIMEOUT = 300
offset:tests/vm/Make.tests:tests/vm/page-shuffle.output: TIMEOUT = 600
offset:tests/vm/Make.tests:tests/vm/page-shuffle.output: MEMORY = 20
offset:tests/vm/Make.tests:tests/vm/page-merge-seq.output: TIMEOUT = 600
offset:tests/vm/Make.tests:tests/vm/page-merge-par.output: TIMEOUT = 600
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) begin
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) init
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 0
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 1
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 2
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 3
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 4
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 5
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 6
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) sort chunk 7
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 0
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 1
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 2
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 3
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 4
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 5
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 6
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) wait for child 7
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) merge
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) verify
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) success, buf_idx=1,048,576
offset:tests/vm/page-merge-stk.ck:(page-merge-stk) end
offset:tests/vm/page-merge-par.ck:(page-merge-par) begin
offset:tests/vm/page-merge-par.ck:(page-merge-par) init
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 0
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 1
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 2
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 3
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 4
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 5
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 6
offset:tests/vm/page-merge-par.ck:(page-merge-par) sort chunk 7
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 0
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 1
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 2
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 3
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 4
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 5
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 6
offset:tests/vm/page-merge-par.ck:(page-merge-par) wait for child 7
offset:tests/vm/page-merge-par.ck:(page-merge-par) merge
offset:tests/vm/page-merge-par.ck:(page-merge-par) verify
offset:tests/vm/page-merge-par.ck:(page-merge-par) success, buf_idx=1,048,576
offset:tests/vm/page-merge-par.ck:(page-merge-par) end
offset:tests/vm/page-parallel.ck:(page-parallel) begin
offset:tests/vm/page-parallel.ck:(page-parallel) wait for child 0
offset:tests/vm/page-parallel.ck:(page-parallel) wait for child 1
offset:tests/vm/page-parallel.ck:(page-parallel) wait for child 2
offset:tests/vm/page-parallel.ck:(page-parallel) wait for child 3
offset:tests/vm/page-parallel.ck:(page-parallel) end
offset:tests/vm/page-linear.ck:(page-linear) begin
offset:tests/vm/page-linear.ck:(page-linear) initialize
offset:tests/vm/page-linear.ck:(page-linear) read pass
offset:tests/vm/page-linear.ck:(page-linear) read/modify/write pass one
offset:tests/vm/page-linear.ck:(page-linear) read/modify/write pass two
offset:tests/vm/page-linear.ck:(page-linear) read pass
offset:tests/vm/page-linear.ck:(page-linear) end
offset:tests/vm/child-linear.c:/* Child process of page-parallel.
offset:tests/vm/Rubric.functionality:3	page-linear
offset:tests/vm/Rubric.functionality:5	page-parallel
offset:tests/vm/Rubric.functionality:3	page-shuffle
offset:tests/vm/Rubric.functionality:3	page-merge-seq
offset:tests/vm/Rubric.functionality:5	page-merge-par
offset:tests/vm/Rubric.functionality:5	page-merge-mm
offset:tests/vm/Rubric.functionality:5	page-merge-stk
offset:tests/vm/page-shuffle.ck:(page-shuffle) begin
offset:tests/vm/page-shuffle.ck:(page-shuffle) init: cksum=$init
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 0: cksum=$shuffle[0]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 1: cksum=$shuffle[1]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 2: cksum=$shuffle[2]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 3: cksum=$shuffle[3]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 4: cksum=$shuffle[4]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 5: cksum=$shuffle[5]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 6: cksum=$shuffle[6]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 7: cksum=$shuffle[7]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 8: cksum=$shuffle[8]
offset:tests/vm/page-shuffle.ck:(page-shuffle) shuffle 9: cksum=$shuffle[9]
offset:tests/vm/page-shuffle.ck:(page-shuffle) end
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) begin
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) init
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 0
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 1
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 2
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 3
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 4
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 5
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 6
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) sort chunk 7
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 0
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 1
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 2
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 3
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 4
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 5
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 6
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) wait for child 7
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) merge
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) verify
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) success, buf_idx=1,048,576
offset:tests/vm/page-merge-mm.ck:(page-merge-mm) end
offset:threads/palloc.c:/* Page allocator.  Hands out memory in page-size (or
offset:threads/palloc.c:   page-multiple) chunks.  See malloc.h for an allocator that
offset:filesys/page_cache.c:	page->operations = &page_cache_op;
utils/pintos:        s += bytes('\0' * (size - len(s) % size), 'utf-8')
utils/pintos:                        f.write(bytes('\0' * (0xfc000 * size), 'utf-8'))
utils/pintos:            disk.write(bytes("PUT\0", 'utf-8') +
utils/pintos:                       bytes("\0" * 504, 'utf-8'))
utils/pintos:            disk.write(bytes("\0" * 0x100000, 'utf-8'))
utils/pintos:            if arg[0] != '-':
utils/pintos:                    bytes(cmd.ljust(128, '\0'), 'utf-8') +
utils/pintos:        cmd = ['qemu-system-x86_64']
utils/pintos:            cmd.append('-nographic')
utils/pintos:            cmd.extend(['-s', '-S'])
utils/pintos:                cmd.extend(['-drive',
utils/pintos:            cmd.extend(['-drive',
utils/pintos:        cmd.extend(['-cpu', 'qemu64'])
utils/pintos:        cmd.extend(['-m', str(self.mem)])
utils/pintos:        cmd.extend(['-no-reboot'])
utils/pintos:        # cmd.extend(['-enable-kvm']) # Sadly, kvm is not available on server.
utils/pintos:        cmd.extend(['-serial', 'mon:stdio'])
utils/pintos:                            size += (512 - size % 512)
utils/pintos:    parser.add_argument('-v', '--no-vga', action='store_true', default=True,
utils/pintos:    parser.add_argument('-k', '--kill-on-failure', action='store_true',
utils/pintos:    parser.add_argument('-T', '--timeout', type=int, default=0,
utils/pintos:    parser.add_argument('-m', '--memory', type=int, default=256,
utils/pintos:    parser.add_argument('--fs-disk', default='fs.dsk',
utils/pintos:    parser.add_argument('--swap-disk', default='swap.dsk',
utils/pintos:    parser.add_argument('-p', '--put-file', dest='HOSTFNS', nargs=1,
utils/pintos:                             ' (e.g. tests/userprog/args-none:args-none')
utils/pintos:    parser.add_argument('-g', '--get-file', dest='GUESTFNS', nargs=1,
utils/pintos:    parser.add_argument('--mnts', dest='MNTS', nargs=1,
utils/pintos:    parser.add_argument('--gdb', action='store_true', default=False,
utils/pintos:    parser.add_argument('-t', '--threads-tests', action='store_true',
utils/pintos:    if '--' in sys.argv:
utils/pintos:        pintos_arg_index = sys.argv.index('--')
utils/pintos-mkdisk:die "$disk: already exists\n" if -e $disk;
utils/pintos-mkdisk:sysseek (DISK, $bytes - 1, SEEK_SET) or die "$disk: seek: $!\n";
utils/pintos-mkdisk:pintos-mkdisk, a utility for creating Pintos virtual disks
utils/pintos-mkdisk:  -h, --help        Display this help message.
utils/backtrace:    exit(-1)
utils/backtrace:    exit(-1)
utils/backtrace:            ['addr2line', '-e', resolve_kernel(), '-f'] + addrs)
utils/backtrace:    lines = out.decode('utf-8').split('\n')[:-1]
utils/backtrace:        path = lines[idx+1].split("../")[-1]
utils/backtrace:    if len(argv) < 2 or "-h" in argv or "--help" in argv:
Make.config:# -*- makefile -*-
Make.config:ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
Make.config:WARNINGS = -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers
Make.config:CFLAGS = -g -msoft-float -O0 -fno-omit-frame-pointer -mno-red-zone
Make.config:CFLAGS += -mcmodel=large -fno-plt -fno-pic -mno-sse
Make.config:CPPFLAGS = -nostdinc -I$(SRCDIR) -I$(SRCDIR)/include/lib -I$(SRCDIR)/include
Make.config:CPPFLAGS += -I$(SRCDIR)/include/lib/kernel
Make.config:ASFLAGS = -Wa,--gstabs -mcmodel=large
Make.config:LDFLAGS = --no-relax
Make.config:DEPS = -MMD -MF $(@:.o=.d)
Make.config:# Turn off -fstack-protector, which we don't support.
Make.config:ifeq ($(strip $(shell echo | $(CC) -fno-stack-protector -E - > /dev/null 2>&1; echo $$?)),0)
Make.config:CFLAGS += -fno-stack-protector
Make.config:	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)
Make.config:	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)
include/vm/vm.h:    //! 추가 - - - - - - - - - - - - - - - - - - - - - - - -
include/vm/vm.h:    //! 추가 - - - - - - - - - - - - - - - - - - - - - - - -
include/vm/vm.h:	/* Per-type data are binded into the union.
include/vm/vm.h:#define swap_in(page, v) (page)->operations->swap_in ((page), v)
include/vm/vm.h:#define swap_out(page) (page)->operations->swap_out (page)
include/vm/vm.h:	if ((page)->operations->destroy) (page)->operations->destroy (page)
include/userprog/exception.h:#define PF_P 0x1    /* 0: not-present page. 1: access rights violation. */
include/userprog/syscall.h:#define PID_ERROR ((pid_t) -1)
include/lib/syscall-nr.h:#endif /* lib/syscall-nr.h */
include/lib/stdarg.h:/* GCC has <stdarg.h> functionality as built-ins,
include/lib/round.h:#define ROUND_UP(X, STEP) (((X) + (STEP) - 1) / (STEP) * (STEP))
include/lib/round.h:#define DIV_ROUND_UP(X, STEP) (((X) + (STEP) - 1) / (STEP))
include/lib/limits.h:#define SCHAR_MIN (-SCHAR_MAX - 1)
include/lib/limits.h:#define SHRT_MIN (-SHRT_MAX - 1)
include/lib/limits.h:#define INT_MIN (-INT_MAX - 1)
include/lib/limits.h:#define LONG_MIN (-LONG_MAX - 1)
include/lib/limits.h:#define LLONG_MIN (-LLONG_MAX - 1)
include/lib/stddef.h:#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *) 0)->MEMBER)
include/lib/user/syscall.h:#define PID_ERROR ((pid_t) -1)
include/lib/ctype.h:static inline int tolower (int c) { return isupper (c) ? c - 'A' + 'a' : c; }
include/lib/ctype.h:static inline int toupper (int c) { return islower (c) ? c - 'a' + 'A' : c; }
include/lib/debug.h: * function name, plus a user-specific message. */
include/lib/kernel/list.h: * - "front": The first element in a list.  Undefined in an
include/lib/kernel/list.h: * - "back": The last element in a list.  Undefined in an empty
include/lib/kernel/list.h: * - "tail": The element figuratively just after the last
include/lib/kernel/list.h: * - "beginning": In a non-empty list, the front.  In an empty
include/lib/kernel/list.h: * - "head": The element figuratively just before the first
include/lib/kernel/list.h: * - "reverse beginning": In a non-empty list, the back.  In an
include/lib/kernel/list.h: * - "interior element": An element that is not the head or
include/lib/kernel/list.h:	((STRUCT *) ((uint8_t *) &(LIST_ELEM)->next     \
include/lib/kernel/list.h:		- offsetof (STRUCT, MEMBER.next)))
include/lib/kernel/hash.h:	((STRUCT *) ((uint8_t *) &(HASH_ELEM)->list_elem        \
include/lib/kernel/hash.h:		- offsetof (STRUCT, MEMBER.list_elem)))
include/lib/stdint.h:#define INT8_MIN (-INT8_MAX - 1)
include/lib/stdint.h:#define INT16_MIN (-INT16_MAX - 1)
include/lib/stdint.h:#define INT32_MIN (-INT32_MAX - 1)
include/lib/stdint.h:#define INT64_MIN (-INT64_MAX - 1)
include/threads/interrupt.h:	/* Pushed by intr_entry in intr-stubs.S.
include/threads/interrupt.h:	/* Pushed by intrNN_stub in intr-stubs.S. */
include/threads/fixed_point.h:#define INT_MAX ((1 << 31) - 1)
include/threads/fixed_point.h:#define INT_MIN (-(1 << 31))
include/threads/fixed_point.h:    return (x >= 0) ? (x + F / 2) / F : (x - F / 2) / F;
include/threads/fixed_point.h:    return x - y;
include/threads/fixed_point.h:    return x - n * F;
Binary file include/threads/fixed_point.h matches
include/threads/loader.h:#define LOADER_SIG (LOADER_END - LOADER_SIG_LEN)   /* 0xaa55 BIOS signature. */
include/threads/loader.h:#define LOADER_ARGS (LOADER_SIG - LOADER_ARGS_LEN)     /* Command-line args. */
include/threads/loader.h:#define LOADER_ARG_CNT (LOADER_ARGS - LOADER_ARG_CNT_LEN) /* Number of args. */
include/threads/loader.h:#define SEL_TSS         0x28    /* Task-state segment. */
include/threads/mmu.h:/* Segment descriptors for x86-64. */
include/threads/io.h:	/* See [IA32-v2a] "IN". */
include/threads/io.h:	/* See [IA32-v2a] "INS". */
include/threads/io.h:	/* See [IA32-v2a] "IN". */
include/threads/io.h:/* Reads CNT 16-bit (halfword) units from PORT, one after
include/threads/io.h:	/* See [IA32-v2a] "INS". */
include/threads/io.h:	/* See [IA32-v2a] "IN". */
include/threads/io.h:/* Reads CNT 32-bit (word) units from PORT, one after another,
include/threads/io.h:	/* See [IA32-v2a] "INS". */
include/threads/io.h:	/* See [IA32-v2b] "OUT". */
include/threads/io.h:/* Writes to PORT each byte of data in the CNT-byte buffer
include/threads/io.h:	/* See [IA32-v2b] "OUTS". */
include/threads/io.h:/* Writes the 16-bit DATA to PORT. */
include/threads/io.h:	/* See [IA32-v2b] "OUT". */
include/threads/io.h:/* Writes to PORT each 16-bit unit (halfword) of data in the
include/threads/io.h:   CNT-halfword buffer starting at ADDR. */
include/threads/io.h:	/* See [IA32-v2b] "OUTS". */
include/threads/io.h:/* Writes the 32-bit DATA to PORT. */
include/threads/io.h:	/* See [IA32-v2b] "OUT". */
include/threads/io.h:/* Writes to PORT each 32-bit unit (word) of data in the CNT-word
include/threads/io.h:	/* See [IA32-v2b] "OUTS". */
include/threads/thread.h:#define TID_ERROR ((tid_t)-1) /* Error value for tid_t. */
include/threads/thread.h: *      4 kB +---------------------------------+
include/threads/thread.h: *           +---------------------------------+
include/threads/thread.h: *      0 kB +---------------------------------+
include/threads/thread.h: *       structures or arrays as non-static local variables.  Use
include/threads/thread.h:/* If false (default), use round-robin scheduler.
include/threads/thread.h:   If true, use multi-level feedback queue scheduler.
include/threads/thread.h:   Controlled by kernel command-line option "-o mlfqs". */
include/threads/init.h:/* -q: Power off when kernel tasks complete? */
include/threads/intr-stubs.h: * These are little snippets of code in intr-stubs.S, one for
include/threads/intr-stubs.h: * See intr-stubs.S for more information.
include/threads/intr-stubs.h:#endif /* threads/intr-stubs.h */
include/threads/vaddr.h:#define BITMASK(SHIFT, CNT) (((1ul << (CNT)) - 1) << (SHIFT))
include/threads/vaddr.h:#define pg_round_up(va) ((void *) (((uint64_t) (va) + PGSIZE - 1) & ~PGMASK))
include/threads/vaddr.h:	((uint64_t) (vaddr) - (uint64_t) KERN_BASE);\
include/threads/pte.h: * +-------------+----------------+----------------+----------------+-------------+------------+
include/threads/pte.h: * | Sign Extend |    Page-Map    | Page-Directory | Page-directory |  Page-Table |  Physical  |
include/threads/pte.h: * |             | Level-4 Offset |    Pointer     |     Offset     |   Offset    |   Offset   |
include/threads/pte.h: * +-------------+----------------+----------------+----------------+-------------+------------+
include/threads/pte.h: *               +------- 9 ------+------- 9 ------+------- 9 ------+----- 9 -----+---- 12 ----+
include/threads/pte.h:#define PTE_W 0x2                        /* 1=read/write, 0=read-only. */
include/devices/intq.h:	struct thread *not_full;    /* Thread waiting for not-full condition. */
include/devices/intq.h:	struct thread *not_empty;   /* Thread waiting for not-empty condition. */
include/filesys/free-map.h:#endif /* filesys/free-map.h */
include/intrinsic.h:   new page tables immediately.  See [IA32-v2a] "MOV--Move
include/intrinsic.h:   to/from Control Registers" and [IA32-v3a] 3.7.5 "Base Address
activate:while [ -h "$SOURCE" ]; do
activate:  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
activate:DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
LICENSE:      4. Non-compliance
LICENSE:/* Copyright (c) 1992-1996 The Regents of the University of California.
